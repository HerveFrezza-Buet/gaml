<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.3.1"/>
<title>gaml-1.10: gamlSearch.hpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">gaml-1.10
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.3.1 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="namespaces.html"><span>Namespaces</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
      <li><a href="examples.html"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.html">src</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">gamlSearch.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="a00161.html">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="preprocessor">#pragma once</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">/*</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> *   Copyright (C) 2012,  Supelec</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> *   Author : Hervé Frezza-Buet, Frédéric Pennerath </span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> *   Contributor :</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> *   This library is free software; you can redistribute it and/or</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> *   modify it under the terms of the GNU General Public</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *   License (GPL) as published by the Free Software Foundation; either</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> *   version 3 of the License, or any later version.</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> *   </span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *   This library is distributed in the hope that it will be useful,</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> *   but WITHOUT ANY WARRANTY; without even the implied warranty of</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> *   General Public License for more details.</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> *   </span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> *   You should have received a copy of the GNU General Public</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> *   License along with this library; if not, write to the Free Software</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> *   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="comment"> *   Contact : herve.frezza-buet@supelec.fr, frederic.pennerath@supelec.fr</span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;</div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &lt;algorithm&gt;</span></div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &lt;limits&gt;</span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &lt;map&gt;</span></div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;</div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="keyword">namespace </span>gaml {</div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;  <span class="keyword">template</span>&lt;<span class="keywordtype">bool</span> minimize = true&gt;</div>
<div class="line"><a name="l00035"></a><span class="lineno"><a class="code" href="a00114.html">   35</a></span>&#160;  <span class="keyword">class </span><a class="code" href="a00114.html">Search</a> {</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;  <span class="keyword">protected</span>:</div>
<div class="line"><a name="l00037"></a><span class="lineno"><a class="code" href="a00114.html#ac831b64fefa47c7ede3595f67ac335ad">   37</a></span>&#160;    <span class="keyword">typedef</span> std::set&lt;int&gt; <a class="code" href="a00114.html#ac831b64fefa47c7ede3595f67ac335ad">elts_set_type</a>;</div>
<div class="line"><a name="l00038"></a><span class="lineno"><a class="code" href="a00114.html#a6eba294ee7a75bd3d675b250848d979b">   38</a></span>&#160;    <span class="keyword">typedef</span> elts_set_type::iterator <a class="code" href="a00114.html#a6eba294ee7a75bd3d675b250848d979b">iterator</a>;</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;</div>
<div class="line"><a name="l00040"></a><span class="lineno"><a class="code" href="a00114.html#a0fcf9fc19866613c64850fe8f89b6061">   40</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="a00114.html#a0fcf9fc19866613c64850fe8f89b6061">verbose_</a>;</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;</div>
<div class="line"><a name="l00042"></a><span class="lineno"><a class="code" href="a00114.html#a02e4be9f1295117ba481fbf656b48ec4">   42</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="a00114.html#a02e4be9f1295117ba481fbf656b48ec4">setVerbose</a>(<span class="keywordtype">bool</span> verbose) {</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;      <a class="code" href="a00114.html#a0fcf9fc19866613c64850fe8f89b6061">verbose_</a> = verbose;</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    }</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;</div>
<div class="line"><a name="l00046"></a><span class="lineno"><a class="code" href="a00114.html#ae9013ac494cd7ae9b3f3cb735cc990bd">   46</a></span>&#160;    <span class="keywordtype">double</span> <a class="code" href="a00114.html#ae9013ac494cd7ae9b3f3cb735cc990bd">getWorstScore</a>()<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;      <span class="keywordflow">if</span> (minimize)</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;        <span class="keywordflow">return</span> std::numeric_limits&lt;double&gt;::max();</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;      <span class="keywordflow">else</span></div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;        <span class="keywordflow">return</span> std::numeric_limits&lt;double&gt;::min();</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    }</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;</div>
<div class="line"><a name="l00053"></a><span class="lineno"><a class="code" href="a00114.html#a95c398e1d1bfdb3728f6c4b06ae49251">   53</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="a00114.html#a95c398e1d1bfdb3728f6c4b06ae49251">firstScoreIsStrictlyBetter</a>(<span class="keywordtype">double</span> score1, <span class="keywordtype">double</span> score2)<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;      <span class="keywordflow">if</span> (minimize)</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;        <span class="keywordflow">return</span> score1 &lt; score2;</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;      <span class="keywordflow">else</span></div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;        <span class="keywordflow">return</span> score1 &gt; score2;</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    }</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;</div>
<div class="line"><a name="l00060"></a><span class="lineno"><a class="code" href="a00118.html">   60</a></span>&#160;    <span class="keyword">class </span><a class="code" href="a00118.html">Complement</a> {</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;      <span class="keywordtype">int</span> n_;</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;      <a class="code" href="a00114.html#ac831b64fefa47c7ede3595f67ac335ad">elts_set_type</a> set_;</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;      <span class="keyword">class </span>Iterator {</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;        elts_set_type::const_iterator it_;</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        elts_set_type::const_iterator end_;</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        <span class="keywordtype">int</span> i_;</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        <span class="keywordtype">void</span> skip() {</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;          <span class="keywordflow">while</span> (it_ != end_) {</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;            <span class="keywordtype">int</span> j = *it_;</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;            <span class="keywordflow">if</span> (j &lt;= i_) {</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;              <span class="keywordflow">if</span> (j == i_)</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;                ++i_;</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;              ++it_;</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;            } <span class="keywordflow">else</span></div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;              <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;          }</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;        }</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;      <span class="keyword">public</span>:</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;        Iterator(<span class="keyword">const</span> <a class="code" href="a00114.html#ac831b64fefa47c7ede3595f67ac335ad">elts_set_type</a>&amp; <span class="keyword">set</span>, <span class="keywordtype">int</span> i) :</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;          it_(<span class="keyword">set</span>.cbegin()), end_(<span class="keyword">set</span>.cend()), i_(i) {</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;          skip();</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;        }</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;        Iterator(<span class="keyword">const</span> Iterator&amp; other) :</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;          it_(other.it_), end_(other.end_), i_(other.i_) {</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;        }</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;        <span class="keywordtype">bool</span> operator!=(<span class="keyword">const</span> Iterator&amp; other) {</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;          <span class="keywordflow">return</span> i_ != other.i_;</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;        }</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;        <span class="keywordtype">int</span> operator*(<span class="keywordtype">void</span>) {</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;          <span class="keywordflow">return</span> i_;</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;        }</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;        Iterator&amp; operator++(<span class="keywordtype">void</span>) {</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;          ++i_;</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;          skip();</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;          <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;        }</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;      };</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    <span class="keyword">public</span>:</div>
<div class="line"><a name="l00103"></a><span class="lineno"><a class="code" href="a00118.html#a41cc7c6cbbb6c0d722cee45ec93db6a1">  103</a></span>&#160;      <span class="keyword">typedef</span> Iterator <a class="code" href="a00118.html#a41cc7c6cbbb6c0d722cee45ec93db6a1">iterator</a>;</div>
<div class="line"><a name="l00104"></a><span class="lineno"><a class="code" href="a00118.html#a7a6a13173563bb71628897f35b8bdb95">  104</a></span>&#160;      <a class="code" href="a00118.html#a7a6a13173563bb71628897f35b8bdb95">Complement</a>(<span class="keyword">const</span> <a class="code" href="a00114.html#ac831b64fefa47c7ede3595f67ac335ad">elts_set_type</a>&amp; <span class="keyword">set</span>, <span class="keywordtype">int</span> n) :</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;        n_(n), set_(set) {</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;      }</div>
<div class="line"><a name="l00107"></a><span class="lineno"><a class="code" href="a00118.html#a6a2bc83e7c2688b55ec790bb048c88cb">  107</a></span>&#160;      <a class="code" href="a00118.html#a7a6a13173563bb71628897f35b8bdb95">Complement</a>(<span class="keyword">const</span> <a class="code" href="a00118.html">Complement</a>&amp; other) :</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;        n_(other.n_), set_(other.set_) {</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;      }</div>
<div class="line"><a name="l00110"></a><span class="lineno"><a class="code" href="a00118.html#a43d4b882bdd477b270e6335a4a46d49a">  110</a></span>&#160;      Iterator <a class="code" href="a00118.html#a43d4b882bdd477b270e6335a4a46d49a">begin</a>() {</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;        <span class="keywordflow">return</span> Iterator(set_, 0);</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;      }</div>
<div class="line"><a name="l00113"></a><span class="lineno"><a class="code" href="a00118.html#a1f443d00b34021b9a33b271f27e3d120">  113</a></span>&#160;      Iterator <a class="code" href="a00118.html#a1f443d00b34021b9a33b271f27e3d120">end</a>() {</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;        <span class="keywordflow">return</span> Iterator(set_, n_);</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;      }</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    };</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;</div>
<div class="line"><a name="l00118"></a><span class="lineno"><a class="code" href="a00120.html">  118</a></span>&#160;    <span class="keyword">class </span><a class="code" href="a00120.html">ForwardPolicy</a> {</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;      <a class="code" href="a00118.html">Complement</a> attrs_;</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    <span class="keyword">public</span>:</div>
<div class="line"><a name="l00121"></a><span class="lineno"><a class="code" href="a00120.html#ac71841da5abe5dcd5581234c8afab742">  121</a></span>&#160;      <a class="code" href="a00120.html#ac71841da5abe5dcd5581234c8afab742">ForwardPolicy</a>(<a class="code" href="a00114.html#ac831b64fefa47c7ede3595f67ac335ad">elts_set_type</a>&amp; <span class="keyword">set</span>, <span class="keywordtype">int</span> n) :</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;        attrs_(set, n) {</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;      }</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;</div>
<div class="line"><a name="l00125"></a><span class="lineno"><a class="code" href="a00120.html#ab56bf9c3ef09805c7eb67ae657cff271">  125</a></span>&#160;      <span class="keyword">static</span> <span class="keywordtype">void</span> <a class="code" href="a00120.html#ab56bf9c3ef09805c7eb67ae657cff271">setInitAttributeSubset</a>(<a class="code" href="a00114.html#ac831b64fefa47c7ede3595f67ac335ad">elts_set_type</a>&amp; <span class="keyword">set</span>, <span class="keywordtype">int</span> n) {</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;        <span class="keyword">set</span>.clear();</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;      }</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;</div>
<div class="line"><a name="l00129"></a><span class="lineno"><a class="code" href="a00120.html#acc9ad9695cafef2130fabe55c0b875e1">  129</a></span>&#160;      <span class="keyword">typedef</span> <span class="keyword">typename</span> <a class="code" href="a00118.html#a41cc7c6cbbb6c0d722cee45ec93db6a1">Complement::iterator</a> <a class="code" href="a00120.html#acc9ad9695cafef2130fabe55c0b875e1">attribute_iterator</a>;</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;</div>
<div class="line"><a name="l00131"></a><span class="lineno"><a class="code" href="a00120.html#a67b69bb8aeb80970ebb567e74987a712">  131</a></span>&#160;      <a class="code" href="a00120.html#acc9ad9695cafef2130fabe55c0b875e1">attribute_iterator</a> <a class="code" href="a00120.html#a67b69bb8aeb80970ebb567e74987a712">attr_begin</a>() {</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;        <span class="keywordflow">return</span> attrs_.<a class="code" href="a00118.html#a43d4b882bdd477b270e6335a4a46d49a">begin</a>();</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;      }</div>
<div class="line"><a name="l00134"></a><span class="lineno"><a class="code" href="a00120.html#a9912cef6da095b766d6772a21f7a9190">  134</a></span>&#160;      <a class="code" href="a00120.html#acc9ad9695cafef2130fabe55c0b875e1">attribute_iterator</a> <a class="code" href="a00120.html#a9912cef6da095b766d6772a21f7a9190">attr_end</a>() {</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;        <span class="keywordflow">return</span> attrs_.<a class="code" href="a00118.html#a1f443d00b34021b9a33b271f27e3d120">end</a>();</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;      }</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;</div>
<div class="line"><a name="l00138"></a><span class="lineno"><a class="code" href="a00120.html#affd58a5ef1b46ecf35462e679b9f0514">  138</a></span>&#160;      <span class="keyword">static</span> <span class="keywordtype">void</span> <a class="code" href="a00120.html#affd58a5ef1b46ecf35462e679b9f0514">apply</a>(<a class="code" href="a00114.html#ac831b64fefa47c7ede3595f67ac335ad">elts_set_type</a>&amp; <span class="keyword">set</span>, <span class="keywordtype">int</span> attribute) {</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;        <span class="keyword">set</span>.insert(attribute);</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;      }</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;</div>
<div class="line"><a name="l00142"></a><span class="lineno"><a class="code" href="a00121.html">  142</a></span>&#160;      <span class="keyword">struct </span><a class="code" href="a00121.html">IteratorPolicy</a> {</div>
<div class="line"><a name="l00143"></a><span class="lineno"><a class="code" href="a00121.html#a48541f133fd8a27db398a442abaedb61">  143</a></span>&#160;        elts_set_type::iterator <a class="code" href="a00121.html#a48541f133fd8a27db398a442abaedb61">position_</a>;</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;</div>
<div class="line"><a name="l00145"></a><span class="lineno"><a class="code" href="a00121.html#a653e21995c68c540dbdef51f4fdc2b31">  145</a></span>&#160;        <a class="code" href="a00121.html#a653e21995c68c540dbdef51f4fdc2b31">IteratorPolicy</a>() :</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;          <a class="code" href="a00121.html#a48541f133fd8a27db398a442abaedb61">position_</a>() {</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;        }</div>
<div class="line"><a name="l00148"></a><span class="lineno"><a class="code" href="a00121.html#a2404ec23ffd157838bb7c3944cb76327">  148</a></span>&#160;        <a class="code" href="a00121.html#a653e21995c68c540dbdef51f4fdc2b31">IteratorPolicy</a>(<span class="keyword">const</span> <a class="code" href="a00121.html">IteratorPolicy</a>&amp; other) :</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;          <a class="code" href="a00121.html#a48541f133fd8a27db398a442abaedb61">position_</a>(other.<a class="code" href="a00121.html#a48541f133fd8a27db398a442abaedb61">position_</a>) {</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;        }</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;</div>
<div class="line"><a name="l00152"></a><span class="lineno"><a class="code" href="a00121.html#a770a7ce313bf6b3d3afb8417c467faa8">  152</a></span>&#160;        <span class="keywordtype">void</span> <a class="code" href="a00121.html#a770a7ce313bf6b3d3afb8417c467faa8">doit</a>(<a class="code" href="a00114.html#ac831b64fefa47c7ede3595f67ac335ad">elts_set_type</a>&amp; <span class="keyword">set</span>, <a class="code" href="a00120.html#acc9ad9695cafef2130fabe55c0b875e1">attribute_iterator</a>&amp; attrIt) {</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;          std::pair&lt;elts_set_type::iterator, bool&gt; res = <span class="keyword">set</span>.insert(</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;                                                                    *attrIt);</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;          <a class="code" href="a00121.html#a48541f133fd8a27db398a442abaedb61">position_</a> = res.first;</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;        }</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;</div>
<div class="line"><a name="l00158"></a><span class="lineno"><a class="code" href="a00121.html#a1cc6b44aed4ff6b7339ca7d3a9cd12d3">  158</a></span>&#160;        <span class="keywordtype">void</span> <a class="code" href="a00121.html#a1cc6b44aed4ff6b7339ca7d3a9cd12d3">undoit</a>(<a class="code" href="a00114.html#ac831b64fefa47c7ede3595f67ac335ad">elts_set_type</a>&amp; <span class="keyword">set</span>) {</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;          <span class="keyword">set</span>.erase(<a class="code" href="a00121.html#a48541f133fd8a27db398a442abaedb61">position_</a>);</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;        }</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;</div>
<div class="line"><a name="l00162"></a><span class="lineno"><a class="code" href="a00121.html#af9d842bc8aa76771a1d60062e994807e">  162</a></span>&#160;        <span class="keywordtype">int</span> <a class="code" href="a00121.html#af9d842bc8aa76771a1d60062e994807e">attribute</a>() {</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;          <span class="keywordflow">return</span> *<a class="code" href="a00121.html#a48541f133fd8a27db398a442abaedb61">position_</a>;</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;        }</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;      };</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    };</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;</div>
<div class="line"><a name="l00168"></a><span class="lineno"><a class="code" href="a00116.html">  168</a></span>&#160;    <span class="keyword">class </span><a class="code" href="a00116.html">BackwardPolicy</a> {</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;      <a class="code" href="a00114.html#ac831b64fefa47c7ede3595f67ac335ad">elts_set_type</a>&amp; set_;</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    <span class="keyword">public</span>:</div>
<div class="line"><a name="l00172"></a><span class="lineno"><a class="code" href="a00116.html#a46af7bbc7a3300cfdd9886ef7e696a6d">  172</a></span>&#160;      <a class="code" href="a00116.html#a46af7bbc7a3300cfdd9886ef7e696a6d">BackwardPolicy</a>(<a class="code" href="a00114.html#ac831b64fefa47c7ede3595f67ac335ad">elts_set_type</a>&amp; <span class="keyword">set</span>, <span class="keywordtype">int</span> n) :</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;        set_(set) {</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;      }</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;</div>
<div class="line"><a name="l00176"></a><span class="lineno"><a class="code" href="a00116.html#aeb52a0485f468990712ac56afe5cec65">  176</a></span>&#160;      <span class="keyword">static</span> <span class="keywordtype">void</span> <a class="code" href="a00116.html#aeb52a0485f468990712ac56afe5cec65">setInitAttributeSubset</a>(<a class="code" href="a00114.html#ac831b64fefa47c7ede3595f67ac335ad">elts_set_type</a>&amp; <span class="keyword">set</span>, <span class="keywordtype">int</span> n) {</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;        <span class="keyword">set</span>.clear();</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i != n; ++i)</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;          <span class="keyword">set</span>.insert(i);</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;      }</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;</div>
<div class="line"><a name="l00182"></a><span class="lineno"><a class="code" href="a00116.html#a8c83632a0dda1f5be0e115731c8bb923">  182</a></span>&#160;      <span class="keyword">typedef</span> <span class="keyword">typename</span> elts_set_type::iterator <a class="code" href="a00116.html#a8c83632a0dda1f5be0e115731c8bb923">attribute_iterator</a>;</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;</div>
<div class="line"><a name="l00184"></a><span class="lineno"><a class="code" href="a00116.html#afdb83fece64ee4c893e5d95fd0adc49b">  184</a></span>&#160;      <a class="code" href="a00116.html#a8c83632a0dda1f5be0e115731c8bb923">attribute_iterator</a> <a class="code" href="a00116.html#afdb83fece64ee4c893e5d95fd0adc49b">attr_begin</a>() {</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;        <span class="keywordflow">return</span> set_.begin();</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;      }</div>
<div class="line"><a name="l00187"></a><span class="lineno"><a class="code" href="a00116.html#a8068c926a97d479f006a3b85d64e4303">  187</a></span>&#160;      <a class="code" href="a00116.html#a8c83632a0dda1f5be0e115731c8bb923">attribute_iterator</a> <a class="code" href="a00116.html#a8068c926a97d479f006a3b85d64e4303">attr_end</a>() {</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;        <span class="keywordflow">return</span> set_.end();</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;      }</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;</div>
<div class="line"><a name="l00191"></a><span class="lineno"><a class="code" href="a00116.html#ad1e8aa525ab2dbeedc103e1c17a088f9">  191</a></span>&#160;      <span class="keyword">static</span> <span class="keywordtype">void</span> <a class="code" href="a00116.html#ad1e8aa525ab2dbeedc103e1c17a088f9">apply</a>(<a class="code" href="a00114.html#ac831b64fefa47c7ede3595f67ac335ad">elts_set_type</a>&amp; <span class="keyword">set</span>, <span class="keywordtype">int</span> attribute) {</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;        <span class="keyword">set</span>.erase(attribute);</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;      }</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;</div>
<div class="line"><a name="l00195"></a><span class="lineno"><a class="code" href="a00117.html">  195</a></span>&#160;      <span class="keyword">struct </span><a class="code" href="a00117.html">IteratorPolicy</a> {</div>
<div class="line"><a name="l00196"></a><span class="lineno"><a class="code" href="a00117.html#ad0d1e5888b13b48498406f34d421cf10">  196</a></span>&#160;        <a class="code" href="a00116.html#a8c83632a0dda1f5be0e115731c8bb923">attribute_iterator</a>* <a class="code" href="a00117.html#ad0d1e5888b13b48498406f34d421cf10">attrIt_</a>;</div>
<div class="line"><a name="l00197"></a><span class="lineno"><a class="code" href="a00117.html#a738905e67617bf2fd0db2a0e6ecb1c11">  197</a></span>&#160;        <span class="keywordtype">int</span> <a class="code" href="a00117.html#a738905e67617bf2fd0db2a0e6ecb1c11">attribute_</a>;</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;</div>
<div class="line"><a name="l00199"></a><span class="lineno"><a class="code" href="a00117.html#ae6213e161338e98649d86569925e9e73">  199</a></span>&#160;        <a class="code" href="a00117.html#ae6213e161338e98649d86569925e9e73">IteratorPolicy</a>() :</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;          <a class="code" href="a00117.html#ad0d1e5888b13b48498406f34d421cf10">attrIt_</a>(), <a class="code" href="a00117.html#a738905e67617bf2fd0db2a0e6ecb1c11">attribute_</a>() {</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;        }</div>
<div class="line"><a name="l00202"></a><span class="lineno"><a class="code" href="a00117.html#a60b54bc41841645d00cae1e17f938f7d">  202</a></span>&#160;        <a class="code" href="a00117.html#ae6213e161338e98649d86569925e9e73">IteratorPolicy</a>(<span class="keyword">const</span> <a class="code" href="a00117.html">IteratorPolicy</a>&amp; other) :</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;          <a class="code" href="a00117.html#ad0d1e5888b13b48498406f34d421cf10">attrIt_</a>(other.<a class="code" href="a00117.html#ad0d1e5888b13b48498406f34d421cf10">attrIt_</a>), <a class="code" href="a00117.html#a738905e67617bf2fd0db2a0e6ecb1c11">attribute_</a>(other.<a class="code" href="a00117.html#a738905e67617bf2fd0db2a0e6ecb1c11">attribute_</a>) {</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;        }</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;</div>
<div class="line"><a name="l00206"></a><span class="lineno"><a class="code" href="a00117.html#a3b082801d2fa31edc03252b6b5e51690">  206</a></span>&#160;        <span class="keywordtype">void</span> <a class="code" href="a00117.html#a3b082801d2fa31edc03252b6b5e51690">doit</a>(<a class="code" href="a00114.html#ac831b64fefa47c7ede3595f67ac335ad">elts_set_type</a>&amp; <span class="keyword">set</span>, <a class="code" href="a00116.html#a8c83632a0dda1f5be0e115731c8bb923">attribute_iterator</a>&amp; attrIt) {</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;          <a class="code" href="a00117.html#ad0d1e5888b13b48498406f34d421cf10">attrIt_</a> = &amp;attrIt;</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;          <a class="code" href="a00117.html#a738905e67617bf2fd0db2a0e6ecb1c11">attribute_</a> = *attrIt;</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;          <a class="code" href="a00116.html#a8c83632a0dda1f5be0e115731c8bb923">attribute_iterator</a> it = attrIt;</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;          ++attrIt;</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;          <span class="keyword">set</span>.erase(it);</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;        }</div>
<div class="line"><a name="l00213"></a><span class="lineno"><a class="code" href="a00117.html#a801a4209a6615d24ef2dd28aed7379d9">  213</a></span>&#160;        <span class="keywordtype">void</span> <a class="code" href="a00117.html#a801a4209a6615d24ef2dd28aed7379d9">undoit</a>(<a class="code" href="a00114.html#ac831b64fefa47c7ede3595f67ac335ad">elts_set_type</a>&amp; <span class="keyword">set</span>) {</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;          <span class="keyword">set</span>.insert(<a class="code" href="a00117.html#a738905e67617bf2fd0db2a0e6ecb1c11">attribute_</a>);</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;          --(*attrIt_);</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;        }</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;</div>
<div class="line"><a name="l00218"></a><span class="lineno"><a class="code" href="a00117.html#a73c90d690eb3e0acdd7609bf9b55451f">  218</a></span>&#160;        <span class="keywordtype">int</span> <a class="code" href="a00117.html#a73c90d690eb3e0acdd7609bf9b55451f">attribute</a>() {</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;          <span class="keywordflow">return</span> <a class="code" href="a00117.html#a738905e67617bf2fd0db2a0e6ecb1c11">attribute_</a>;</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;        }</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;      };</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    };</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> Policy&gt;</div>
<div class="line"><a name="l00225"></a><span class="lineno"><a class="code" href="a00122.html">  225</a></span>&#160;    <span class="keyword">class </span><a class="code" href="a00122.html">SuccessorGenerator</a>: <span class="keyword">public</span> Policy {</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    <span class="keyword">protected</span>:</div>
<div class="line"><a name="l00227"></a><span class="lineno"><a class="code" href="a00122.html#af24fcba3aae563b7c7f2168b1706fe38">  227</a></span>&#160;      <a class="code" href="a00114.html#ac831b64fefa47c7ede3595f67ac335ad">elts_set_type</a>&amp; <a class="code" href="a00122.html#af24fcba3aae563b7c7f2168b1706fe38">set_</a>;</div>
<div class="line"><a name="l00228"></a><span class="lineno"><a class="code" href="a00122.html#ab0f332e7d04e3ac1a0e4ae7095fc953f">  228</a></span>&#160;      <span class="keywordtype">int</span> <a class="code" href="a00122.html#ab0f332e7d04e3ac1a0e4ae7095fc953f">n_</a>;</div>
<div class="line"><a name="l00229"></a><span class="lineno"><a class="code" href="a00122.html#a5fb6c3daa1a59e2f5f22d1c57e69a8f6">  229</a></span>&#160;      <span class="keyword">typedef</span> <span class="keyword">typename</span> Policy::IteratorPolicy <a class="code" href="a00122.html#a5fb6c3daa1a59e2f5f22d1c57e69a8f6">iterator_policy</a>;</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;</div>
<div class="line"><a name="l00231"></a><span class="lineno"><a class="code" href="a00123.html">  231</a></span>&#160;      <span class="keyword">class </span><a class="code" href="a00123.html">Iterator</a>: <span class="keyword">public</span> <a class="code" href="a00122.html#a5fb6c3daa1a59e2f5f22d1c57e69a8f6">iterator_policy</a> {</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;        <span class="keyword">typedef</span> <span class="keyword">typename</span> Policy::attribute_iterator attribute_iterator;</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;        <a class="code" href="a00114.html#ac831b64fefa47c7ede3595f67ac335ad">elts_set_type</a>&amp; set_;</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;        attribute_iterator it_;</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;        <span class="keywordtype">bool</span> done_;</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;        <span class="keywordtype">void</span> doit() {</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;          <span class="keywordflow">if</span> (done_)</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;            <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;          iterator_policy::doit(set_, it_);</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;          done_ = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;        }</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;        <span class="keywordtype">void</span> undoit() {</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;          <span class="keywordflow">if</span> (!done_)</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;            <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;          iterator_policy::undoit(set_);</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;          done_ = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;        }</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;      <span class="keyword">public</span>:</div>
<div class="line"><a name="l00252"></a><span class="lineno"><a class="code" href="a00123.html#aea48e76ca43a2190ff252e2ddbf7dc53">  252</a></span>&#160;        <a class="code" href="a00123.html#aea48e76ca43a2190ff252e2ddbf7dc53">Iterator</a>(<a class="code" href="a00114.html#ac831b64fefa47c7ede3595f67ac335ad">elts_set_type</a>&amp; <span class="keyword">set</span>, <span class="keyword">const</span> attribute_iterator&amp; it) :</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;          <a class="code" href="a00122.html#a5fb6c3daa1a59e2f5f22d1c57e69a8f6">iterator_policy</a>(), set_(set), it_(it), done_(false) {</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;        }</div>
<div class="line"><a name="l00255"></a><span class="lineno"><a class="code" href="a00123.html#a83e2e02d3499211c78ba588e723783d9">  255</a></span>&#160;        <a class="code" href="a00123.html#aea48e76ca43a2190ff252e2ddbf7dc53">Iterator</a>(<span class="keyword">const</span> <a class="code" href="a00123.html">Iterator</a>&amp; other) :</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;          <a class="code" href="a00122.html#a5fb6c3daa1a59e2f5f22d1c57e69a8f6">iterator_policy</a>(other), set_(other.set_), it_(other.it_), done_(</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;                                                                          other.done_) {</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;        }</div>
<div class="line"><a name="l00259"></a><span class="lineno"><a class="code" href="a00123.html#aefd27d7bd09829bd1bf214422813ffef">  259</a></span>&#160;        <a class="code" href="a00123.html#aefd27d7bd09829bd1bf214422813ffef">~Iterator</a>() {</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;          undoit();</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;        }</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;</div>
<div class="line"><a name="l00263"></a><span class="lineno"><a class="code" href="a00123.html#a3031f6bf79101eba1fc317adb684fba3">  263</a></span>&#160;        <span class="keywordtype">bool</span> <a class="code" href="a00123.html#a3031f6bf79101eba1fc317adb684fba3">operator!=</a>(<span class="keyword">const</span> <a class="code" href="a00123.html">Iterator</a>&amp; other) {</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;          <span class="keywordflow">return</span> it_ != other.it_;</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;        }</div>
<div class="line"><a name="l00266"></a><span class="lineno"><a class="code" href="a00123.html#aef95cdb0a0620fcfac0a314fdb6529ec">  266</a></span>&#160;        <a class="code" href="a00123.html">Iterator</a>&amp; <a class="code" href="a00123.html#aef95cdb0a0620fcfac0a314fdb6529ec">operator++</a>(<span class="keywordtype">void</span>) {</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;          undoit();</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;          ++it_;</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;          <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;        }</div>
<div class="line"><a name="l00271"></a><span class="lineno"><a class="code" href="a00123.html#af4ce13db7683254165c7a9d87ef1f6fb">  271</a></span>&#160;        <a class="code" href="a00114.html#ac831b64fefa47c7ede3595f67ac335ad">elts_set_type</a>&amp; <a class="code" href="a00123.html#af4ce13db7683254165c7a9d87ef1f6fb">operator*</a>() {</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;          doit();</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;          <span class="keywordflow">return</span> set_;</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;        }</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;      };</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;    <span class="keyword">public</span>:</div>
<div class="line"><a name="l00278"></a><span class="lineno"><a class="code" href="a00122.html#a488341231f8c1baff2fc062a0729f5c1">  278</a></span>&#160;      <span class="keyword">typedef</span> Iterator <a class="code" href="a00122.html#a488341231f8c1baff2fc062a0729f5c1">iterator</a>;</div>
<div class="line"><a name="l00279"></a><span class="lineno"><a class="code" href="a00122.html#acefc9df817610f940bf84d43cc386ae9">  279</a></span>&#160;      <a class="code" href="a00122.html#acefc9df817610f940bf84d43cc386ae9">SuccessorGenerator</a>(<a class="code" href="a00114.html#ac831b64fefa47c7ede3595f67ac335ad">elts_set_type</a>&amp; <span class="keyword">set</span>, <span class="keywordtype">int</span> n) :</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;        Policy(set, n), <a class="code" href="a00122.html#af24fcba3aae563b7c7f2168b1706fe38">set_</a>(set), <a class="code" href="a00122.html#ab0f332e7d04e3ac1a0e4ae7095fc953f">n_</a>(n) {</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;      }</div>
<div class="line"><a name="l00282"></a><span class="lineno"><a class="code" href="a00122.html#a01183b9f6f8e59fb1b4a6e3cf6eb7165">  282</a></span>&#160;      Iterator <a class="code" href="a00122.html#a01183b9f6f8e59fb1b4a6e3cf6eb7165">begin</a>() {</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;        <span class="keywordflow">return</span> Iterator(<a class="code" href="a00122.html#af24fcba3aae563b7c7f2168b1706fe38">set_</a>, Policy::attr_begin());</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;      }</div>
<div class="line"><a name="l00285"></a><span class="lineno"><a class="code" href="a00122.html#aa806c74729b7542bfc8c14458045c202">  285</a></span>&#160;      Iterator <a class="code" href="a00122.html#aa806c74729b7542bfc8c14458045c202">end</a>() {</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;        <span class="keywordflow">return</span> Iterator(<a class="code" href="a00122.html#af24fcba3aae563b7c7f2168b1706fe38">set_</a>, Policy::attr_end());</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;      }</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;    };</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;</div>
<div class="line"><a name="l00290"></a><span class="lineno"><a class="code" href="a00119.html">  290</a></span>&#160;    <span class="keyword">struct </span><a class="code" href="a00119.html">ForwardGenerator</a>: <span class="keyword">public</span> <a class="code" href="a00122.html">SuccessorGenerator</a>&lt;ForwardPolicy&gt; {</div>
<div class="line"><a name="l00291"></a><span class="lineno"><a class="code" href="a00119.html#a6cd3204fd4f0cdc980f3250de6b1c75d">  291</a></span>&#160;      <a class="code" href="a00119.html#a6cd3204fd4f0cdc980f3250de6b1c75d">ForwardGenerator</a>(<a class="code" href="a00114.html#ac831b64fefa47c7ede3595f67ac335ad">elts_set_type</a>&amp; <span class="keyword">set</span>, <span class="keywordtype">int</span> n) :</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;        <a class="code" href="a00122.html">SuccessorGenerator</a>&lt;<a class="code" href="a00120.html">ForwardPolicy</a>&gt;(set, n) {</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;      }</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;    };</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;</div>
<div class="line"><a name="l00296"></a><span class="lineno"><a class="code" href="a00115.html">  296</a></span>&#160;    <span class="keyword">struct </span><a class="code" href="a00115.html">BackwardGenerator</a>: <span class="keyword">public</span> <a class="code" href="a00122.html">SuccessorGenerator</a>&lt;BackwardPolicy&gt; {</div>
<div class="line"><a name="l00297"></a><span class="lineno"><a class="code" href="a00115.html#a588f0d345aa2a73bf3f799a1a6ab62dc">  297</a></span>&#160;      <a class="code" href="a00115.html#a588f0d345aa2a73bf3f799a1a6ab62dc">BackwardGenerator</a>(<a class="code" href="a00114.html#ac831b64fefa47c7ede3595f67ac335ad">elts_set_type</a>&amp; <span class="keyword">set</span>, <span class="keywordtype">int</span> n) :</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;        <a class="code" href="a00122.html">SuccessorGenerator</a>&lt;<a class="code" href="a00116.html">BackwardPolicy</a>&gt;(set, n) {</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;      }</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;    };</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;</div>
<div class="line"><a name="l00302"></a><span class="lineno"><a class="code" href="a00114.html#add7c5d46904527cde36c1aca18ee6a73">  302</a></span>&#160;    <a class="code" href="a00114.html#add7c5d46904527cde36c1aca18ee6a73">Search</a>() :</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;      <a class="code" href="a00114.html#a0fcf9fc19866613c64850fe8f89b6061">verbose_</a>(false) {</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;    }</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;  };</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;  <span class="keyword">template</span>&lt;<span class="keywordtype">bool</span> forward = true, <span class="keywordtype">bool</span> minimize = true&gt;</div>
<div class="line"><a name="l00308"></a><span class="lineno"><a class="code" href="a00059.html">  308</a></span>&#160;  <span class="keyword">class </span><a class="code" href="a00059.html">GreedySearch</a>: <span class="keyword">public</span> <a class="code" href="a00114.html">Search</a>&lt;minimize&gt; {</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;    <span class="keyword">typedef</span> <a class="code" href="a00114.html">Search&lt;minimize&gt;</a> <a class="code" href="a00114.html">parent_type</a>;</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;    <span class="keyword">typedef</span> <span class="keyword">typename</span> <a class="code" href="a00114.html#ac831b64fefa47c7ede3595f67ac335ad">parent_type::elts_set_type</a> <a class="code" href="a00114.html#ac831b64fefa47c7ede3595f67ac335ad">elts_set_type</a>;</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> _SolutionOutputIterator, <span class="keyword">typename</span> _Evaluator,</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;             <span class="keyword">typename</span> _Generator&gt;</div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;    <span class="keywordtype">double</span> search(<span class="keywordtype">int</span> n, _SolutionOutputIterator&amp; outputIt,</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;                  _Evaluator&amp; evaluator)<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;      <a class="code" href="a00114.html#ac831b64fefa47c7ede3595f67ac335ad">elts_set_type</a> elts;</div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;      _Generator::setInitAttributeSubset(elts, n);</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;      <span class="keywordtype">double</span> bestScore = evaluator(elts.cbegin(), elts.cend());</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;      <span class="keywordflow">while</span> (<span class="keyword">true</span>) {</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;        <span class="keywordtype">double</span> newBestScore = <a class="code" href="a00114.html#ae9013ac494cd7ae9b3f3cb735cc990bd">parent_type::getWorstScore</a>();</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;        <span class="keywordtype">int</span> bestElt;</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;        _Generator generator(elts, n);</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">auto</span> it = generator.begin(); it != generator.end(); ++it) {</div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;          <a class="code" href="a00114.html#ac831b64fefa47c7ede3595f67ac335ad">elts_set_type</a>&amp; elts = *it;</div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;          <span class="keywordtype">double</span> score = evaluator(elts.cbegin(), elts.cend());</div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;          <span class="keywordtype">bool</span> update = <a class="code" href="a00114.html#a95c398e1d1bfdb3728f6c4b06ae49251">parent_type::firstScoreIsStrictlyBetter</a>(score,</div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;                                                                newBestScore);</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;          <span class="keywordflow">if</span> (update) {</div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;            newBestScore = score;</div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;            bestElt = it.attribute();</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;          }</div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;          <span class="keywordflow">if</span> (<a class="code" href="a00114.html#a0fcf9fc19866613c64850fe8f89b6061">parent_type::verbose_</a>) {</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;            std::for_each(elts.cbegin(), elts.cend(),</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;                          [](<span class="keywordtype">int</span> elt) -&gt; <span class="keywordtype">void</span> {std::cout &lt;&lt; elt &lt;&lt; <span class="charliteral">&#39; &#39;</span>;});</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;            std::cout &lt;&lt; <span class="stringliteral">&quot;= &quot;</span> &lt;&lt; score;</div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;            <span class="keywordflow">if</span> (update)</div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;              std::cout &lt;&lt; <span class="stringliteral">&quot; (new optimum)&quot;</span>;</div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;            std::cout &lt;&lt; std::endl;</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;          }</div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;        }</div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;</div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;        <span class="keywordflow">if</span> (<a class="code" href="a00114.html#a95c398e1d1bfdb3728f6c4b06ae49251">parent_type::firstScoreIsStrictlyBetter</a>(newBestScore,</div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;                                                    bestScore)) {</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;          bestScore = newBestScore;</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;          elts.insert(bestElt);</div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;        } <span class="keywordflow">else</span></div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;          <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;      }</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;</div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;      <span class="keywordflow">for</span> (<span class="keyword">auto</span> it = elts.begin(); it != elts.end(); ++it)</div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;        *outputIt++ = *it;</div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;      <span class="keywordflow">return</span> bestScore;</div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;    }</div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;</div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;    <span class="keyword">template</span>&lt;<span class="keywordtype">bool</span> direction, <span class="keyword">typename</span> _SolutionOutputIterator,</div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;             <span class="keyword">typename</span> _Evaluator&gt;</div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;    <span class="keyword">struct </span>SearchFunctor {</div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;      <span class="keywordtype">double</span> <a class="code" href="a00059.html#ad0b11222bfca83c829731e4ff38705ed">operator()</a>(<span class="keyword">const</span> <a class="code" href="a00059.html">GreedySearch</a>&amp; algo, <span class="keywordtype">int</span> n,</div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;                        _SolutionOutputIterator&amp; outputIt,</div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;                        _Evaluator&amp; evaluator)<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;        <span class="keywordflow">return</span> algo.search&lt;_SolutionOutputIterator, _Evaluator,</div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;                           <span class="keyword">typename</span> <a class="code" href="a00119.html">parent_type::ForwardGenerator</a>&gt;(n, outputIt,</div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;                                                                   evaluator);</div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;      }</div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;    };</div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;</div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> _SolutionOutputIterator, <span class="keyword">typename</span> _Evaluator&gt;</div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;    <span class="keyword">struct </span>SearchFunctor&lt;false, _SolutionOutputIterator, _Evaluator&gt; {</div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;      <span class="keywordtype">double</span> <a class="code" href="a00059.html#ad0b11222bfca83c829731e4ff38705ed">operator()</a>(<span class="keyword">const</span> <a class="code" href="a00059.html">GreedySearch</a>&amp; algo, <span class="keywordtype">int</span> n,</div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;                        _SolutionOutputIterator&amp; outputIt,</div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;                        _Evaluator&amp; evaluator)<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;        <span class="keywordflow">return</span> algo.search&lt;_SolutionOutputIterator, _Evaluator,</div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;                           <span class="keyword">typename</span> <a class="code" href="a00115.html">parent_type::BackwardGenerator</a>&gt;(n, outputIt,</div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;                                                                    evaluator);</div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;      }</div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;    };</div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;</div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;  <span class="keyword">public</span>:</div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;</div>
<div class="line"><a name="l00381"></a><span class="lineno"><a class="code" href="a00059.html#a809b78e8a36c5d36416737f144655bfa">  381</a></span>&#160;    <a class="code" href="a00059.html#a809b78e8a36c5d36416737f144655bfa">GreedySearch</a>() :</div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;      <a class="code" href="a00114.html">Search</a>&lt;minimize&gt;() {</div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;    }</div>
<div class="line"><a name="l00384"></a><span class="lineno"><a class="code" href="a00059.html#a7ce3d2d9069911e077a663be26053c99">  384</a></span>&#160;    <a class="code" href="a00059.html">GreedySearch</a>&amp; <a class="code" href="a00059.html#a7ce3d2d9069911e077a663be26053c99">verbose</a>(<span class="keywordtype">bool</span> <a class="code" href="a00059.html#a7ce3d2d9069911e077a663be26053c99">verbose</a> = <span class="keyword">true</span>) {</div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;      <a class="code" href="a00114.html#a02e4be9f1295117ba481fbf656b48ec4">parent_type::setVerbose</a>(<a class="code" href="a00059.html#a7ce3d2d9069911e077a663be26053c99">verbose</a>);</div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;      <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;    }</div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;</div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> _SolutionOutputIterator, <span class="keyword">typename</span> _Evaluator&gt;</div>
<div class="line"><a name="l00390"></a><span class="lineno"><a class="code" href="a00059.html#ad0b11222bfca83c829731e4ff38705ed">  390</a></span>&#160;    <span class="keywordtype">double</span> <a class="code" href="a00059.html#ad0b11222bfca83c829731e4ff38705ed">operator()</a>(<span class="keywordtype">int</span> n, _SolutionOutputIterator&amp; outputIt,</div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;                      _Evaluator&amp; evaluator)<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;      SearchFunctor&lt;forward, _SolutionOutputIterator, _Evaluator&gt; func;</div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;      <span class="keywordflow">return</span> func(*<span class="keyword">this</span>, n, outputIt, evaluator);</div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;    }</div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;  };</div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;</div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;  <span class="keyword">template</span>&lt;<span class="keywordtype">bool</span> forward = true, <span class="keywordtype">bool</span> minimize = true&gt;</div>
<div class="line"><a name="l00398"></a><span class="lineno"><a class="code" href="a00030.html">  398</a></span>&#160;  <span class="keyword">class </span><a class="code" href="a00030.html">BidirectionalGreedySearch</a>: <span class="keyword">public</span> <a class="code" href="a00114.html">Search</a>&lt;minimize&gt; {</div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;    <span class="keyword">typedef</span> <a class="code" href="a00114.html">Search&lt;minimize&gt;</a> <a class="code" href="a00114.html">parent_type</a>;</div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;    <span class="keyword">typedef</span> <span class="keyword">typename</span> <a class="code" href="a00114.html#ac831b64fefa47c7ede3595f67ac335ad">parent_type::elts_set_type</a> <a class="code" href="a00114.html#ac831b64fefa47c7ede3595f67ac335ad">elts_set_type</a>;</div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;</div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> _Generator, <span class="keyword">typename</span> _Evaluator&gt; std::pair&lt;double, int&gt; generate(</div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;                                                                                       _Generator&amp; generator, _Evaluator&amp; evaluator)<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;      <span class="keywordtype">double</span> newBestScore = <a class="code" href="a00114.html#ae9013ac494cd7ae9b3f3cb735cc990bd">parent_type::getWorstScore</a>();</div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;      <span class="keywordtype">int</span> bestElt = 0;</div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;</div>
<div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;      <span class="keywordflow">for</span> (<span class="keyword">auto</span> it = generator.begin(); it != generator.end(); ++it) {</div>
<div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;        <a class="code" href="a00114.html#ac831b64fefa47c7ede3595f67ac335ad">elts_set_type</a>&amp; elts = *it;</div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;        <span class="keywordtype">double</span> score = evaluator(elts.cbegin(), elts.cend());</div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;        <span class="keywordtype">bool</span> update = <a class="code" href="a00114.html#a95c398e1d1bfdb3728f6c4b06ae49251">parent_type::firstScoreIsStrictlyBetter</a>(score,</div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;                                                              newBestScore);</div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;        <span class="keywordflow">if</span> (update) {</div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;          newBestScore = score;</div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;          bestElt = it.attribute();</div>
<div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;        }</div>
<div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;        <span class="keywordflow">if</span> (<a class="code" href="a00114.html#a0fcf9fc19866613c64850fe8f89b6061">parent_type::verbose_</a>) {</div>
<div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;          std::for_each(elts.cbegin(), elts.cend(),</div>
<div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;                        [](<span class="keywordtype">int</span> elt) -&gt; <span class="keywordtype">void</span> {std::cout &lt;&lt; elt &lt;&lt; <span class="charliteral">&#39; &#39;</span>;});</div>
<div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;          std::cout &lt;&lt; <span class="stringliteral">&quot;= &quot;</span> &lt;&lt; score;</div>
<div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;          <span class="keywordflow">if</span> (update)</div>
<div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;            std::cout &lt;&lt; <span class="stringliteral">&quot; (new optimum)&quot;</span>;</div>
<div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;          std::cout &lt;&lt; std::endl;</div>
<div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;        }</div>
<div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;      }</div>
<div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;      <span class="keywordflow">return</span> std::pair&lt;double, int&gt;(newBestScore, bestElt);</div>
<div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;    }</div>
<div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;</div>
<div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> _SolutionOutputIterator, <span class="keyword">typename</span> _Evaluator,</div>
<div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;             <span class="keyword">typename</span> _FirstGenerator, <span class="keyword">typename</span> _SecondGenerator&gt;</div>
<div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;    <span class="keywordtype">double</span> search(<span class="keywordtype">int</span> n, _SolutionOutputIterator&amp; outputIt,</div>
<div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;                  _Evaluator&amp; evaluator)<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;      <a class="code" href="a00114.html#ac831b64fefa47c7ede3595f67ac335ad">elts_set_type</a> bestSubset;</div>
<div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;      _FirstGenerator::setInitAttributeSubset(bestSubset, n);</div>
<div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;      <span class="keywordtype">bool</span> firstGenerator = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;      <span class="keywordtype">int</span> nScoreIncrease = 0;</div>
<div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;      <span class="keywordtype">double</span> bestScore = evaluator(bestSubset.cbegin(), bestSubset.cend());</div>
<div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;      <span class="keywordflow">while</span> (<span class="keyword">true</span>) {</div>
<div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;        std::pair&lt;double, int&gt; best;</div>
<div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;        <span class="keywordflow">if</span> (firstGenerator) {</div>
<div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;          _FirstGenerator generator(bestSubset, n);</div>
<div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;          best = generate(generator, evaluator);</div>
<div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;        } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;          _SecondGenerator generator(bestSubset, n);</div>
<div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;          best = generate(generator, evaluator);</div>
<div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;        }</div>
<div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;</div>
<div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;        <span class="keywordflow">if</span> (<a class="code" href="a00114.html#a95c398e1d1bfdb3728f6c4b06ae49251">parent_type::firstScoreIsStrictlyBetter</a>(best.first,</div>
<div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;                                                    bestScore)) {</div>
<div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;          ++nScoreIncrease;</div>
<div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;          bestScore = best.first;</div>
<div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;          <span class="keywordflow">if</span> (firstGenerator)</div>
<div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;            _FirstGenerator::apply(bestSubset, best.second);</div>
<div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;          <span class="keywordflow">else</span></div>
<div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;            _SecondGenerator::apply(bestSubset, best.second);</div>
<div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;        } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;          <span class="keywordflow">if</span> (nScoreIncrease == 0)</div>
<div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;          <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;            nScoreIncrease = 0;</div>
<div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;            firstGenerator = !firstGenerator;</div>
<div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;          }</div>
<div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;        }</div>
<div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;      }</div>
<div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;</div>
<div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;      <span class="keywordflow">for</span> (<span class="keyword">auto</span> it = bestSubset.begin(); it != bestSubset.end(); ++it)</div>
<div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;        *outputIt++ = *it;</div>
<div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;      <span class="keywordflow">return</span> bestScore;</div>
<div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;    }</div>
<div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;</div>
<div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;    <span class="keyword">template</span>&lt;<span class="keywordtype">bool</span> direction, <span class="keyword">typename</span> _SolutionOutputIterator,</div>
<div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;             <span class="keyword">typename</span> _Evaluator&gt;</div>
<div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;    <span class="keyword">struct </span>SearchFunctor {</div>
<div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;      <span class="keywordtype">double</span> <a class="code" href="a00030.html#a54978870dd4a6a9e14601795d4e7dbce">operator()</a>(<span class="keyword">const</span> <a class="code" href="a00030.html">BidirectionalGreedySearch</a>&amp; algo, <span class="keywordtype">int</span> n,</div>
<div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;                        _SolutionOutputIterator&amp; outputIt,</div>
<div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;                        _Evaluator&amp; evaluator)<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;        <span class="keywordflow">return</span> algo.search&lt;_SolutionOutputIterator, _Evaluator,</div>
<div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;                           <span class="keyword">typename</span> <a class="code" href="a00119.html">parent_type::ForwardGenerator</a>,</div>
<div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;                           <span class="keyword">typename</span> <a class="code" href="a00115.html">parent_type::BackwardGenerator</a>&gt;(n, outputIt,</div>
<div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;                                                                    evaluator);</div>
<div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;      }</div>
<div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;    };</div>
<div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;</div>
<div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> _SolutionOutputIterator, <span class="keyword">typename</span> _Evaluator&gt;</div>
<div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;    <span class="keyword">struct </span>SearchFunctor&lt;false, _SolutionOutputIterator, _Evaluator&gt; {</div>
<div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;      <span class="keywordtype">double</span> <a class="code" href="a00030.html#a54978870dd4a6a9e14601795d4e7dbce">operator()</a>(<span class="keyword">const</span> <a class="code" href="a00030.html">BidirectionalGreedySearch</a>&amp; algo, <span class="keywordtype">int</span> n,</div>
<div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;                        _SolutionOutputIterator&amp; outputIt,</div>
<div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;                        _Evaluator&amp; evaluator)<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;        <span class="keywordflow">return</span> algo.search&lt;_SolutionOutputIterator, _Evaluator,</div>
<div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;                           <span class="keyword">typename</span> <a class="code" href="a00115.html">parent_type::BackwardGenerator</a>,</div>
<div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;                           <span class="keyword">typename</span> <a class="code" href="a00119.html">parent_type::ForwardGenerator</a>&gt;(n, outputIt,</div>
<div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;                                                                   evaluator);</div>
<div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;      }</div>
<div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;    };</div>
<div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;</div>
<div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;  <span class="keyword">public</span>:</div>
<div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;</div>
<div class="line"><a name="l00497"></a><span class="lineno"><a class="code" href="a00030.html#af0f156badb9fa1a1277502bb7aee186a">  497</a></span>&#160;    <a class="code" href="a00030.html#af0f156badb9fa1a1277502bb7aee186a">BidirectionalGreedySearch</a>() :</div>
<div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;      <a class="code" href="a00114.html">Search</a>&lt;minimize&gt;() {</div>
<div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;    }</div>
<div class="line"><a name="l00500"></a><span class="lineno"><a class="code" href="a00030.html#a360625ef4515d27f5a945ed310eb7501">  500</a></span>&#160;    <a class="code" href="a00030.html">BidirectionalGreedySearch</a>&amp; <a class="code" href="a00030.html#a360625ef4515d27f5a945ed310eb7501">verbose</a>(<span class="keywordtype">bool</span> <a class="code" href="a00030.html#a360625ef4515d27f5a945ed310eb7501">verbose</a> = <span class="keyword">true</span>) {</div>
<div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;      <a class="code" href="a00114.html#a02e4be9f1295117ba481fbf656b48ec4">parent_type::setVerbose</a>(<a class="code" href="a00030.html#a360625ef4515d27f5a945ed310eb7501">verbose</a>);</div>
<div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;      <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;    }</div>
<div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;</div>
<div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> _SolutionOutputIterator, <span class="keyword">typename</span> _Evaluator&gt;</div>
<div class="line"><a name="l00506"></a><span class="lineno"><a class="code" href="a00030.html#a54978870dd4a6a9e14601795d4e7dbce">  506</a></span>&#160;    <span class="keywordtype">double</span> <a class="code" href="a00030.html#a54978870dd4a6a9e14601795d4e7dbce">operator()</a>(<span class="keywordtype">int</span> n, _SolutionOutputIterator&amp; outputIt,</div>
<div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;                      _Evaluator&amp; evaluator)<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;      SearchFunctor&lt;forward, _SolutionOutputIterator, _Evaluator&gt; func;</div>
<div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;      <span class="keywordflow">return</span> func(*<span class="keyword">this</span>, n, outputIt, evaluator);</div>
<div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;    }</div>
<div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;  };</div>
<div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;</div>
<div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;  <span class="keyword">template</span>&lt;<span class="keywordtype">bool</span> forward = true, <span class="keywordtype">bool</span> minimize = true&gt;</div>
<div class="line"><a name="l00514"></a><span class="lineno"><a class="code" href="a00029.html">  514</a></span>&#160;  <span class="keyword">class </span><a class="code" href="a00029.html">BestFirstSearch</a>: <span class="keyword">public</span> <a class="code" href="a00114.html">Search</a>&lt;minimize&gt; {</div>
<div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;    <span class="keyword">typedef</span> <a class="code" href="a00114.html">Search&lt;minimize&gt;</a> <a class="code" href="a00114.html">parent_type</a>;</div>
<div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;    <span class="keyword">typedef</span> <span class="keyword">typename</span> <a class="code" href="a00114.html#ac831b64fefa47c7ede3595f67ac335ad">parent_type::elts_set_type</a> <a class="code" href="a00114.html#ac831b64fefa47c7ede3595f67ac335ad">elts_set_type</a>;</div>
<div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;</div>
<div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;    <span class="keywordtype">int</span> k_;</div>
<div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;    <span class="keywordtype">double</span> filteringRatio_;</div>
<div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;</div>
<div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> _SolutionOutputIterator, <span class="keyword">typename</span> _Evaluator,</div>
<div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;             <span class="keyword">typename</span> _Generator&gt;</div>
<div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;    <span class="keywordtype">double</span> search(<span class="keywordtype">int</span> n, _SolutionOutputIterator&amp; outputIt,</div>
<div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;                  _Evaluator&amp; evaluator)<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;      <span class="keyword">typedef</span> std::multimap&lt;double, elts_set_type, std::less&lt;double&gt;&gt; queue_type;</div>
<div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;      <span class="keyword">typedef</span> <span class="keyword">typename</span> queue_type::iterator <a class="code" href="a00114.html#a6eba294ee7a75bd3d675b250848d979b">iterator</a>;</div>
<div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;      <span class="keyword">typedef</span> <span class="keyword">typename</span> queue_type::value_type queue_entry;</div>
<div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;</div>
<div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;      queue_type queue;</div>
<div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;      <a class="code" href="a00114.html#ac831b64fefa47c7ede3595f67ac335ad">elts_set_type</a> bestSubset, previousInsertedSubset;</div>
<div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;      _Generator::setInitAttributeSubset(bestSubset, n);</div>
<div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;      <span class="keywordtype">double</span> bestScore = evaluator(bestSubset.cbegin(), bestSubset.cend());</div>
<div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;      queue.insert(queue_entry(bestScore, bestSubset));</div>
<div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;      previousInsertedSubset = bestSubset;</div>
<div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;</div>
<div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;      <span class="keywordflow">while</span> (!queue.empty()) {</div>
<div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;        iterator head = queue.begin();</div>
<div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;        iterator chead = head;</div>
<div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;        <a class="code" href="a00114.html#ac831b64fefa47c7ede3595f67ac335ad">elts_set_type</a>&amp; currentSubset = head-&gt;second;</div>
<div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;</div>
<div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;        _Generator generator(currentSubset, n);</div>
<div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">auto</span> it = generator.begin(); it != generator.end(); ++it) {</div>
<div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;          <a class="code" href="a00114.html#ac831b64fefa47c7ede3595f67ac335ad">elts_set_type</a>&amp; newSubset = *it;</div>
<div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;          <span class="keywordtype">double</span> newScore = evaluator(newSubset.cbegin(),</div>
<div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;                                      newSubset.cend());</div>
<div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;          <span class="keywordflow">if</span> (<a class="code" href="a00114.html#a95c398e1d1bfdb3728f6c4b06ae49251">parent_type::firstScoreIsStrictlyBetter</a>(newScore,</div>
<div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;                                                      filteringRatio_ * bestScore)) {</div>
<div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;            <span class="keywordtype">bool</span> update = <a class="code" href="a00114.html#a95c398e1d1bfdb3728f6c4b06ae49251">parent_type::firstScoreIsStrictlyBetter</a>(</div>
<div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;                                                                  newScore, bestScore);</div>
<div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;            <span class="keywordflow">if</span> (update) {</div>
<div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;              bestScore = newScore;</div>
<div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;              bestSubset = newSubset;</div>
<div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;            }</div>
<div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;            <span class="keywordflow">if</span> (newSubset != previousInsertedSubset) {</div>
<div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;              previousInsertedSubset = newSubset;</div>
<div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;              queue.insert(queue_entry(newScore, newSubset));</div>
<div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;              <span class="keywordflow">if</span> (<a class="code" href="a00114.html#a0fcf9fc19866613c64850fe8f89b6061">parent_type::verbose_</a>) {</div>
<div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;                std::cout &lt;&lt; <span class="stringliteral">&quot;Pushing &quot;</span>;</div>
<div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;                std::for_each(newSubset.cbegin(), newSubset.cend(),</div>
<div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;                              [](<span class="keywordtype">int</span> elt) -&gt; <span class="keywordtype">void</span> {std::cout &lt;&lt; elt &lt;&lt; <span class="charliteral">&#39; &#39;</span>;});</div>
<div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;                std::cout &lt;&lt; <span class="stringliteral">&quot;= &quot;</span> &lt;&lt; newScore;</div>
<div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;</div>
<div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;                <span class="keywordflow">if</span> (update) {</div>
<div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;                  std::cout &lt;&lt; <span class="stringliteral">&quot; (new optimum)&quot;</span>;</div>
<div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;                }</div>
<div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;                std::cout &lt;&lt; std::endl;</div>
<div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;              }</div>
<div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;            }</div>
<div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;          }</div>
<div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;        }</div>
<div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;        queue.erase(chead);</div>
<div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;        <span class="keywordflow">if</span> (queue.size() &gt; (size_t) k_) {</div>
<div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;          iterator pos = queue.begin();</div>
<div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;          <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i != k_; ++i)</div>
<div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;            ++pos;</div>
<div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;          queue.erase(pos, queue.end());</div>
<div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;        }</div>
<div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;      }</div>
<div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;</div>
<div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;      <span class="keywordflow">for</span> (<span class="keyword">auto</span> it = bestSubset.begin(); it != bestSubset.end(); ++it)</div>
<div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;        *outputIt++ = *it;</div>
<div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;      <span class="keywordflow">return</span> bestScore;</div>
<div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;    }</div>
<div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;</div>
<div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;    <span class="keyword">template</span>&lt;<span class="keywordtype">bool</span> direction, <span class="keyword">typename</span> _SolutionOutputIterator,</div>
<div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;             <span class="keyword">typename</span> _Evaluator&gt;</div>
<div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;    <span class="keyword">struct </span>SearchFunctor {</div>
<div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;      <span class="keywordtype">double</span> <a class="code" href="a00029.html#a9f48cbed6a7e0b7c5d4b3d1072be0122">operator()</a>(<span class="keyword">const</span> <a class="code" href="a00029.html">BestFirstSearch</a>&amp; algo, <span class="keywordtype">int</span> n,</div>
<div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;                        _SolutionOutputIterator&amp; outputIt,</div>
<div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;                        _Evaluator&amp; evaluator)<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;        <span class="keywordflow">return</span> algo.search&lt;_SolutionOutputIterator, _Evaluator,</div>
<div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;                           <span class="keyword">typename</span> <a class="code" href="a00119.html">parent_type::ForwardGenerator</a>&gt;(n, outputIt,</div>
<div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;                                                                   evaluator);</div>
<div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;      }</div>
<div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;    };</div>
<div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;</div>
<div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> _SolutionOutputIterator, <span class="keyword">typename</span> _Evaluator&gt;</div>
<div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;    <span class="keyword">struct </span>SearchFunctor&lt;false, _SolutionOutputIterator, _Evaluator&gt; {</div>
<div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;      <span class="keywordtype">double</span> <a class="code" href="a00029.html#a9f48cbed6a7e0b7c5d4b3d1072be0122">operator()</a>(<span class="keyword">const</span> <a class="code" href="a00029.html">BestFirstSearch</a>&amp; algo, <span class="keywordtype">int</span> n,</div>
<div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;                        _SolutionOutputIterator&amp; outputIt,</div>
<div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;                        _Evaluator&amp; evaluator)<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;        <span class="keywordflow">return</span> algo.search&lt;_SolutionOutputIterator, _Evaluator,</div>
<div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;                           <span class="keyword">typename</span> <a class="code" href="a00115.html">parent_type::BackwardGenerator</a>&gt;(n, outputIt,</div>
<div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;                                                                    evaluator);</div>
<div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;      }</div>
<div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;    };</div>
<div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;</div>
<div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;  <span class="keyword">public</span>:</div>
<div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;</div>
<div class="line"><a name="l00610"></a><span class="lineno"><a class="code" href="a00029.html#af351a3c2a847e7878cd27de7ac6cbf4c">  610</a></span>&#160;    <a class="code" href="a00029.html#af351a3c2a847e7878cd27de7ac6cbf4c">BestFirstSearch</a>(<span class="keywordtype">int</span> k, <span class="keywordtype">double</span> ratio = 1.) :</div>
<div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;      <a class="code" href="a00114.html">Search</a>&lt;minimize&gt;(), k_(k), filteringRatio_(ratio) {</div>
<div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;    }</div>
<div class="line"><a name="l00613"></a><span class="lineno"><a class="code" href="a00029.html#a504d27f279decd85e6cb4535c5d934d4">  613</a></span>&#160;    <a class="code" href="a00029.html">BestFirstSearch</a>&amp; <a class="code" href="a00029.html#a504d27f279decd85e6cb4535c5d934d4">verbose</a>(<span class="keywordtype">bool</span> <a class="code" href="a00029.html#a504d27f279decd85e6cb4535c5d934d4">verbose</a> = <span class="keyword">true</span>) {</div>
<div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;      <a class="code" href="a00114.html#a02e4be9f1295117ba481fbf656b48ec4">parent_type::setVerbose</a>(<a class="code" href="a00029.html#a504d27f279decd85e6cb4535c5d934d4">verbose</a>);</div>
<div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;      <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;    }</div>
<div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;</div>
<div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> _SolutionOutputIterator, <span class="keyword">typename</span> _Evaluator&gt;</div>
<div class="line"><a name="l00619"></a><span class="lineno"><a class="code" href="a00029.html#a9f48cbed6a7e0b7c5d4b3d1072be0122">  619</a></span>&#160;    <span class="keywordtype">double</span> <a class="code" href="a00029.html#a9f48cbed6a7e0b7c5d4b3d1072be0122">operator()</a>(<span class="keywordtype">int</span> n, _SolutionOutputIterator&amp; outputIt,</div>
<div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;                      _Evaluator&amp; evaluator)<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;      SearchFunctor&lt;forward, _SolutionOutputIterator, _Evaluator&gt; func;</div>
<div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;      <span class="keywordflow">return</span> func(*<span class="keyword">this</span>, n, outputIt, evaluator);</div>
<div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;    }</div>
<div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;  };</div>
<div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;}</div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.3.1
</small></address>
</body>
</html>
