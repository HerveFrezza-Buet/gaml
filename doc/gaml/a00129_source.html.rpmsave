<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.3.1"/>
<title>gaml-1.08: gamlAlgorithms.hpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">gaml-1.08
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.3.1 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="namespaces.html"><span>Namespaces</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
      <li><a href="examples.html"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.html">src</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">gamlAlgorithms.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="a00129.html">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="preprocessor">#pragma once</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">/*</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> *   Copyright (C) 2012,  Supelec</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> *   Author : Hervé Frezza-Buet, Frédéric Pennerath </span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> *   Contributor :</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> *   This library is free software; you can redistribute it and/or</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> *   modify it under the terms of the GNU General Public</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *   License (GPL) as published by the Free Software Foundation; either</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> *   version 3 of the License, or any later version.</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> *   </span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *   This library is distributed in the hope that it will be useful,</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> *   but WITHOUT ANY WARRANTY; without even the implied warranty of</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> *   General Public License for more details.</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> *   </span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> *   You should have received a copy of the GNU General Public</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> *   License along with this library; if not, write to the Free Software</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> *   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="comment"> *   Contact : herve.frezza-buet@supelec.fr, frederic.pennerath@supelec.fr</span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;</div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &lt;iostream&gt;</span></div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &lt;string&gt;</span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &lt;vector&gt;</span></div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#include &lt;list&gt;</span></div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#include &lt;array&gt;</span></div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor">#include &lt;tuple&gt;</span></div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="preprocessor">#include &lt;stdexcept&gt;</span></div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="preprocessor">#include &lt;iterator&gt;</span></div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="preprocessor">#include &lt;utility&gt;</span></div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="preprocessor">#include &lt;numeric&gt;</span></div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="preprocessor">#include &lt;cstdlib&gt;</span></div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="a00142.html">gamlMerge.hpp</a>&gt;</span></div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="a00144.html">gamlOperators.hpp</a>&gt;</span></div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="a00145.html">gamlPartition.hpp</a>&gt;</span></div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="a00141.html">gamlMap.hpp</a>&gt;</span></div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="preprocessor">#include &lt;iostream&gt;</span></div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="preprocessor">#include &lt;iomanip&gt;</span></div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;</div>
<div class="line"><a name="l00047"></a><span class="lineno"><a class="code" href="a00152.html">   47</a></span>&#160;<span class="keyword">namespace </span>gaml {</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;</div>
<div class="line"><a name="l00049"></a><span class="lineno"><a class="code" href="a00166.html">   49</a></span>&#160;  <span class="keyword">namespace </span>random {</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;</div>
<div class="line"><a name="l00054"></a><span class="lineno"><a class="code" href="a00166.html#a63a869d5b9fe61b984623e3ecd99a033">   54</a></span>&#160;    <span class="keyword">inline</span> <span class="keywordtype">double</span> <a class="code" href="a00166.html#a63a869d5b9fe61b984623e3ecd99a033">uniform</a>(<span class="keywordtype">double</span> min,<span class="keywordtype">double</span> max) {</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;      <span class="keywordflow">return</span> min + (max-min)*(std::rand()/(RAND_MAX+1.0));</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    }</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;</div>
<div class="line"><a name="l00063"></a><span class="lineno"><a class="code" href="a00166.html#a50561031870af4d865de65f89c677916">   63</a></span>&#160;    <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="a00166.html#a50561031870af4d865de65f89c677916">proba</a>(<span class="keywordtype">double</span> p) {</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;      <span class="keywordflow">return</span> <a class="code" href="a00166.html#a63a869d5b9fe61b984623e3ecd99a033">gaml::random::uniform</a>(0,1)&lt;p;</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    }</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    </div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;  }</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;</div>
<div class="line"><a name="l00070"></a><span class="lineno"><a class="code" href="a00155.html">   70</a></span>&#160;  <span class="keyword">namespace </span>concept {</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;</div>
<div class="line"><a name="l00072"></a><span class="lineno"><a class="code" href="a00155.html#a06c853d8e4709b57bb11c9413214ec01">   72</a></span>&#160;    <span class="keyword">typedef</span> <span class="keywordtype">int</span> <a class="code" href="a00155.html#a06c853d8e4709b57bb11c9413214ec01">any</a>;</div>
<div class="line"><a name="l00076"></a><span class="lineno"><a class="code" href="a00035.html">   76</a></span>&#160;    <span class="keyword">class </span><a class="code" href="a00035.html" title="This predicts a label from an input.">Predictor</a> {</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    <span class="keyword">public</span>:</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;      </div>
<div class="line"><a name="l00079"></a><span class="lineno"><a class="code" href="a00035.html#ab94a2761df161e374f003c73f5f30b5a">   79</a></span>&#160;      <span class="keyword">typedef</span> <a class="code" href="a00155.html#a06c853d8e4709b57bb11c9413214ec01">any</a> <a class="code" href="a00035.html#ab94a2761df161e374f003c73f5f30b5a">input_type</a>;</div>
<div class="line"><a name="l00080"></a><span class="lineno"><a class="code" href="a00035.html#abc35f0d07e049ae4ad28c1d54a4bb91b">   80</a></span>&#160;      <span class="keyword">typedef</span> <a class="code" href="a00155.html#a06c853d8e4709b57bb11c9413214ec01">any</a> <a class="code" href="a00035.html#abc35f0d07e049ae4ad28c1d54a4bb91b">output_type</a>;</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;      </div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;      <a class="code" href="a00035.html#a2e8c6b61ba82bc726ff08a00e6c51586">Predictor</a>(<span class="keyword">const</span> <a class="code" href="a00035.html" title="This predicts a label from an input.">Predictor</a>&amp; other);</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;      <a class="code" href="a00035.html" title="This predicts a label from an input.">Predictor</a>&amp; <a class="code" href="a00035.html#ae6e4fc6fcff739cc22d6903ae3ddfdb1">operator=</a>(<span class="keyword">const</span> <a class="code" href="a00035.html" title="This predicts a label from an input.">Predictor</a>&amp; other);</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;      <a class="code" href="a00035.html#abc35f0d07e049ae4ad28c1d54a4bb91b">output_type</a> <a class="code" href="a00035.html#a851b18e87245345734f897edb029a85f">operator()</a>(<span class="keyword">const</span> <a class="code" href="a00035.html#ab94a2761df161e374f003c73f5f30b5a">input_type</a>&amp; x) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    };</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;</div>
<div class="line"><a name="l00090"></a><span class="lineno"><a class="code" href="a00030.html">   90</a></span>&#160;    <span class="keyword">class </span><a class="code" href="a00030.html" title="This learns from a data set.">Learner</a> {</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    <span class="keyword">public</span>:</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;      </div>
<div class="line"><a name="l00093"></a><span class="lineno"><a class="code" href="a00030.html#ae705e461bfc5cccdbc38c952c03644b2">   93</a></span>&#160;      <span class="keyword">typedef</span> <a class="code" href="a00155.html#a06c853d8e4709b57bb11c9413214ec01">any</a> <a class="code" href="a00030.html#ae705e461bfc5cccdbc38c952c03644b2">predictor_type</a>;</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;      </div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;      <a class="code" href="a00030.html#a513f5da2f37b71b3797b2a2fd39ae024">Learner</a>(<span class="keyword">const</span> <a class="code" href="a00030.html" title="This learns from a data set.">Learner</a>&amp; other);</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;      <a class="code" href="a00030.html" title="This learns from a data set.">Learner</a>&amp; <a class="code" href="a00030.html#a830f065e794d7d655bfe28970753e42d">operator=</a>(<span class="keyword">const</span> <a class="code" href="a00030.html" title="This learns from a data set.">Learner</a>&amp; other);</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;      <span class="keyword">template</span>&lt;<span class="keyword">typename</span> DataIterator, <span class="keyword">typename</span> InputOf, <span class="keyword">typename</span> OutputOf&gt; </div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;      <a class="code" href="a00030.html#ae705e461bfc5cccdbc38c952c03644b2">predictor_type</a> <a class="code" href="a00030.html#a36e497bc634ff5a6d22f90bc3b55c054">operator()</a>(<span class="keyword">const</span> DataIterator&amp; begin, <span class="keyword">const</span> DataIterator&amp; end,</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;                                <span class="keyword">const</span> InputOf&amp;, <span class="keyword">const</span> OutputOf&amp;) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    };</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;</div>
<div class="line"><a name="l00107"></a><span class="lineno"><a class="code" href="a00036.html">  107</a></span>&#160;    <span class="keyword">class </span><a class="code" href="a00036.html" title="Evaluation of a predictor on a data set.">PredictorEvaluator</a> {</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    <span class="keyword">public</span>:</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;</div>
<div class="line"><a name="l00110"></a><span class="lineno"><a class="code" href="a00036.html#ad773c58ce30f2a87597aab4fa96d08c1">  110</a></span>&#160;      <span class="keyword">typedef</span> <span class="keywordtype">double</span> <a class="code" href="a00036.html#ad773c58ce30f2a87597aab4fa96d08c1">value_type</a>;</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;      <a class="code" href="a00036.html#ac587c73787eff23933bf0fe49047297a">PredictorEvaluator</a>(<span class="keyword">const</span> <a class="code" href="a00036.html" title="Evaluation of a predictor on a data set.">PredictorEvaluator</a>&amp; other);</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;      <span class="keyword">template</span>&lt;<span class="keyword">typename</span> Predictor, <span class="keyword">typename</span> DataIterator, <span class="keyword">typename</span> InputOf, <span class="keyword">typename</span> OutputOf&gt; </div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;      <a class="code" href="a00036.html#ad773c58ce30f2a87597aab4fa96d08c1">value_type</a> <a class="code" href="a00036.html#a8bebdd524426bcd5ab9adcab8f6ba92e">operator()</a>(<span class="keyword">const</span> <a class="code" href="a00035.html" title="This predicts a label from an input.">Predictor</a>&amp; predictor,<span class="keyword">const</span> DataIterator&amp; begin, <span class="keyword">const</span> DataIterator&amp; end,</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;                            <span class="keyword">const</span> InputOf&amp;, <span class="keyword">const</span> OutputOf&amp;) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    };</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    </div>
<div class="line"><a name="l00123"></a><span class="lineno"><a class="code" href="a00031.html">  123</a></span>&#160;    <span class="keyword">class </span><a class="code" href="a00031.html" title="Evaluation of a predictor on a data set.">LearnerEvaluator</a> {</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    <span class="keyword">public</span>:</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;</div>
<div class="line"><a name="l00126"></a><span class="lineno"><a class="code" href="a00031.html#a7428457a1470e8fad4bef4dfb1d39b89">  126</a></span>&#160;      <span class="keyword">typedef</span> <span class="keywordtype">double</span> <a class="code" href="a00031.html#a7428457a1470e8fad4bef4dfb1d39b89">value_type</a>;</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;      <a class="code" href="a00031.html#a4d856831f9d52f6a012e8590192040fb">LearnerEvaluator</a>(<span class="keyword">const</span> <a class="code" href="a00031.html" title="Evaluation of a predictor on a data set.">LearnerEvaluator</a>&amp; other);</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;      <span class="keyword">template</span>&lt;<span class="keyword">typename</span> Learner, <span class="keyword">typename</span> DataIterator, <span class="keyword">typename</span> InputOf, <span class="keyword">typename</span> OutputOf&gt; </div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;      <a class="code" href="a00031.html#a7428457a1470e8fad4bef4dfb1d39b89">value_type</a> <a class="code" href="a00031.html#a542f6c73f1e56c5fc1cbafcca5d02f82">operator()</a>(<span class="keyword">const</span> <a class="code" href="a00030.html" title="This learns from a data set.">Learner</a>&amp; <a class="code" href="a00163.html#a89a33b6f1d995b64df36b9dca77039db">learner</a>,<span class="keyword">const</span> DataIterator&amp; begin, <span class="keyword">const</span> DataIterator&amp; end,</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;                            <span class="keyword">const</span> InputOf&amp;, <span class="keyword">const</span> OutputOf&amp;) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    };</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    </div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;  }</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;</div>
<div class="line"><a name="l00137"></a><span class="lineno"><a class="code" href="a00167.html">  137</a></span>&#160;  <span class="keyword">namespace </span>risk {</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> Predictor,<span class="keyword">typename</span> DataIterator,</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;             <span class="keyword">typename</span> InputOf, <span class="keyword">typename</span> OutputOf,</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;             <span class="keyword">typename</span> Loss, <span class="keyword">typename</span> AccumIterator&gt;</div>
<div class="line"><a name="l00142"></a><span class="lineno"><a class="code" href="a00167.html#a345ecf68a70400b74c311859bfe0264d">  142</a></span>&#160;    <span class="keywordtype">double</span> <a class="code" href="a00167.html#a345ecf68a70400b74c311859bfe0264d">accumulation</a>(<span class="keyword">const</span> Predictor&amp; predictor, </div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;                        <span class="keyword">const</span> DataIterator&amp; begin, <span class="keyword">const</span> DataIterator&amp; end,</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;                        <span class="keyword">const</span> InputOf&amp; inputOf,<span class="keyword">const</span> OutputOf&amp; outputOf, </div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;                        <span class="keyword">const</span> Loss&amp; loss, AccumIterator&amp; acc) {</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;      <span class="keywordflow">for</span>(DataIterator it = begin; it != end; ++it) </div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;        *acc++ = loss(predictor(inputOf(*it)),</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;                      outputOf(*it));</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;      <span class="keywordflow">return</span> (<span class="keywordtype">double</span>)(acc());</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    }</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    </div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> LOSS&gt;</div>
<div class="line"><a name="l00153"></a><span class="lineno"><a class="code" href="a00105.html">  153</a></span>&#160;    <span class="keyword">class </span><a class="code" href="a00105.html">Empirical</a> {</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    <span class="keyword">private</span>:</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;      LOSS loss;</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    <span class="keyword">public</span>:</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;</div>
<div class="line"><a name="l00160"></a><span class="lineno"><a class="code" href="a00105.html#acde46e16ffd976856de36e494b3940c0">  160</a></span>&#160;      <a class="code" href="a00105.html#acde46e16ffd976856de36e494b3940c0">Empirical</a>(<span class="keyword">const</span> LOSS&amp; l) : loss(l) {}</div>
<div class="line"><a name="l00161"></a><span class="lineno"><a class="code" href="a00105.html#a9187af3e131f29ca50ce8b540770109d">  161</a></span>&#160;      <a class="code" href="a00105.html#a9187af3e131f29ca50ce8b540770109d">Empirical</a>(<span class="keyword">const</span> <a class="code" href="a00105.html">Empirical</a>&amp; other) : loss(other.loss) {}</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;      <span class="keyword">template</span>&lt;<span class="keyword">typename</span> Predictor, <span class="keyword">typename</span> DataIterator, <span class="keyword">typename</span> InputOf, <span class="keyword">typename</span> OutputOf&gt; </div>
<div class="line"><a name="l00164"></a><span class="lineno"><a class="code" href="a00105.html#a8a1495a9ad265b8019c5f8bf26aba9bf">  164</a></span>&#160;      <span class="keywordtype">double</span> <a class="code" href="a00105.html#a8a1495a9ad265b8019c5f8bf26aba9bf">operator()</a>(<span class="keyword">const</span> Predictor&amp; predictor,<span class="keyword">const</span> DataIterator&amp; begin, <span class="keyword">const</span> DataIterator&amp; end,</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;                        <span class="keyword">const</span> InputOf&amp; inputOf, <span class="keyword">const</span> OutputOf&amp; outputOf)<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;        <span class="keyword">typedef</span> <a class="code" href="a00020.html" title="This provides an output iterator that computes the mean.">gaml::ArithmeticMean&lt;double&gt;</a> Mean;</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;        <span class="keyword">typename</span> Mean::accumulator accum;</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;        Mean                       mean(accum);</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="a00167.html#a345ecf68a70400b74c311859bfe0264d">accumulation</a>(predictor,begin,end,</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;                            inputOf,outputOf, </div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;                            loss,mean);</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;      }</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    };</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> LOSS&gt;</div>
<div class="line"><a name="l00176"></a><span class="lineno"><a class="code" href="a00167.html#a6d9973bf3290ec3c9e0eccc57a63ad46">  176</a></span>&#160;    <a class="code" href="a00105.html">Empirical&lt;LOSS&gt;</a> <a class="code" href="a00167.html#a6d9973bf3290ec3c9e0eccc57a63ad46">empirical</a>(<span class="keyword">const</span> LOSS&amp; loss) {<span class="keywordflow">return</span> <a class="code" href="a00105.html">Empirical&lt;LOSS&gt;</a>(loss);}</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    </div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> LOSS, <span class="keyword">typename</span> PARTITION&gt;</div>
<div class="line"><a name="l00180"></a><span class="lineno"><a class="code" href="a00104.html">  180</a></span>&#160;    <span class="keyword">class </span><a class="code" href="a00104.html">CrossValidation</a> {</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    <span class="keyword">private</span>:</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;      </div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;      LOSS loss;</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;      PARTITION partition;</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;      <span class="keywordtype">bool</span> verbose;</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    <span class="keyword">public</span>:</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;</div>
<div class="line"><a name="l00190"></a><span class="lineno"><a class="code" href="a00104.html#a7017297be2cf4932d78d623cb3646dab">  190</a></span>&#160;      <a class="code" href="a00104.html#a7017297be2cf4932d78d623cb3646dab">CrossValidation</a>(<span class="keyword">const</span> LOSS&amp; l, <span class="keyword">const</span> PARTITION&amp; part,<span class="keywordtype">bool</span> verbosity) </div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;        : loss(l), partition(part), verbose(verbosity) {}</div>
<div class="line"><a name="l00192"></a><span class="lineno"><a class="code" href="a00104.html#a863beae4d614b7371c85106ee65efd6c">  192</a></span>&#160;      <a class="code" href="a00104.html#a863beae4d614b7371c85106ee65efd6c">CrossValidation</a>(<span class="keyword">const</span> <a class="code" href="a00104.html">CrossValidation</a>&amp; other) : loss(other.loss), partition(other.partition), verbose(other.verbose) {}</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;      <span class="keyword">template</span>&lt;<span class="keyword">typename</span> Learner, <span class="keyword">typename</span> DataIterator, <span class="keyword">typename</span> InputOf, <span class="keyword">typename</span> OutputOf&gt; </div>
<div class="line"><a name="l00195"></a><span class="lineno"><a class="code" href="a00104.html#a366be8dcf507a5ff239a55a69a80476e">  195</a></span>&#160;      <span class="keywordtype">double</span> <a class="code" href="a00104.html#a366be8dcf507a5ff239a55a69a80476e">operator()</a>(<span class="keyword">const</span> Learner&amp; <a class="code" href="a00163.html#a89a33b6f1d995b64df36b9dca77039db">learner</a>,<span class="keyword">const</span> DataIterator&amp; begin, <span class="keyword">const</span> DataIterator&amp; end,</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;                        <span class="keyword">const</span> InputOf&amp; inputOf, <span class="keyword">const</span> OutputOf&amp; outputOf)<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;        <span class="keyword">auto</span> built_partition = partition.build(begin,end);</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;        <span class="keywordtype">double</span> sum = 0;</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;        </div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;        <span class="keywordflow">if</span>(verbose)</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;          std::cout &lt;&lt; <span class="stringliteral">&quot;Splitting the database into &quot;</span> &lt;&lt; built_partition.size() &lt;&lt; <span class="stringliteral">&quot; sets.&quot;</span> &lt;&lt; std::endl;</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; built_partition.size(); ++i) {</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;          </div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;          <span class="keyword">auto</span> begin  = built_partition.begin(i);</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;          <span class="keyword">auto</span> end    = built_partition.end(i);</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;          <span class="keyword">auto</span> _begin = built_partition.complement_begin(i);</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;          <span class="keyword">auto</span> _end   = built_partition.complement_end(i);</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;          </div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;          <span class="keywordflow">if</span>(verbose)</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;            std::cout &lt;&lt; std::setw(6) &lt;&lt; i+1 &lt;&lt; <span class="charliteral">&#39;/&#39;</span> &lt;&lt; built_partition.size() </div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;                      &lt;&lt; <span class="stringliteral">&quot; : learning...\r&quot;</span> &lt;&lt; std::flush;</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;          </div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;          <span class="keyword">auto</span> predictor = <a class="code" href="a00163.html#a89a33b6f1d995b64df36b9dca77039db">learner</a>(_begin, _end, inputOf, outputOf);</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;          </div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;          <span class="keyword">typename</span> <a class="code" href="a00122.html#a02f62f4e9acab0a555a469fedd02d578">gaml::Sum&lt;double&gt;::accumulator</a> accum;</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;          <a class="code" href="a00122.html" title="This provides an output iterator that computes the mean.">gaml::Sum&lt;double&gt;</a>                       acc(accum);</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;          <span class="keyword">auto</span> risk = <a class="code" href="a00167.html#a345ecf68a70400b74c311859bfe0264d">accumulation</a>(predictor,begin,end,</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;                                   inputOf,outputOf, </div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;                                   loss,acc);</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;          <span class="keywordflow">if</span>(verbose)</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;            std::cout &lt;&lt; std::setw(6) &lt;&lt; i+1 &lt;&lt; <span class="charliteral">&#39;/&#39;</span> &lt;&lt; built_partition.size() </div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;                      &lt;&lt; <span class="stringliteral">&quot; : risk = &quot;</span> &lt;&lt; risk / (end-begin) &lt;&lt; <span class="stringliteral">&quot; (&quot;</span> </div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;                      &lt;&lt; (end-begin) &lt;&lt; <span class="stringliteral">&quot;-sized test set)&quot;</span> &lt;&lt; std::endl;</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;          </div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;          sum += risk;</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;        }</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;        </div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;        <span class="keywordflow">return</span> (<span class="keywordtype">double</span>)(sum/(double)(built_partition.data_size()));</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;      }</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;    };</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;    </div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> LOSS, <span class="keyword">typename</span> PARTITION&gt;</div>
<div class="line"><a name="l00234"></a><span class="lineno"><a class="code" href="a00167.html#adf7f5a2dee85281e5a0b604b588e9560">  234</a></span>&#160;    <a class="code" href="a00104.html">CrossValidation&lt;LOSS,PARTITION&gt;</a> <a class="code" href="a00167.html#adf7f5a2dee85281e5a0b604b588e9560">cross_validation</a>(<span class="keyword">const</span> LOSS&amp; l, <span class="keyword">const</span> PARTITION&amp; part,<span class="keywordtype">bool</span> verbosity) {</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;      <span class="keywordflow">return</span> <a class="code" href="a00104.html">CrossValidation&lt;LOSS,PARTITION&gt;</a>(l,part,verbosity);</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;    }</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;  }</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;</div>
<div class="line"><a name="l00240"></a><span class="lineno"><a class="code" href="a00055.html">  240</a></span>&#160;  <span class="keyword">class </span><a class="code" href="a00055.html">integer</a> : <span class="keyword">public</span> std::iterator&lt;std::random_access_iterator_tag,int&gt; {</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;  <span class="keyword">private</span>:</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;    <span class="keywordtype">int</span> j;</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;  <span class="keyword">public</span>:</div>
<div class="line"><a name="l00244"></a><span class="lineno"><a class="code" href="a00055.html#ad864d133ef9152bf4c325efd49292f2d">  244</a></span>&#160;    <a class="code" href="a00055.html#ad864d133ef9152bf4c325efd49292f2d">integer</a>() : j(0) {}</div>
<div class="line"><a name="l00245"></a><span class="lineno"><a class="code" href="a00055.html#aeaf83f71ecba3ea99f92d83ebb4cb3e5">  245</a></span>&#160;    <a class="code" href="a00055.html#aeaf83f71ecba3ea99f92d83ebb4cb3e5">integer</a>(<span class="keyword">const</span> <a class="code" href="a00055.html">integer</a>&amp; cp) : j(cp.j) {}</div>
<div class="line"><a name="l00246"></a><span class="lineno"><a class="code" href="a00055.html#af5d83872c23e4caa010f96ba3f6495c4">  246</a></span>&#160;    <a class="code" href="a00055.html#af5d83872c23e4caa010f96ba3f6495c4">integer</a>(<span class="keywordtype">int</span> i) : j(i) {}</div>
<div class="line"><a name="l00247"></a><span class="lineno"><a class="code" href="a00055.html#a6a892fe3cdb5482e1860c10844a4d80a">  247</a></span>&#160;    <a class="code" href="a00055.html">integer</a>&amp; <a class="code" href="a00055.html#a6a892fe3cdb5482e1860c10844a4d80a">operator=</a>(<span class="keywordtype">int</span> i) {j=i; <span class="keywordflow">return</span> *<span class="keyword">this</span>;}</div>
<div class="line"><a name="l00248"></a><span class="lineno"><a class="code" href="a00055.html#ab356864fb10970a7b6b64d220c41db7e">  248</a></span>&#160;    <a class="code" href="a00055.html">integer</a>&amp; <a class="code" href="a00055.html#ab356864fb10970a7b6b64d220c41db7e">operator=</a>(<span class="keyword">const</span> <a class="code" href="a00055.html">integer</a>&amp; cp) {j=cp.j; <span class="keywordflow">return</span> *<span class="keyword">this</span>;}</div>
<div class="line"><a name="l00249"></a><span class="lineno"><a class="code" href="a00055.html#abbf462090094d71b0b517263fe4c8bdd">  249</a></span>&#160;    <a class="code" href="a00055.html">integer</a>&amp; <a class="code" href="a00055.html#abbf462090094d71b0b517263fe4c8bdd">operator++</a>() {++j; <span class="keywordflow">return</span> *<span class="keyword">this</span>;}</div>
<div class="line"><a name="l00250"></a><span class="lineno"><a class="code" href="a00055.html#a8591e744001d2ed1d04376d3239ec41f">  250</a></span>&#160;    <a class="code" href="a00055.html">integer</a>&amp; <a class="code" href="a00055.html#a8591e744001d2ed1d04376d3239ec41f">operator--</a>() {--j; <span class="keywordflow">return</span> *<span class="keyword">this</span>;}</div>
<div class="line"><a name="l00251"></a><span class="lineno"><a class="code" href="a00055.html#a7fb179eda07e4d95c9c09f8a98d92b40">  251</a></span>&#160;    <a class="code" href="a00055.html">integer</a>&amp; <a class="code" href="a00055.html#a7fb179eda07e4d95c9c09f8a98d92b40">operator+=</a>(<span class="keywordtype">int</span> diff) {j+=diff; <span class="keywordflow">return</span> *<span class="keyword">this</span>;}</div>
<div class="line"><a name="l00252"></a><span class="lineno"><a class="code" href="a00055.html#abe14b663aae8f24adc0d1052420d25c6">  252</a></span>&#160;    <a class="code" href="a00055.html">integer</a>&amp; <a class="code" href="a00055.html#abe14b663aae8f24adc0d1052420d25c6">operator-=</a>(<span class="keywordtype">int</span> diff) {j-=diff; <span class="keywordflow">return</span> *<span class="keyword">this</span>;}</div>
<div class="line"><a name="l00253"></a><span class="lineno"><a class="code" href="a00055.html#a19f749e601bde5901328b41c6cbedaa8">  253</a></span>&#160;    <a class="code" href="a00055.html">integer</a> <a class="code" href="a00055.html#a19f749e601bde5901328b41c6cbedaa8">operator++</a>(<span class="keywordtype">int</span>) {<a class="code" href="a00055.html">integer</a> res = *<span class="keyword">this</span>; ++*<span class="keyword">this</span>; <span class="keywordflow">return</span> res;}</div>
<div class="line"><a name="l00254"></a><span class="lineno"><a class="code" href="a00055.html#abffca7dbd7cf77b25decf7a6e695cc4a">  254</a></span>&#160;    <a class="code" href="a00055.html">integer</a> <a class="code" href="a00055.html#abffca7dbd7cf77b25decf7a6e695cc4a">operator--</a>(<span class="keywordtype">int</span>) {<a class="code" href="a00055.html">integer</a> res = *<span class="keyword">this</span>; --*<span class="keyword">this</span>; <span class="keywordflow">return</span> res;}</div>
<div class="line"><a name="l00255"></a><span class="lineno"><a class="code" href="a00055.html#a239885f348ec619b8c395e9eaa52acdf">  255</a></span>&#160;    <span class="keywordtype">int</span> <a class="code" href="a00055.html#a239885f348ec619b8c395e9eaa52acdf">operator-</a>(<span class="keyword">const</span> <a class="code" href="a00055.html">integer</a>&amp; i)<span class="keyword"> const </span>{<span class="keywordflow">return</span> j - i.j;}</div>
<div class="line"><a name="l00256"></a><span class="lineno"><a class="code" href="a00055.html#a93c0e8d3bc4cb7793c890a6ab62e5779">  256</a></span>&#160;    <a class="code" href="a00055.html">integer</a> <a class="code" href="a00055.html#a93c0e8d3bc4cb7793c890a6ab62e5779">operator+</a>(<span class="keywordtype">int</span> i)<span class="keyword"> const </span>{<span class="keywordflow">return</span> <a class="code" href="a00055.html#ad864d133ef9152bf4c325efd49292f2d">integer</a>(j+i);}</div>
<div class="line"><a name="l00257"></a><span class="lineno"><a class="code" href="a00055.html#a25310eccd9ddec5a32033b7401a3ec29">  257</a></span>&#160;    <a class="code" href="a00055.html">integer</a> <a class="code" href="a00055.html#a25310eccd9ddec5a32033b7401a3ec29">operator-</a>(<span class="keywordtype">int</span> i)<span class="keyword"> const </span>{<span class="keywordflow">return</span> <a class="code" href="a00055.html#ad864d133ef9152bf4c325efd49292f2d">integer</a>(j-i);}</div>
<div class="line"><a name="l00258"></a><span class="lineno"><a class="code" href="a00055.html#a3612b982fd87a7d9f5dc4260c03f451a">  258</a></span>&#160;    <span class="keywordtype">int</span> <a class="code" href="a00055.html#a3612b982fd87a7d9f5dc4260c03f451a">operator*</a>()<span class="keyword"> const </span>{<span class="keywordflow">return</span> j;}</div>
<div class="line"><a name="l00259"></a><span class="lineno"><a class="code" href="a00055.html#a322b9b098377c7b676e08812f051f148">  259</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="a00055.html#a322b9b098377c7b676e08812f051f148">operator==</a>(<span class="keyword">const</span> <a class="code" href="a00055.html">integer</a>&amp; i)<span class="keyword"> const </span>{<span class="keywordflow">return</span> j == i.j;}</div>
<div class="line"><a name="l00260"></a><span class="lineno"><a class="code" href="a00055.html#a897466769dec2f939ce2a098b534a32e">  260</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="a00055.html#a897466769dec2f939ce2a098b534a32e">operator!=</a>(<span class="keyword">const</span> <a class="code" href="a00055.html">integer</a>&amp; i)<span class="keyword"> const </span>{<span class="keywordflow">return</span> j != i.j;}</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;  };</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;  <span class="keyword">template</span>&lt;<span class="keyword">typename</span> Y,<span class="keyword">typename</span> DataIterator,<span class="keyword">typename</span> Valueof&gt; </div>
<div class="line"><a name="l00269"></a><span class="lineno"><a class="code" href="a00152.html#a2f8c40ce44e1895fd76087cf633c294f">  269</a></span>&#160;  Y <a class="code" href="a00152.html#a2f8c40ce44e1895fd76087cf633c294f">average</a>(<span class="keyword">const</span> DataIterator&amp; begin, <span class="keyword">const</span> DataIterator&amp; end,<span class="keyword">const</span> Valueof&amp; value_of) {</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;    <span class="keyword">auto</span> values = <a class="code" href="a00152.html#ac4358877d7d3320c00e84b1d2d082e11">gaml::map</a>(begin,end,value_of);</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;    <span class="keywordflow">return</span> std::accumulate(values.begin(),values.end(),0)/std::distance(begin,end);</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;  }</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;}</div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.3.1
</small></address>
</body>
</html>
