<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.3.1"/>
<title>gaml-1.10: gamlStreamer.hpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">gaml-1.10
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.3.1 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="namespaces.html"><span>Namespaces</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
      <li><a href="examples.html"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.html">src</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">gamlStreamer.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="a00165.html">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="preprocessor">#pragma once</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="preprocessor"></span><span class="comment">/*</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *   Copyright (C) 2012,  Supelec</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *   Author : Hervé Frezza-Buet, Frédéric Pennerath </span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> *   Contributor :</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> *   This library is free software; you can redistribute it and/or</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> *   modify it under the terms of the GNU General Public</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> *   License (GPL) as published by the Free Software Foundation; either</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *   version 3 of the License, or any later version.</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> *   </span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> *   This library is distributed in the hope that it will be useful,</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *   but WITHOUT ANY WARRANTY; without even the implied warranty of</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> *   General Public License for more details.</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> *   </span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> *   You should have received a copy of the GNU General Public</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> *   License along with this library; if not, write to the Free Software</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> *   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> *   Contact : herve.frezza-buet@supelec.fr, frederic.pennerath@supelec.fr</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include&lt;iostream&gt;</span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include&lt;string&gt;</span></div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include&lt;vector&gt;</span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include&lt;list&gt;</span></div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#include&lt;array&gt;</span></div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#include&lt;tuple&gt;</span></div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor">#include&lt;stdexcept&gt;</span></div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="preprocessor">#include&lt;iterator&gt;</span></div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="preprocessor">#include&lt;utility&gt;</span></div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="keyword">namespace </span>gaml {</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;</div>
<div class="line"><a name="l00039"></a><span class="lineno"><a class="code" href="a00065.html">   39</a></span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> Parser&gt; <span class="keyword">class </span><a class="code" href="a00065.html">InputDataStream</a> : <span class="keyword">public</span> Parser {</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;        <span class="keywordtype">void</span> initInputStream() {</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;                <a class="code" href="a00065.html#a8741a0d01d73d14fe4e27e689233c97b">is_</a>-&gt;exceptions(</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;                                std::istream::failbit | std::istream::badbit</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;                                                | std::istream::eofbit);</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;        }</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00046"></a><span class="lineno"><a class="code" href="a00065.html#ad85dd13d0e5ef6f63cdde9b598d0f511">   46</a></span>&#160;        <span class="keyword">typedef</span> <span class="keyword">typename</span> Parser::value_type <a class="code" href="a00065.html#ad85dd13d0e5ef6f63cdde9b598d0f511">value_type</a>;</div>
<div class="line"><a name="l00047"></a><span class="lineno"><a class="code" href="a00065.html#a8741a0d01d73d14fe4e27e689233c97b">   47</a></span>&#160;        std::istream* <a class="code" href="a00065.html#a8741a0d01d73d14fe4e27e689233c97b">is_</a>;</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;</div>
<div class="line"><a name="l00049"></a><span class="lineno"><a class="code" href="a00065.html#a5966f2a6759b0ea52565f88b94496d83">   49</a></span>&#160;        <a class="code" href="a00065.html#a5966f2a6759b0ea52565f88b94496d83">InputDataStream</a>(std::istream&amp; is) :</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;                Parser(), <a class="code" href="a00065.html#a8741a0d01d73d14fe4e27e689233c97b">is_</a>(&amp;is) {</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;        }</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;</div>
<div class="line"><a name="l00053"></a><span class="lineno"><a class="code" href="a00065.html#a38c2e3fae4036a4513167f718b0aa1bd">   53</a></span>&#160;        <a class="code" href="a00065.html#a5966f2a6759b0ea52565f88b94496d83">InputDataStream</a>(std::istream&amp; is, <span class="keyword">const</span> Parser&amp; parser) :</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;                Parser(parser), <a class="code" href="a00065.html#a8741a0d01d73d14fe4e27e689233c97b">is_</a>(&amp;is) {</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;                initInputStream();</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;        }</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;</div>
<div class="line"><a name="l00058"></a><span class="lineno"><a class="code" href="a00065.html#a1654e3e7bede80354c86772a7fa8c185">   58</a></span>&#160;        <a class="code" href="a00065.html#a5966f2a6759b0ea52565f88b94496d83">InputDataStream</a>(<span class="keyword">const</span> <a class="code" href="a00065.html">InputDataStream</a>&amp; other) : Parser(other),</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;                        <a class="code" href="a00065.html#a8741a0d01d73d14fe4e27e689233c97b">is_</a>(other.<a class="code" href="a00065.html#a8741a0d01d73d14fe4e27e689233c97b">is_</a>) {</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;        }</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;        <span class="keyword">template</span> &lt;<span class="keyword">typename</span> Value&gt;</div>
<div class="line"><a name="l00063"></a><span class="lineno"><a class="code" href="a00065.html#ac9a0b1b1c0fbd2068006ca3219f4a027">   63</a></span>&#160;        <a class="code" href="a00065.html">InputDataStream</a>&amp; <a class="code" href="a00065.html#ac9a0b1b1c0fbd2068006ca3219f4a027">operator&gt;&gt;</a>(Value&amp; data) {</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;                *<a class="code" href="a00065.html#a8741a0d01d73d14fe4e27e689233c97b">is_</a> &gt;&gt; data;</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;                <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        }</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;</div>
<div class="line"><a name="l00068"></a><span class="lineno"><a class="code" href="a00065.html#af17e1a368ebdc8bb1e648273ba972297">   68</a></span>&#160;        <a class="code" href="a00065.html">InputDataStream</a>&amp; <a class="code" href="a00065.html#af17e1a368ebdc8bb1e648273ba972297">operator&gt;&gt;</a>(std::ios_base&amp; (*pf)(std::ios_base&amp;)) {</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;                *<a class="code" href="a00065.html#a8741a0d01d73d14fe4e27e689233c97b">is_</a> &gt;&gt; pf;</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;                <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        }</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;</div>
<div class="line"><a name="l00073"></a><span class="lineno"><a class="code" href="a00065.html#a26f9d134b74afdba5ae5eb3a898b5323">   73</a></span>&#160;        <a class="code" href="a00065.html">InputDataStream</a>&amp; <a class="code" href="a00065.html#a26f9d134b74afdba5ae5eb3a898b5323">operator&gt;&gt;</a>(std::ios&amp; (*pf)(std::ios&amp;)) {</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;                *<a class="code" href="a00065.html#a8741a0d01d73d14fe4e27e689233c97b">is_</a> &gt;&gt; pf;</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;                <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;        }</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;</div>
<div class="line"><a name="l00078"></a><span class="lineno"><a class="code" href="a00065.html#a889ffd7c1a61f1366975b49fc20a95ed">   78</a></span>&#160;        <a class="code" href="a00065.html">InputDataStream</a>&amp; <a class="code" href="a00065.html#a889ffd7c1a61f1366975b49fc20a95ed">operator&gt;&gt;</a>(std::istream&amp; (*pf)(std::istream&amp;)) {</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;                *<a class="code" href="a00065.html#a8741a0d01d73d14fe4e27e689233c97b">is_</a> &gt;&gt; pf;</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;                <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;        }</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;</div>
<div class="line"><a name="l00083"></a><span class="lineno"><a class="code" href="a00065.html#a7b65c30c701b4a209baff590366fffa8">   83</a></span>&#160;        <a class="code" href="a00065.html">InputDataStream</a>&amp; <a class="code" href="a00065.html#a7b65c30c701b4a209baff590366fffa8">operator&gt;&gt;</a>(<a class="code" href="a00065.html#ad85dd13d0e5ef6f63cdde9b598d0f511">value_type</a>&amp; data) {</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;                <span class="keywordflow">try</span> {</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;                        Parser::read(*<a class="code" href="a00065.html#a8741a0d01d73d14fe4e27e689233c97b">is_</a>, data);</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;                } <span class="keywordflow">catch</span> (std::istream::failure e) {</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;                }</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;                <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;        }</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;</div>
<div class="line"><a name="l00091"></a><span class="lineno"><a class="code" href="a00065.html#a64ce03d4c9ac90439a8ffb33bf55f01e">   91</a></span>&#160;        <span class="keywordtype">bool</span> <a class="code" href="a00065.html#a64ce03d4c9ac90439a8ffb33bf55f01e">operator!=</a>(<span class="keyword">const</span> <a class="code" href="a00065.html">InputDataStream</a>&amp; other)<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;                <span class="keywordflow">if</span> (<a class="code" href="a00065.html#a8741a0d01d73d14fe4e27e689233c97b">is_</a> &amp;&amp; other.<a class="code" href="a00065.html#a8741a0d01d73d14fe4e27e689233c97b">is_</a>)</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;                        <span class="keywordflow">return</span> *<a class="code" href="a00065.html#a8741a0d01d73d14fe4e27e689233c97b">is_</a> != *other.<a class="code" href="a00065.html#a8741a0d01d73d14fe4e27e689233c97b">is_</a>;</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;                <span class="keywordflow">else</span></div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;                        <span class="keywordflow">return</span> (<a class="code" href="a00065.html#a8741a0d01d73d14fe4e27e689233c97b">is_</a> || other.<a class="code" href="a00065.html#a8741a0d01d73d14fe4e27e689233c97b">is_</a>);</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;        }</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;</div>
<div class="line"><a name="l00098"></a><span class="lineno"><a class="code" href="a00065.html#ac0edd81b598914004cf887c92cfea23f">   98</a></span>&#160;        <span class="keywordtype">bool</span> <a class="code" href="a00065.html#ac0edd81b598914004cf887c92cfea23f">operator!</a>(<span class="keywordtype">void</span>)<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;                <span class="keywordflow">return</span> !*<a class="code" href="a00065.html#a8741a0d01d73d14fe4e27e689233c97b">is_</a>;</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;        }</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;</div>
<div class="line"><a name="l00102"></a><span class="lineno"><a class="code" href="a00065.html#aafe0840bc7e49aafbc1dd381bc15db57">  102</a></span>&#160;        <span class="keywordtype">bool</span> <a class="code" href="a00065.html#aafe0840bc7e49aafbc1dd381bc15db57">good</a>()<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;                <span class="keywordflow">return</span> <a class="code" href="a00065.html#a8741a0d01d73d14fe4e27e689233c97b">is_</a>-&gt;good();</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        }</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;</div>
<div class="line"><a name="l00106"></a><span class="lineno"><a class="code" href="a00065.html#add95b5e757bd2eb029f614ec2539a1ee">  106</a></span>&#160;        <span class="keywordtype">int</span> <a class="code" href="a00065.html#add95b5e757bd2eb029f614ec2539a1ee">peek</a>() {</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;                <span class="keywordflow">return</span> <a class="code" href="a00065.html#a8741a0d01d73d14fe4e27e689233c97b">is_</a>-&gt;peek();</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;        }</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;};</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;</div>
<div class="line"><a name="l00111"></a><span class="lineno"><a class="code" href="a00093.html">  111</a></span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> Parser&gt; <span class="keyword">class </span><a class="code" href="a00093.html">OutputDataStream</a> : <span class="keyword">public</span> Parser {</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00114"></a><span class="lineno"><a class="code" href="a00093.html#a50bb6e89bced051b3a974ef90ba6d3da">  114</a></span>&#160;        <span class="keyword">typedef</span> <span class="keyword">typename</span> Parser::value_type <a class="code" href="a00093.html#a50bb6e89bced051b3a974ef90ba6d3da">value_type</a>;</div>
<div class="line"><a name="l00115"></a><span class="lineno"><a class="code" href="a00093.html#a562879a7641aca816b8f25737887f75e">  115</a></span>&#160;        std::ostream* <a class="code" href="a00093.html#a562879a7641aca816b8f25737887f75e">os_</a>;</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;</div>
<div class="line"><a name="l00117"></a><span class="lineno"><a class="code" href="a00093.html#a7528beb33491ae1afd56167620170703">  117</a></span>&#160;        <a class="code" href="a00093.html#a7528beb33491ae1afd56167620170703">OutputDataStream</a>(std::ostream&amp; os) :</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;                Parser(), <a class="code" href="a00093.html#a562879a7641aca816b8f25737887f75e">os_</a>(&amp;os) {</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;        }</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;</div>
<div class="line"><a name="l00121"></a><span class="lineno"><a class="code" href="a00093.html#a5bd153e106c72478b60a4ced4e244d83">  121</a></span>&#160;        <a class="code" href="a00093.html#a7528beb33491ae1afd56167620170703">OutputDataStream</a>(std::ostream&amp; os, <span class="keyword">const</span> Parser&amp; parser) :</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;                Parser(parser), <a class="code" href="a00093.html#a562879a7641aca816b8f25737887f75e">os_</a>(&amp;os) {</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;        }</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;</div>
<div class="line"><a name="l00125"></a><span class="lineno"><a class="code" href="a00093.html#a251206bd9b6b06d603801d10aaf86911">  125</a></span>&#160;        <a class="code" href="a00093.html#a7528beb33491ae1afd56167620170703">OutputDataStream</a>(<span class="keyword">const</span> <a class="code" href="a00093.html">OutputDataStream</a>&amp; other) : Parser(other),</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;                        <a class="code" href="a00093.html#a562879a7641aca816b8f25737887f75e">os_</a>(other.<a class="code" href="a00093.html#a562879a7641aca816b8f25737887f75e">os_</a>) {</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;        }</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;        <span class="keyword">template</span> &lt;<span class="keyword">typename</span> Value&gt;</div>
<div class="line"><a name="l00130"></a><span class="lineno"><a class="code" href="a00093.html#a3772f475bd2c6c12751223daf431407c">  130</a></span>&#160;        <a class="code" href="a00093.html">OutputDataStream</a>&amp; <a class="code" href="a00093.html#a3772f475bd2c6c12751223daf431407c">operator&lt;&lt;</a>(<span class="keyword">const</span> Value&amp; data) {</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;                *<a class="code" href="a00093.html#a562879a7641aca816b8f25737887f75e">os_</a> &lt;&lt; data;</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;                <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;        }</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;</div>
<div class="line"><a name="l00135"></a><span class="lineno"><a class="code" href="a00093.html#a0e98e0938bd2b328d0ab975e20e1dcfd">  135</a></span>&#160;        <a class="code" href="a00093.html">OutputDataStream</a>&amp; <a class="code" href="a00093.html#a0e98e0938bd2b328d0ab975e20e1dcfd">operator&lt;&lt;</a>(std::ios&amp; (*pf)(std::ios&amp;)) {</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;                *<a class="code" href="a00093.html#a562879a7641aca816b8f25737887f75e">os_</a> &lt;&lt; pf;</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;                <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;        }</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;</div>
<div class="line"><a name="l00140"></a><span class="lineno"><a class="code" href="a00093.html#a22b78f578ccc25eb13a12f5a375c0895">  140</a></span>&#160;        <a class="code" href="a00093.html">OutputDataStream</a>&amp; <a class="code" href="a00093.html#a22b78f578ccc25eb13a12f5a375c0895">operator&lt;&lt;</a>(std::ios_base&amp; (*pf)(std::ios_base&amp;)) {</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;                *<a class="code" href="a00093.html#a562879a7641aca816b8f25737887f75e">os_</a> &lt;&lt; pf;</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;                <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;        }</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;</div>
<div class="line"><a name="l00145"></a><span class="lineno"><a class="code" href="a00093.html#a1984557585bcee545306dbf699f3fc42">  145</a></span>&#160;        <a class="code" href="a00093.html">OutputDataStream</a>&amp; <a class="code" href="a00093.html#a1984557585bcee545306dbf699f3fc42">operator&lt;&lt;</a>(std::ostream&amp; (*pf)(std::ostream&amp;)) {</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;                *<a class="code" href="a00093.html#a562879a7641aca816b8f25737887f75e">os_</a> &lt;&lt; pf;</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;                <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;        }</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;</div>
<div class="line"><a name="l00150"></a><span class="lineno"><a class="code" href="a00093.html#aec852e6f08fefdfa1e683689dbae9c4f">  150</a></span>&#160;        <a class="code" href="a00093.html">OutputDataStream</a>&amp; <a class="code" href="a00093.html#aec852e6f08fefdfa1e683689dbae9c4f">operator&lt;&lt;</a>(<span class="keyword">const</span> <a class="code" href="a00093.html#a50bb6e89bced051b3a974ef90ba6d3da">value_type</a>&amp; data) {</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;                Parser::write(*<a class="code" href="a00093.html#a562879a7641aca816b8f25737887f75e">os_</a>, data);</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;                <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;        }</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;</div>
<div class="line"><a name="l00156"></a><span class="lineno"><a class="code" href="a00093.html#a47ba54b7f3e38c006002e419c1e814e8">  156</a></span>&#160;        <span class="keywordtype">bool</span> <a class="code" href="a00093.html#a47ba54b7f3e38c006002e419c1e814e8">operator!=</a>(<span class="keyword">const</span> <a class="code" href="a00093.html">OutputDataStream</a>&amp; other)<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;                <span class="keywordflow">if</span> (<a class="code" href="a00093.html#a562879a7641aca816b8f25737887f75e">os_</a> &amp;&amp; other.<a class="code" href="a00093.html#a562879a7641aca816b8f25737887f75e">os_</a>)</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;                        <span class="keywordflow">return</span> *<a class="code" href="a00093.html#a562879a7641aca816b8f25737887f75e">os_</a> != *other.<a class="code" href="a00093.html#a562879a7641aca816b8f25737887f75e">os_</a>;</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;                <span class="keywordflow">else</span></div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;                        <span class="keywordflow">return</span> (<a class="code" href="a00093.html#a562879a7641aca816b8f25737887f75e">os_</a> || other.<a class="code" href="a00093.html#a562879a7641aca816b8f25737887f75e">os_</a>);</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;        }</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;};</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;</div>
<div class="line"><a name="l00164"></a><span class="lineno"><a class="code" href="a00066.html">  164</a></span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> Parser&gt; <span class="keyword">class </span><a class="code" href="a00066.html">InputOutputDataStream</a> : <span class="keyword">public</span> Parser {</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00167"></a><span class="lineno"><a class="code" href="a00066.html#a011585458393ff45b169849540d5bfa9">  167</a></span>&#160;        <span class="keyword">typedef</span> <span class="keyword">typename</span> Parser::value_type <a class="code" href="a00066.html#a011585458393ff45b169849540d5bfa9">value_type</a>;</div>
<div class="line"><a name="l00168"></a><span class="lineno"><a class="code" href="a00066.html#a0c0c89ac051ba58c7a656dc26a9ec6de">  168</a></span>&#160;        std::iostream* <a class="code" href="a00066.html#a0c0c89ac051ba58c7a656dc26a9ec6de">ios_</a>;</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;</div>
<div class="line"><a name="l00170"></a><span class="lineno"><a class="code" href="a00066.html#aaa4bcd1d2e8d5e3ce1b0188db2540432">  170</a></span>&#160;        <a class="code" href="a00066.html#aaa4bcd1d2e8d5e3ce1b0188db2540432">InputOutputDataStream</a>(std::iostream&amp; ios) :</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;                Parser(), <a class="code" href="a00066.html#a0c0c89ac051ba58c7a656dc26a9ec6de">ios_</a>(&amp;ios) {</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;        }</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;</div>
<div class="line"><a name="l00174"></a><span class="lineno"><a class="code" href="a00066.html#a9965aa6376e80788ffe90e6a3201c554">  174</a></span>&#160;        <a class="code" href="a00066.html#aaa4bcd1d2e8d5e3ce1b0188db2540432">InputOutputDataStream</a>(std::iostream&amp; ios, <span class="keyword">const</span> Parser&amp; parser) :</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;                Parser(parser), <a class="code" href="a00066.html#a0c0c89ac051ba58c7a656dc26a9ec6de">ios_</a>(&amp;ios) {</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;        }</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;</div>
<div class="line"><a name="l00178"></a><span class="lineno"><a class="code" href="a00066.html#a830b1cf98afb481a8fc54f2ab239d7c7">  178</a></span>&#160;        <a class="code" href="a00066.html#aaa4bcd1d2e8d5e3ce1b0188db2540432">InputOutputDataStream</a>(<span class="keyword">const</span> <a class="code" href="a00066.html">InputOutputDataStream</a>&amp; other) : Parser(other),</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;                        <a class="code" href="a00066.html#a0c0c89ac051ba58c7a656dc26a9ec6de">ios_</a>(other.<a class="code" href="a00066.html#a0c0c89ac051ba58c7a656dc26a9ec6de">ios_</a>) {</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;        }</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;        <span class="keyword">template</span> &lt;<span class="keyword">typename</span> Value&gt;</div>
<div class="line"><a name="l00183"></a><span class="lineno"><a class="code" href="a00066.html#af3f1f886ffa7cb39a1bab8c24963121c">  183</a></span>&#160;        <a class="code" href="a00066.html">InputOutputDataStream</a>&amp; <a class="code" href="a00066.html#af3f1f886ffa7cb39a1bab8c24963121c">operator&gt;&gt;</a>(Value&amp; data) {</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;                <span class="keywordflow">try</span> {</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;                        *<a class="code" href="a00066.html#a0c0c89ac051ba58c7a656dc26a9ec6de">ios_</a> &gt;&gt; data;</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;                } <span class="keywordflow">catch</span> (std::istream::failure e) {</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;                }</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;                <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;        }</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;</div>
<div class="line"><a name="l00191"></a><span class="lineno"><a class="code" href="a00066.html#adbe16884fb2791cc5cd331f4d1f8a01a">  191</a></span>&#160;        <a class="code" href="a00066.html">InputOutputDataStream</a>&amp; <a class="code" href="a00066.html#adbe16884fb2791cc5cd331f4d1f8a01a">operator&gt;&gt;</a>(<a class="code" href="a00066.html#a011585458393ff45b169849540d5bfa9">value_type</a>&amp; data) {</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;                <span class="keywordflow">try</span> {</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;                        Parser::read(*<a class="code" href="a00066.html#a0c0c89ac051ba58c7a656dc26a9ec6de">ios_</a>, data);</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;                } <span class="keywordflow">catch</span> (std::istream::failure e) {</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;                }</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;                <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;        }</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;        <span class="keyword">template</span> &lt;<span class="keyword">typename</span> Value&gt;</div>
<div class="line"><a name="l00200"></a><span class="lineno"><a class="code" href="a00066.html#a24834ba11126bee8117e6eba8945004f">  200</a></span>&#160;        <a class="code" href="a00066.html">InputOutputDataStream</a>&amp; <a class="code" href="a00066.html#a24834ba11126bee8117e6eba8945004f">operator&lt;&lt;</a>(<span class="keyword">const</span> Value&amp; data) {</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;                *<a class="code" href="a00066.html#a0c0c89ac051ba58c7a656dc26a9ec6de">ios_</a> &lt;&lt; data;</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;                <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;        }</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;</div>
<div class="line"><a name="l00205"></a><span class="lineno"><a class="code" href="a00066.html#afcab9cd0001b613940c1f96b62469b18">  205</a></span>&#160;        <a class="code" href="a00066.html">InputOutputDataStream</a>&amp; <a class="code" href="a00066.html#afcab9cd0001b613940c1f96b62469b18">operator&lt;&lt;</a>(<span class="keyword">const</span> <a class="code" href="a00066.html#a011585458393ff45b169849540d5bfa9">value_type</a>&amp; data) {</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;                Parser::write(*<a class="code" href="a00066.html#a0c0c89ac051ba58c7a656dc26a9ec6de">ios_</a>, data);</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;                <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;        }</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;</div>
<div class="line"><a name="l00210"></a><span class="lineno"><a class="code" href="a00066.html#a14e0bb9911be6c4aa87dd92792d38da2">  210</a></span>&#160;        <span class="keywordtype">bool</span> <a class="code" href="a00066.html#a14e0bb9911be6c4aa87dd92792d38da2">operator!=</a>(<span class="keyword">const</span> <a class="code" href="a00066.html">InputOutputDataStream</a>&amp; other)<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;                <span class="keywordflow">if</span> (<a class="code" href="a00066.html#a0c0c89ac051ba58c7a656dc26a9ec6de">ios_</a> &amp;&amp; other.<a class="code" href="a00066.html#a0c0c89ac051ba58c7a656dc26a9ec6de">ios_</a>)</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;                        <span class="keywordflow">return</span> *<a class="code" href="a00066.html#a0c0c89ac051ba58c7a656dc26a9ec6de">ios_</a> != *other.<a class="code" href="a00066.html#a0c0c89ac051ba58c7a656dc26a9ec6de">ios_</a>;</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;                <span class="keywordflow">else</span></div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;                        <span class="keywordflow">return</span> (<a class="code" href="a00066.html#a0c0c89ac051ba58c7a656dc26a9ec6de">ios_</a> || other.<a class="code" href="a00066.html#a0c0c89ac051ba58c7a656dc26a9ec6de">ios_</a>);</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;        }</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;</div>
<div class="line"><a name="l00217"></a><span class="lineno"><a class="code" href="a00066.html#a3478b8b307ed0f7d29ccd76b76c9d385">  217</a></span>&#160;        <span class="keywordtype">bool</span> <a class="code" href="a00066.html#a3478b8b307ed0f7d29ccd76b76c9d385">good</a>()<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;                <span class="keywordflow">return</span> <a class="code" href="a00066.html#a0c0c89ac051ba58c7a656dc26a9ec6de">ios_</a>-&gt;good();</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;        }</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;</div>
<div class="line"><a name="l00221"></a><span class="lineno"><a class="code" href="a00066.html#a98060b5da07a7e653173501cd543e5e1">  221</a></span>&#160;        <span class="keywordtype">int</span> <a class="code" href="a00066.html#a98060b5da07a7e653173501cd543e5e1">peek</a>() {</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;                <span class="keywordflow">return</span> <a class="code" href="a00066.html#a0c0c89ac051ba58c7a656dc26a9ec6de">ios_</a>-&gt;peek();</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;        }</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;};</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;</div>
<div class="line"><a name="l00227"></a><span class="lineno"><a class="code" href="a00170.html#a9d1e8fc702741244acca28fcb66a43cf">  227</a></span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> Parser&gt; <a class="code" href="a00065.html">InputDataStream&lt;Parser&gt;</a> <a class="code" href="a00170.html#a9d1e8fc702741244acca28fcb66a43cf">make_input_data_stream</a>(std::istream&amp; is) {</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="a00065.html">InputDataStream&lt;Parser&gt;</a>(is);</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;}</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;</div>
<div class="line"><a name="l00231"></a><span class="lineno"><a class="code" href="a00170.html#a59368119d1269a53ab4df86ddaa48be1">  231</a></span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> Parser&gt; <a class="code" href="a00065.html">InputDataStream&lt;Parser&gt;</a> <a class="code" href="a00170.html#a9d1e8fc702741244acca28fcb66a43cf">make_input_data_stream</a>(std::istream&amp; is, <span class="keyword">const</span> Parser&amp; parser) {</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="a00065.html">InputDataStream&lt;Parser&gt;</a>(is, parser);</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;}</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;</div>
<div class="line"><a name="l00236"></a><span class="lineno"><a class="code" href="a00170.html#a2addf6f6d613b40c6f598ed3d68bf12a">  236</a></span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> Parser&gt; <a class="code" href="a00093.html">OutputDataStream&lt;Parser&gt;</a> <a class="code" href="a00170.html#a2addf6f6d613b40c6f598ed3d68bf12a">make_output_data_stream</a>(std::ostream&amp; os) {</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="a00093.html">OutputDataStream&lt;Parser&gt;</a>(os);</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;}</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;</div>
<div class="line"><a name="l00240"></a><span class="lineno"><a class="code" href="a00170.html#a91c35588757bb0adbbf58e779f837dc6">  240</a></span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> Parser&gt; <a class="code" href="a00093.html">OutputDataStream&lt;Parser&gt;</a> <a class="code" href="a00170.html#a2addf6f6d613b40c6f598ed3d68bf12a">make_output_data_stream</a>(std::ostream&amp; os, <span class="keyword">const</span> Parser&amp; parser) {</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="a00093.html">OutputDataStream&lt;Parser&gt;</a>(os, parser);</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;}</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;</div>
<div class="line"><a name="l00244"></a><span class="lineno"><a class="code" href="a00170.html#aace53316a3a2d650a2612c45fea962cc">  244</a></span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> Parser&gt; <a class="code" href="a00066.html">InputOutputDataStream&lt;Parser&gt;</a> <a class="code" href="a00170.html#aace53316a3a2d650a2612c45fea962cc">make_input_output_data_stream</a>(std::iostream&amp; ios) {</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="a00066.html">InputOutputDataStream&lt;Parser&gt;</a>(ios);</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;}</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;</div>
<div class="line"><a name="l00248"></a><span class="lineno"><a class="code" href="a00170.html#a554a2aaae3903a0ab4dfeef4f6ddbaa7">  248</a></span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> Parser&gt; <a class="code" href="a00066.html">InputOutputDataStream&lt;Parser&gt;</a> <a class="code" href="a00170.html#aace53316a3a2d650a2612c45fea962cc">make_input_output_data_stream</a>(std::iostream&amp; ios, <span class="keyword">const</span> Parser&amp; parser) {</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="a00066.html">InputOutputDataStream&lt;Parser&gt;</a>(ios, parser);</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;}</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;</div>
<div class="line"><a name="l00252"></a><span class="lineno"><a class="code" href="a00068.html">  252</a></span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">class</span> T, <span class="keyword">class</span> InputDataStream, <span class="keyword">class</span> Distance = std::ptrdiff_t&gt; <span class="keyword">class </span><a class="code" href="a00068.html">istream_iterator</a>: <span class="keyword">public</span> std::iterator&lt;</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;                std::input_iterator_tag, T, Distance, const T*, const T&amp;&gt; {</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;        <a class="code" href="a00065.html">InputDataStream</a>* stream_;</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;        T value_;</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;        <span class="keywordtype">void</span> read() {</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;                <span class="keywordflow">if</span>(stream_ &amp;&amp; !(*stream_ &gt;&gt; value_))</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;                        stream_ = <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;        }</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00263"></a><span class="lineno"><a class="code" href="a00068.html#abc240b0a51b918450aa3b5e97c7c6d50">  263</a></span>&#160;        <a class="code" href="a00068.html#abc240b0a51b918450aa3b5e97c7c6d50">istream_iterator</a>() :</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;                        stream_(), value_() {</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;        }</div>
<div class="line"><a name="l00266"></a><span class="lineno"><a class="code" href="a00068.html#a76b0cd070491582f08cab277bb602227">  266</a></span>&#160;        <a class="code" href="a00068.html#abc240b0a51b918450aa3b5e97c7c6d50">istream_iterator</a>(<a class="code" href="a00065.html">InputDataStream</a>&amp; stream) :</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;                        stream_(&amp;stream), value_() {</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;                read();</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;        }</div>
<div class="line"><a name="l00270"></a><span class="lineno"><a class="code" href="a00068.html#af7e0b086c56cebaa29cce37fd355929b">  270</a></span>&#160;        <a class="code" href="a00068.html#abc240b0a51b918450aa3b5e97c7c6d50">istream_iterator</a>(<span class="keyword">const</span> <a class="code" href="a00068.html">istream_iterator</a>&amp; other) :</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;                        stream_(other.stream_), value_(other.value_) {</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;        }</div>
<div class="line"><a name="l00273"></a><span class="lineno"><a class="code" href="a00068.html#ac0ec9f85ae869bc596a793cf9efcf6fd">  273</a></span>&#160;        <a class="code" href="a00068.html#ac0ec9f85ae869bc596a793cf9efcf6fd">~istream_iterator</a>() {</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;        }</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;</div>
<div class="line"><a name="l00276"></a><span class="lineno"><a class="code" href="a00068.html#a0053be4f6da3b9defd9b213876d6d50f">  276</a></span>&#160;        <span class="keyword">const</span> T&amp; <a class="code" href="a00068.html#a0053be4f6da3b9defd9b213876d6d50f">operator*</a>()<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;                <span class="keywordflow">return</span> value_;</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;        }</div>
<div class="line"><a name="l00279"></a><span class="lineno"><a class="code" href="a00068.html#a5198ba0f42cba2ef11857c6d3889b668">  279</a></span>&#160;        <span class="keyword">const</span> T* <a class="code" href="a00068.html#a5198ba0f42cba2ef11857c6d3889b668">operator-&gt;</a>()<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;                <span class="keywordflow">return</span> &amp;value_;</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;        }</div>
<div class="line"><a name="l00282"></a><span class="lineno"><a class="code" href="a00068.html#a4f00e581d9d3d76e3bd95cf7f84b10fa">  282</a></span>&#160;        <a class="code" href="a00068.html">istream_iterator&lt;T, InputDataStream, Distance&gt;</a>&amp; <a class="code" href="a00068.html#a4f00e581d9d3d76e3bd95cf7f84b10fa">operator++</a>() {</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;                read();</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;                <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;        }</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;<span class="comment">//      istream_iterator&lt;T, InputDataStream, Distance&gt; operator++(int) {</span></div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;<span class="comment">//              istream_iterator&lt;T, InputDataStream, Distance&gt; tmp = *this;</span></div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;<span class="comment">//              ++*this;</span></div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;<span class="comment">//              return tmp;</span></div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;<span class="comment">//      }</span></div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;</div>
<div class="line"><a name="l00292"></a><span class="lineno"><a class="code" href="a00068.html#a1e6423e212aed9d6d751a7507e7d57d3">  292</a></span>&#160;        <span class="keywordtype">bool</span> <a class="code" href="a00068.html#a1e6423e212aed9d6d751a7507e7d57d3">operator!=</a>(<span class="keyword">const</span> <a class="code" href="a00068.html">istream_iterator</a>&amp; other)<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;                <span class="keywordflow">if</span> (stream_ &amp;&amp; other.stream_)</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;                        <span class="keywordflow">return</span> (*stream_ != *other.stream_);</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;                <span class="keywordflow">else</span></div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;                        <span class="keywordflow">return</span> (stream_ || other.stream_);</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;        }</div>
<div class="line"><a name="l00298"></a><span class="lineno"><a class="code" href="a00068.html#afd13935b454d8062fced5778ce275921">  298</a></span>&#160;        <span class="keywordtype">bool</span> <a class="code" href="a00068.html#afd13935b454d8062fced5778ce275921">operator==</a>(<span class="keyword">const</span> <a class="code" href="a00068.html">istream_iterator</a>&amp; other)<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;                <span class="keywordflow">return</span> !(*<span class="keyword">this</span> != other);</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;        }</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;};</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;</div>
<div class="line"><a name="l00303"></a><span class="lineno"><a class="code" href="a00092.html">  303</a></span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">class</span> T, <span class="keyword">class</span> OutputDataStream, <span class="keyword">class</span> Distance = std::ptrdiff_t&gt; <span class="keyword">class </span><a class="code" href="a00092.html">ostream_iterator</a>: <span class="keyword">public</span> std::iterator&lt;</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;                std::output_iterator_tag, T, Distance, const T*, const T&amp;&gt; {</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;        <a class="code" href="a00093.html">OutputDataStream</a>* stream_;</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;        T value_;</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;        <span class="keywordtype">char</span> separator_;</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;        <span class="keywordtype">bool</span> changed_;</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00311"></a><span class="lineno"><a class="code" href="a00092.html#a4aa327c9d143e4c4fe5aee82cdecdff5">  311</a></span>&#160;        <a class="code" href="a00092.html#a4aa327c9d143e4c4fe5aee82cdecdff5">ostream_iterator</a>() :</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;                stream_(0), changed_(false) {</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;        }</div>
<div class="line"><a name="l00314"></a><span class="lineno"><a class="code" href="a00092.html#a74261b15bf94df8726832fa6dd16d5de">  314</a></span>&#160;        <a class="code" href="a00092.html#a4aa327c9d143e4c4fe5aee82cdecdff5">ostream_iterator</a>(<a class="code" href="a00093.html">OutputDataStream</a>&amp; stream, <span class="keywordtype">char</span> separator = <span class="charliteral">&#39;\n&#39;</span>) :</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;                stream_(&amp;stream), separator_(separator), changed_(false) {</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;        }</div>
<div class="line"><a name="l00317"></a><span class="lineno"><a class="code" href="a00092.html#a1b8581ea43e32bc68fca0c60b12e35b4">  317</a></span>&#160;        <a class="code" href="a00092.html#a4aa327c9d143e4c4fe5aee82cdecdff5">ostream_iterator</a>(<span class="keyword">const</span> <a class="code" href="a00092.html">ostream_iterator</a>&amp; other) :</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;                stream_(other.stream_), value_(other.value_), separator_(</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;                                        other.separator_), changed_(other.changed_) {</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;        }</div>
<div class="line"><a name="l00321"></a><span class="lineno"><a class="code" href="a00092.html#a38fd8e43fe97bfce444e597a13527dcf">  321</a></span>&#160;        <a class="code" href="a00092.html#a38fd8e43fe97bfce444e597a13527dcf">~ostream_iterator</a>() {</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;                ++(*this);</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;        }</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;</div>
<div class="line"><a name="l00325"></a><span class="lineno"><a class="code" href="a00092.html#a5ba5846af49a469cac6ce81e83573f08">  325</a></span>&#160;        T&amp; <a class="code" href="a00092.html#a5ba5846af49a469cac6ce81e83573f08">operator*</a>() {</div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;                changed_ = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;                <span class="keywordflow">return</span> value_;</div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;        }</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;</div>
<div class="line"><a name="l00330"></a><span class="lineno"><a class="code" href="a00092.html#a148b105b6dfa2965a35b9abc2c939dbc">  330</a></span>&#160;        <a class="code" href="a00092.html">ostream_iterator&lt;T, OutputDataStream, Distance&gt;</a>&amp; <a class="code" href="a00092.html#a148b105b6dfa2965a35b9abc2c939dbc">operator++</a>() {</div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;                <span class="keywordflow">if</span>(changed_) {</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;                        changed_ =  <span class="keyword">false</span>;</div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;                        *stream_ &lt;&lt; value_ &lt;&lt; separator_;</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;                }</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;                <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;        }</div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;</div>
<div class="line"><a name="l00338"></a><span class="lineno"><a class="code" href="a00092.html#acab579ba456fbbe4dd59d2d101bc6be6">  338</a></span>&#160;        <a class="code" href="a00092.html">ostream_iterator&lt;T, OutputDataStream, Distance&gt;</a> <a class="code" href="a00092.html#acab579ba456fbbe4dd59d2d101bc6be6">operator++</a>(<span class="keywordtype">int</span>) {</div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;                ++(*this);</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;                <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;        }</div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;</div>
<div class="line"><a name="l00343"></a><span class="lineno"><a class="code" href="a00092.html#a36a20a93b477fc435214162868fa10b8">  343</a></span>&#160;        <span class="keywordtype">bool</span> <a class="code" href="a00092.html#a36a20a93b477fc435214162868fa10b8">operator!=</a>(<span class="keyword">const</span> <a class="code" href="a00092.html">ostream_iterator</a>&amp; other)<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;                <span class="keywordflow">if</span> (stream_ &amp;&amp; other.stream_)</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;                        <span class="keywordflow">return</span> (*stream_ != *other.stream_);</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;                <span class="keywordflow">else</span></div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;                        <span class="keywordflow">return</span> (stream_ || other.stream_);</div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;        }</div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;</div>
<div class="line"><a name="l00350"></a><span class="lineno"><a class="code" href="a00092.html#a9357f4824bd638246e541f06f3e114b2">  350</a></span>&#160;        <span class="keywordtype">bool</span> <a class="code" href="a00092.html#a9357f4824bd638246e541f06f3e114b2">operator==</a>(<span class="keyword">const</span> <a class="code" href="a00092.html">ostream_iterator</a>&amp; other)<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;                <span class="keywordflow">return</span> !(*<span class="keyword">this</span> != other);</div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;        }</div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;};</div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;</div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> InputDataStream&gt;</div>
<div class="line"><a name="l00356"></a><span class="lineno"><a class="code" href="a00170.html#ab7d484df343150af7f8008d5ce9f1a09">  356</a></span>&#160;<a class="code" href="a00068.html">istream_iterator&lt;typename InputDataStream::value_type, InputDataStream&gt;</a> <a class="code" href="a00170.html#ab7d484df343150af7f8008d5ce9f1a09">make_input_data_begin</a>(<a class="code" href="a00065.html">InputDataStream</a>&amp; inputDataStream) {</div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="a00068.html">istream_iterator&lt;typename InputDataStream::value_type, InputDataStream&gt;</a>(inputDataStream);</div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;}</div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;</div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> InputDataStream&gt;</div>
<div class="line"><a name="l00361"></a><span class="lineno"><a class="code" href="a00170.html#a5a6f1a715ac4002315332304c17eee36">  361</a></span>&#160;<a class="code" href="a00068.html">istream_iterator&lt;typename InputDataStream::value_type, InputDataStream&gt;</a> <a class="code" href="a00170.html#a5a6f1a715ac4002315332304c17eee36">make_input_data_end</a>(<a class="code" href="a00065.html">InputDataStream</a>&amp;) {</div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="a00068.html">istream_iterator&lt;typename InputDataStream::value_type, InputDataStream&gt;</a>();</div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;}</div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;</div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> OutputDataStream&gt;</div>
<div class="line"><a name="l00366"></a><span class="lineno"><a class="code" href="a00170.html#a0b23f6891f675d9e85f308c75a3d69bf">  366</a></span>&#160;<a class="code" href="a00092.html">ostream_iterator&lt;typename OutputDataStream::value_type, OutputDataStream&gt;</a> <a class="code" href="a00170.html#a0b23f6891f675d9e85f308c75a3d69bf">make_output_iterator</a>(</div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;                <a class="code" href="a00093.html">OutputDataStream</a>&amp; outputDataStream) {</div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="a00092.html">ostream_iterator&lt;typename OutputDataStream::value_type, OutputDataStream&gt;</a>(</div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;                        outputDataStream);</div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;}</div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;}</div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;</div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;</div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.3.1
</small></address>
</body>
</html>
