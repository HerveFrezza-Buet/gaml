<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.3.1"/>
<title>gaml-1.10: gamlConfusion.hpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">gaml-1.10
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.3.1 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="namespaces.html"><span>Namespaces</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
      <li><a href="examples.html"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.html">src</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">gamlConfusion.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="a00146.html">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="preprocessor">#pragma once</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">/*</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> *   Copyright (C) 2012,  Supelec</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> *   Author : Hervé Frezza-Buet, Frédéric Pennerath </span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> *   Contributor :</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> *   This library is free software; you can redistribute it and/or</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> *   modify it under the terms of the GNU General Public</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *   License (GPL) as published by the Free Software Foundation; either</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> *   version 3 of the License, or any later version.</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> *   </span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *   This library is distributed in the hope that it will be useful,</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> *   but WITHOUT ANY WARRANTY; without even the implied warranty of</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> *   General Public License for more details.</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> *   </span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> *   You should have received a copy of the GNU General Public</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> *   License along with this library; if not, write to the Free Software</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> *   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="comment"> *   Contact : herve.frezza-buet@supelec.fr, frederic.pennerath@supelec.fr</span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;</div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &lt;map&gt;</span></div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &lt;set&gt;</span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &lt;utility&gt;</span></div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="a00148.html">gamlException.hpp</a>&gt;</span></div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;</div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="keyword">namespace </span>gaml {</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;      </div>
<div class="line"><a name="l00036"></a><span class="lineno"><a class="code" href="a00174.html">   36</a></span>&#160;  <span class="keyword">namespace </span>classification {</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> CLASS&gt;</div>
<div class="line"><a name="l00042"></a><span class="lineno"><a class="code" href="a00036.html">   42</a></span>&#160;    <span class="keyword">class </span><a class="code" href="a00036.html" title="This computes a confusion matrix.">Confusion</a> {</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <span class="keyword">public</span>:</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;      </div>
<div class="line"><a name="l00045"></a><span class="lineno"><a class="code" href="a00036.html#a825793ad622531ecec2a593c3553e5a1">   45</a></span>&#160;      <span class="keyword">typedef</span> CLASS <a class="code" href="a00036.html#a825793ad622531ecec2a593c3553e5a1">class_type</a>;</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <span class="keyword">private</span>:</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;      <span class="keyword">typedef</span> std::map&lt;std::pair&lt;class_type,class_type&gt;,<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>&gt; matrix_type;</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;      <span class="keyword">typedef</span> std::map&lt;class_type,std::pair&lt;unsigned int,unsigned int&gt; &gt; frequencies_type;</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;      <span class="comment">// matrix[a,b] = probability that classifiers says b whereas real label is a.</span></div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;      matrix_type matrix;</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;      <span class="comment">// sums[a].first  = \sum_i matrix[a,i]</span></div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;      <span class="comment">// sums[b].second = \sum_i matrix[i,b]</span></div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;      frequencies_type sums; </div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;      <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> nb_samples;</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;</div>
<div class="line"><a name="l00062"></a><span class="lineno"><a class="code" href="a00036.html#a43317c9af936b4a572f377b18f6e973c">   62</a></span>&#160;      <span class="keyword">friend</span> std::ostream&amp; operator&lt;&lt;(std::ostream&amp; os, const Confusion&lt;CLASS&gt;&amp; m) {</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        <span class="keyword">typename</span> matrix_type::const_iterator      miter,mend;</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        <span class="keyword">typename</span> frequencies_type::const_iterator fiter,fend;</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        os &lt;&lt; m.nb_samples &lt;&lt; std::endl;</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;        os &lt;&lt; m.sums.size() &lt;&lt; std::endl;</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        <span class="keywordflow">for</span>(fiter = m.sums.begin(), fend = m.sums.end(); fiter != fend; ++fiter)</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;          os &lt;&lt; (*fiter).first &lt;&lt; <span class="charliteral">&#39; &#39;</span> &lt;&lt; (*fiter).second.first &lt;&lt; <span class="charliteral">&#39; &#39;</span> &lt;&lt;  (*fiter).second.second &lt;&lt; <span class="charliteral">&#39; &#39;</span>;</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        os &lt;&lt; std::endl;</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;        os &lt;&lt; m.matrix.size() &lt;&lt; std::endl;</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;        <span class="keywordflow">for</span>(miter = m.matrix.begin(), mend = m.matrix.end(); miter !=mend; ++miter)</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;          os &lt;&lt; (*miter).first.first &lt;&lt; <span class="charliteral">&#39; &#39;</span> &lt;&lt; (*miter).first.second &lt;&lt; <span class="charliteral">&#39; &#39;</span> &lt;&lt; (*miter).second &lt;&lt; <span class="charliteral">&#39; &#39;</span>;</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;        </div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        <span class="keywordflow">return</span> os;</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;      }</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;</div>
<div class="line"><a name="l00080"></a><span class="lineno"><a class="code" href="a00036.html#af61163006342de3a61f386f27de1f5db">   80</a></span>&#160;      <span class="keyword">friend</span> std::istream&amp; <a class="code" href="a00036.html#af61163006342de3a61f386f27de1f5db">operator&gt;&gt;</a>(std::istream&amp; is, <a class="code" href="a00036.html" title="This computes a confusion matrix.">Confusion&lt;CLASS&gt;</a>&amp; m) {</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;        <a class="code" href="a00036.html#a825793ad622531ecec2a593c3553e5a1">class_type</a> a,b;</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> x,y;</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i,size;</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;        m.<a class="code" href="a00036.html#ae0d9ed24a04a3d49655de786756997e9">clear</a>();</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;        is &gt;&gt; m.nb_samples;</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;        </div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;        is &gt;&gt; size;</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;        <span class="keywordflow">for</span>(i=0;i&lt;size;++i) {</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;          is &gt;&gt; a &gt;&gt; x &gt;&gt; y;</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;          m.sums[a] = std::pair&lt;unsigned int,unsigned int&gt;(x,y);</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;        }</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;        is &gt;&gt; size;</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;        <span class="keywordflow">for</span>(i=0;i&lt;size;++i) {</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;          is &gt;&gt; a &gt;&gt; b &gt;&gt; x;</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;          m.matrix[std::pair&lt;class_type,class_type&gt;(a,b)] = x;</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;        }</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;        <span class="keywordflow">return</span> is;</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;      }</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;      </div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;      <span class="keywordtype">void</span> checkSamples(<span class="keyword">const</span> <span class="keywordtype">char</span>* method)<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;        <span class="keywordflow">if</span>(nb_samples==0)</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;          <span class="keywordflow">throw</span> <a class="code" href="a00048.html">exception::EmptyConfusionMatrix</a>(std::string(<span class="stringliteral">&quot;in method Confusion::&quot;</span>)+std::string(method));</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;      }</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;      <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> confus(<span class="keyword">const</span> <a class="code" href="a00036.html#a825793ad622531ecec2a593c3553e5a1">class_type</a>&amp; a,<span class="keyword">const</span> <a class="code" href="a00036.html#a825793ad622531ecec2a593c3553e5a1">class_type</a>&amp; b)<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;        std::pair&lt;class_type,class_type&gt; key(a,b);</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;        <span class="keyword">typename</span> matrix_type::const_iterator coef = matrix.find(key);</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;        <span class="keywordflow">if</span>(coef == matrix.end())</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;          <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;        <span class="keywordflow">else</span></div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;          <span class="keywordflow">return</span> (*coef).second;</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;      }</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;      <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> P(<span class="keyword">const</span> <span class="keywordtype">char</span>* method,</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;                     <span class="keyword">const</span> <a class="code" href="a00036.html#a825793ad622531ecec2a593c3553e5a1">class_type</a>&amp; positive,</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;                     <span class="keyword">const</span> <a class="code" href="a00036.html#a825793ad622531ecec2a593c3553e5a1">class_type</a>&amp; negative)<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> res = <a class="code" href="a00036.html#aa837bb708ae8ec4ae89a88b9477ca86f">TP</a>(positive,negative)+<a class="code" href="a00036.html#a8eb663e55eaa7ec1342a3054f6e84176">FN</a>(positive,negative);</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;        <span class="keywordflow">if</span>(res == 0)</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;          <span class="keywordflow">throw</span> exception::NoPositiveInData(std::string(<span class="stringliteral">&quot;in method Confusion::&quot;</span>)+std::string(method));</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;        <span class="keywordflow">return</span> res;</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;      }</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;      <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> N(<span class="keyword">const</span> <span class="keywordtype">char</span>* method,</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;                     <span class="keyword">const</span> <a class="code" href="a00036.html#a825793ad622531ecec2a593c3553e5a1">class_type</a>&amp; positive,</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;                     <span class="keyword">const</span> <a class="code" href="a00036.html#a825793ad622531ecec2a593c3553e5a1">class_type</a>&amp; negative)<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> res = <a class="code" href="a00036.html#a60669366d8ead3bf08c12f941c405552">TN</a>(positive,negative)+<a class="code" href="a00036.html#aa313609a9e046aa75461a391c71c7545">FP</a>(positive,negative);</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;        <span class="keywordflow">if</span>(res == 0)</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;          <span class="keywordflow">throw</span> exception::NoNegativeInData(std::string(<span class="stringliteral">&quot;in method Confusion::&quot;</span>)+std::string(method));</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;        <span class="keywordflow">return</span> res;</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;      }</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;      <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> P_(<span class="keyword">const</span> <span class="keywordtype">char</span>* method,</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;                      <span class="keyword">const</span> <a class="code" href="a00036.html#a825793ad622531ecec2a593c3553e5a1">class_type</a>&amp; positive,</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;                      <span class="keyword">const</span> <a class="code" href="a00036.html#a825793ad622531ecec2a593c3553e5a1">class_type</a>&amp; negative)<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> res = <a class="code" href="a00036.html#aa837bb708ae8ec4ae89a88b9477ca86f">TP</a>(positive,negative)+<a class="code" href="a00036.html#aa313609a9e046aa75461a391c71c7545">FP</a>(positive,negative);</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;        <span class="keywordflow">if</span>(res == 0)</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;          <span class="keywordflow">throw</span> exception::NoPositivePrediction(std::string(<span class="stringliteral">&quot;in method Confusion::&quot;</span>)+std::string(method));</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;        <span class="keywordflow">return</span> res;</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;      }</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;      <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> N_(<span class="keyword">const</span> <span class="keywordtype">char</span>* method,</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;                      <span class="keyword">const</span> <a class="code" href="a00036.html#a825793ad622531ecec2a593c3553e5a1">class_type</a>&amp; positive,</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;                      <span class="keyword">const</span> <a class="code" href="a00036.html#a825793ad622531ecec2a593c3553e5a1">class_type</a>&amp; negative)<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> res = <a class="code" href="a00036.html#a8eb663e55eaa7ec1342a3054f6e84176">FN</a>(positive,negative)+<a class="code" href="a00036.html#a60669366d8ead3bf08c12f941c405552">TN</a>(positive,negative);</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;        <span class="keywordflow">if</span>(res == 0)</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;          <span class="keywordflow">throw</span> exception::NoNegativePrediction(std::string(<span class="stringliteral">&quot;in method Confusion::&quot;</span>)+std::string(method));</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;        <span class="keywordflow">return</span> res;</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;      }</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;      <span class="keyword">static</span> std::string percent(<span class="keywordtype">double</span> x, <span class="keywordtype">bool</span> display_zero=<span class="keyword">false</span>) {</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;        std::ostringstream ostr;</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;        <span class="keywordflow">if</span>(x&gt;1)</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;          x=1;</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;        <span class="keywordflow">else</span> <span class="keywordflow">if</span>(x&lt;0)</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;          x=0;</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;        <span class="keywordtype">int</span> xx = (int)(x*1000+.5);</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;        <span class="keywordflow">if</span>(display_zero || xx!=0) {</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;          <span class="keywordflow">if</span>(xx==1000)</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;            ostr &lt;&lt; <span class="stringliteral">&quot;100.0%&quot;</span>;</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;          <span class="keywordflow">else</span></div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;            ostr &lt;&lt; std::setw(4) &lt;&lt; .1*xx &lt;&lt; <span class="charliteral">&#39;%&#39;</span>;</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;        }</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;        <span class="keywordflow">else</span></div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;          ostr &lt;&lt; <span class="stringliteral">&quot;     &quot;</span>;</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;        <span class="keywordflow">return</span> ostr.str();</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;      }</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    <span class="keyword">public</span>:</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;</div>
<div class="line"><a name="l00178"></a><span class="lineno"><a class="code" href="a00036.html#ae93ae811862145768fe2b373901321d2">  178</a></span>&#160;      <a class="code" href="a00036.html#ae93ae811862145768fe2b373901321d2">Confusion</a>(<span class="keywordtype">void</span>) : matrix(), nb_samples(0) {}</div>
<div class="line"><a name="l00179"></a><span class="lineno"><a class="code" href="a00036.html#a1e83f4ed645c7ded194996b361ac9815">  179</a></span>&#160;      <a class="code" href="a00036.html#ae93ae811862145768fe2b373901321d2">Confusion</a>(<span class="keyword">const</span> <a class="code" href="a00036.html" title="This computes a confusion matrix.">Confusion&lt;CLASS&gt;</a>&amp; cp) </div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;        : matrix(cp.matrix),sums(cp.sums),nb_samples(cp.nb_samples) {}</div>
<div class="line"><a name="l00181"></a><span class="lineno"><a class="code" href="a00036.html#a51e213f9e1b04fe72b53a3f018a94075">  181</a></span>&#160;      <a class="code" href="a00036.html" title="This computes a confusion matrix.">Confusion&lt;CLASS&gt;</a>&amp; <a class="code" href="a00036.html#a51e213f9e1b04fe72b53a3f018a94075">operator=</a>(<span class="keyword">const</span> <a class="code" href="a00036.html" title="This computes a confusion matrix.">Confusion&lt;CLASS&gt;</a>&amp; cp) {</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;        <span class="keywordflow">if</span>(<span class="keyword">this</span> != &amp;cp) {</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;          matrix     = cp.matrix;</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;          sums        = cp.sums;</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;          nb_samples = cp.nb_samples;</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;        }</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;        <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;      }</div>
<div class="line"><a name="l00189"></a><span class="lineno"><a class="code" href="a00036.html#a2cd3ce81af1ff9d5f8b5d321c500d4aa">  189</a></span>&#160;      <a class="code" href="a00036.html#a2cd3ce81af1ff9d5f8b5d321c500d4aa">~Confusion</a>(<span class="keywordtype">void</span>) {}</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;      </div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;</div>
<div class="line"><a name="l00198"></a><span class="lineno"><a class="code" href="a00036.html#a8bf6743ac3e71ca8957665ab86526da8">  198</a></span>&#160;      <span class="keywordtype">void</span> <a class="code" href="a00036.html#a8bf6743ac3e71ca8957665ab86526da8">display</a>(std::ostream&amp; os)<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>                                  i;</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;        std::set&lt;class_type&gt;                          used_classes = this-&gt;<a class="code" href="a00036.html#a025ba8099f6074944768962d447f4332">classes</a>();</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;        <span class="keyword">typename</span> std::set&lt;class_type&gt;::const_iterator truth,prediction,end;</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;        end = used_classes.end();</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;  </div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;        std::cout &lt;&lt; std::endl</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;                  &lt;&lt; std::endl;</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;        std::cout &lt;&lt; <span class="stringliteral">&quot;           +&quot;</span>;</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;        <span class="keywordflow">for</span>(i = 0; i &lt; used_classes.size(); ++i)</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;          std::cout &lt;&lt; <span class="stringliteral">&quot;-------+&quot;</span>;</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;        std::cout &lt;&lt; std::endl;</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;        std::cout &lt;&lt; <span class="stringliteral">&quot;     truth |&quot;</span>;</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;        <span class="keywordflow">for</span>(truth = used_classes.begin(); truth != end; ++truth)</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;          std::cout &lt;&lt; std::setw(6) &lt;&lt; *truth &lt;&lt; <span class="stringliteral">&quot; |&quot;</span>;</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;        std::cout &lt;&lt; <span class="stringliteral">&quot;  sum &quot;</span> &lt;&lt; std::endl;</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;        std::cout &lt;&lt; <span class="stringliteral">&quot;prediction /&quot;</span>;</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;        <span class="keywordflow">for</span>(i = 0; i &lt; used_classes.size(); ++i)</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;          std::cout &lt;&lt; <span class="stringliteral">&quot;========&quot;</span>; </div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;        std::cout &lt;&lt; std::endl;</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;        <span class="keywordflow">for</span>(prediction = used_classes.begin(); prediction != end; ++prediction) {</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;          std::cout &lt;&lt; <span class="stringliteral">&quot;  |&quot;</span> &lt;&lt; std::setw(6) &lt;&lt; *prediction &lt;&lt; <span class="stringliteral">&quot; ||&quot;</span>;</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;          <span class="keywordflow">for</span>(truth = used_classes.begin(); truth != end; ++truth)</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;            std::cout &lt;&lt; <span class="stringliteral">&quot; &quot;</span> &lt;&lt; percent(this-&gt;<a class="code" href="a00036.html#a831abcbb8de536a7fef4fbf68c66116f">confusion</a>(*truth,*prediction)) &lt;&lt; <span class="stringliteral">&quot; |&quot;</span>;</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;          std::cout &lt;&lt; <span class="stringliteral">&quot; &quot;</span> &lt;&lt; percent(this-&gt;<a class="code" href="a00036.html#acd66fd07c3d9cbdf766f1d52de6a956d">predictionFrequency</a>(*prediction),<span class="keyword">true</span>)</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;                    &lt;&lt; std::endl;</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;          std::cout &lt;&lt; <span class="stringliteral">&quot;  +-------||&quot;</span>;</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;          <span class="keywordflow">for</span>(i = 0; i &lt; used_classes.size(); ++i)</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;            std::cout &lt;&lt; <span class="stringliteral">&quot;-------+&quot;</span>; </div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;          std::cout &lt;&lt; std::endl;</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;        }</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;        std::cout &lt;&lt; <span class="stringliteral">&quot;      sum   &quot;</span>;</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;        <span class="keywordflow">for</span>(truth = used_classes.begin(); truth != end; ++truth)</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;          std::cout &lt;&lt; <span class="stringliteral">&quot; &quot;</span> &lt;&lt; percent(this-&gt;<a class="code" href="a00036.html#a8be95152f4642d7e7621a6ee9357e77f">truthFrequency</a>(*truth),<span class="keyword">true</span>) &lt;&lt; <span class="stringliteral">&quot;  &quot;</span>;</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;        std::cout &lt;&lt; std::endl;</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;        std::cout &lt;&lt; std::endl;</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;        std::cout &lt;&lt; std::endl;</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;      }</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;      </div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;</div>
<div class="line"><a name="l00244"></a><span class="lineno"><a class="code" href="a00036.html#ae0d9ed24a04a3d49655de786756997e9">  244</a></span>&#160;      <span class="keywordtype">void</span> <a class="code" href="a00036.html#ae0d9ed24a04a3d49655de786756997e9">clear</a>(<span class="keywordtype">void</span>) {</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;        matrix.clear();</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;        sums.clear();</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;        nb_samples = 0;</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;      }</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;</div>
<div class="line"><a name="l00254"></a><span class="lineno"><a class="code" href="a00036.html#a025ba8099f6074944768962d447f4332">  254</a></span>&#160;       std::set&lt;class_type&gt; <a class="code" href="a00036.html#a025ba8099f6074944768962d447f4332">classes</a>(<span class="keywordtype">void</span>)<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;        std::set&lt;class_type&gt; used;</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;        <span class="keyword">typename</span> frequencies_type::const_iterator iter,end;</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;        <span class="keywordflow">for</span>(iter = sums.begin(), end = sums.end();</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;            iter != end;</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;            ++iter)</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;          used.insert(used.begin(),(*iter).first);</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;        <span class="keywordflow">return</span> used;</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;      }</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;      <span class="keyword">template</span>&lt;<span class="keyword">typename</span> Predictor, </div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;               <span class="keyword">typename</span> Input, </div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;               <span class="keyword">typename</span> Output,</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;               <span class="keyword">typename</span> ClassOfOutput&gt;</div>
<div class="line"><a name="l00273"></a><span class="lineno"><a class="code" href="a00036.html#a1c71aa1eab57cb0e771dc1e3546e9fe4">  273</a></span>&#160;      <span class="keywordtype">void</span> <a class="code" href="a00036.html#a1c71aa1eab57cb0e771dc1e3546e9fe4">update</a>(<span class="keyword">const</span> Predictor&amp; f,</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;                  <span class="keyword">const</span> Input&amp; input,</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;                  <span class="keyword">const</span> Output&amp; output,</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;                  <span class="keyword">const</span> ClassOfOutput&amp; class_of) {</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;        <a class="code" href="a00036.html#a825793ad622531ecec2a593c3553e5a1">class_type</a> truth      = class_of(output);</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;        <a class="code" href="a00036.html#a825793ad622531ecec2a593c3553e5a1">class_type</a> prediction = class_of(f(input));</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;        std::pair&lt;class_type,class_type&gt; key(truth,prediction);</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;        <span class="keyword">typename</span> matrix_type::iterator coef = matrix.find(key);</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;        <span class="keywordflow">if</span>(coef == matrix.end())</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;          matrix[key] = 1;</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;        <span class="keywordflow">else</span></div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;          (*coef).second++;</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;        <span class="keyword">typename</span> frequencies_type::iterator coef_truth = sums.find(truth);</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;        <span class="keywordflow">if</span>(coef_truth == sums.end()) {</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;          sums[truth] = std::pair&lt;unsigned int,unsigned int&gt;(0,0);</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;          coef_truth = sums.find(truth);</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;        }</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;        <span class="keyword">typename</span> frequencies_type::iterator coef_prediction = sums.find(prediction);</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;        <span class="keywordflow">if</span>(coef_prediction == sums.end()) {</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;          sums[prediction] = std::pair&lt;unsigned int,unsigned int&gt;(0,0);</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;          coef_prediction = sums.find(prediction);</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;        }</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;        (*coef_truth).second.first++;</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;        (*coef_prediction).second.second++;</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;        ++nb_samples;</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;      }</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;      <span class="keyword">template</span>&lt;<span class="keyword">typename</span> Predictor, </div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;               <span class="keyword">typename</span> DataIterator,</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;               <span class="keyword">typename</span> InputOf, <span class="keyword">typename</span> OutputOf,</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;               <span class="keyword">typename</span> ClassOfOutput&gt;</div>
<div class="line"><a name="l00312"></a><span class="lineno"><a class="code" href="a00036.html#a50a05225974aaaad0b30dd9cd473ec4e">  312</a></span>&#160;      <span class="keywordtype">void</span> <a class="code" href="a00036.html#a1c71aa1eab57cb0e771dc1e3546e9fe4">update</a>(<span class="keyword">const</span> Predictor&amp; f,</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;                  <span class="keyword">const</span> DataIterator&amp; begin, </div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;                  <span class="keyword">const</span> DataIterator&amp; end,</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;                  <span class="keyword">const</span> InputOf&amp; input_of,</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;                  <span class="keyword">const</span> OutputOf&amp; output_of, </div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;                  <span class="keyword">const</span> ClassOfOutput&amp; class_of) {</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;        <span class="keywordflow">for</span>(DataIterator it = begin; it != end; ++it) </div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;          <a class="code" href="a00036.html#a1c71aa1eab57cb0e771dc1e3546e9fe4">update</a>(f,input_of(*it),output_of(*it),class_of);</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;      }</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;</div>
<div class="line"><a name="l00326"></a><span class="lineno"><a class="code" href="a00036.html#a8be95152f4642d7e7621a6ee9357e77f">  326</a></span>&#160;      <span class="keyword">const</span> <span class="keywordtype">double</span> <a class="code" href="a00036.html#a8be95152f4642d7e7621a6ee9357e77f">truthFrequency</a>(<span class="keyword">const</span> <a class="code" href="a00036.html#a825793ad622531ecec2a593c3553e5a1">class_type</a>&amp; c)<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;        checkSamples(<span class="stringliteral">&quot;truthFrequency&quot;</span>);</div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;        <span class="keyword">typename</span> frequencies_type::const_iterator coef = sums.find(c);</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;        <span class="keywordflow">if</span>(coef == sums.end()) </div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;          <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;        <span class="keywordflow">else</span></div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;          <span class="keywordflow">return</span> (*coef).second.first / (<span class="keywordtype">double</span>)nb_samples;</div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;      }</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;</div>
<div class="line"><a name="l00339"></a><span class="lineno"><a class="code" href="a00036.html#acd66fd07c3d9cbdf766f1d52de6a956d">  339</a></span>&#160;      <span class="keyword">const</span> <span class="keywordtype">double</span> <a class="code" href="a00036.html#acd66fd07c3d9cbdf766f1d52de6a956d">predictionFrequency</a>(<span class="keyword">const</span> <a class="code" href="a00036.html#a825793ad622531ecec2a593c3553e5a1">class_type</a>&amp; c)<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;        checkSamples(<span class="stringliteral">&quot;predictionFrequency&quot;</span>);</div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;        <span class="keyword">typename</span> frequencies_type::const_iterator coef = sums.find(c);</div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;        <span class="keywordflow">if</span>(coef == sums.end()) </div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;          <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;        <span class="keywordflow">else</span> </div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;          <span class="keywordflow">return</span> (*coef).second.second / (<span class="keywordtype">double</span>)nb_samples;</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;      }</div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;</div>
<div class="line"><a name="l00352"></a><span class="lineno"><a class="code" href="a00036.html#a831abcbb8de536a7fef4fbf68c66116f">  352</a></span>&#160;      <span class="keywordtype">double</span> <a class="code" href="a00036.html#a831abcbb8de536a7fef4fbf68c66116f">confusion</a>(<span class="keyword">const</span> <a class="code" href="a00036.html#a825793ad622531ecec2a593c3553e5a1">class_type</a>&amp; a,<span class="keyword">const</span> <a class="code" href="a00036.html#a825793ad622531ecec2a593c3553e5a1">class_type</a>&amp; b)<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;        checkSamples(<span class="stringliteral">&quot;confusion&quot;</span>);</div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;        <span class="keywordflow">return</span> confus(a,b) / (double)nb_samples;</div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;      }</div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;</div>
<div class="line"><a name="l00357"></a><span class="lineno"><a class="code" href="a00036.html#a60d0c919baac18a0a1a470a59e7a9511">  357</a></span>&#160;      <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="a00036.html#a60d0c919baac18a0a1a470a59e7a9511">nbSamples</a>(<span class="keywordtype">void</span>)<span class="keyword"> const </span>{<span class="keywordflow">return</span> nb_samples;}</div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;</div>
<div class="line"><a name="l00362"></a><span class="lineno"><a class="code" href="a00036.html#aa837bb708ae8ec4ae89a88b9477ca86f">  362</a></span>&#160;      <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="a00036.html#aa837bb708ae8ec4ae89a88b9477ca86f">TP</a>(<span class="keyword">const</span> <a class="code" href="a00036.html#a825793ad622531ecec2a593c3553e5a1">class_type</a>&amp; positive,</div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;                      <span class="keyword">const</span> <a class="code" href="a00036.html#a825793ad622531ecec2a593c3553e5a1">class_type</a>&amp; negative)<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;        <span class="keywordflow">return</span> confus(positive,positive);</div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;      }</div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;</div>
<div class="line"><a name="l00370"></a><span class="lineno"><a class="code" href="a00036.html#a60669366d8ead3bf08c12f941c405552">  370</a></span>&#160;      <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="a00036.html#a60669366d8ead3bf08c12f941c405552">TN</a>(<span class="keyword">const</span> <a class="code" href="a00036.html#a825793ad622531ecec2a593c3553e5a1">class_type</a>&amp; positive,</div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;                      <span class="keyword">const</span> <a class="code" href="a00036.html#a825793ad622531ecec2a593c3553e5a1">class_type</a>&amp; negative)<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;        <span class="keywordflow">return</span> confus(negative,negative);</div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;      }</div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;</div>
<div class="line"><a name="l00378"></a><span class="lineno"><a class="code" href="a00036.html#aa313609a9e046aa75461a391c71c7545">  378</a></span>&#160;      <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="a00036.html#aa313609a9e046aa75461a391c71c7545">FP</a>(<span class="keyword">const</span> <a class="code" href="a00036.html#a825793ad622531ecec2a593c3553e5a1">class_type</a>&amp; positive,</div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;                      <span class="keyword">const</span> <a class="code" href="a00036.html#a825793ad622531ecec2a593c3553e5a1">class_type</a>&amp; negative)<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;        <span class="keywordflow">return</span> confus(negative,positive);</div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;      }</div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;</div>
<div class="line"><a name="l00386"></a><span class="lineno"><a class="code" href="a00036.html#a8eb663e55eaa7ec1342a3054f6e84176">  386</a></span>&#160;      <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="a00036.html#a8eb663e55eaa7ec1342a3054f6e84176">FN</a>(<span class="keyword">const</span> <a class="code" href="a00036.html#a825793ad622531ecec2a593c3553e5a1">class_type</a>&amp; positive,</div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;                      <span class="keyword">const</span> <a class="code" href="a00036.html#a825793ad622531ecec2a593c3553e5a1">class_type</a>&amp; negative)<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;        <span class="keywordflow">return</span> confus(positive,negative);</div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;      }</div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;</div>
<div class="line"><a name="l00394"></a><span class="lineno"><a class="code" href="a00036.html#a1977d3587c11b036279f522137b3e7bb">  394</a></span>&#160;      <span class="keywordtype">double</span> <a class="code" href="a00036.html#a1977d3587c11b036279f522137b3e7bb">sensitivity</a>(<span class="keyword">const</span> <a class="code" href="a00036.html#a825793ad622531ecec2a593c3553e5a1">class_type</a>&amp; positive,</div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;                         <span class="keyword">const</span> <a class="code" href="a00036.html#a825793ad622531ecec2a593c3553e5a1">class_type</a>&amp; negative)<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="a00036.html#aa837bb708ae8ec4ae89a88b9477ca86f">TP</a>(positive,negative)/(double)P(<span class="stringliteral">&quot;sensitivity&quot;</span>,positive,negative);</div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;      }</div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;</div>
<div class="line"><a name="l00402"></a><span class="lineno"><a class="code" href="a00036.html#a49f48450728cd6f87b63caa68fc097ea">  402</a></span>&#160;      <span class="keywordtype">double</span> <a class="code" href="a00036.html#a49f48450728cd6f87b63caa68fc097ea">recall</a>(<span class="keyword">const</span> <a class="code" href="a00036.html#a825793ad622531ecec2a593c3553e5a1">class_type</a>&amp; positive,</div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;                    <span class="keyword">const</span> <a class="code" href="a00036.html#a825793ad622531ecec2a593c3553e5a1">class_type</a>&amp; negative)<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="a00036.html#aa837bb708ae8ec4ae89a88b9477ca86f">TP</a>(positive,negative)/(double)P(<span class="stringliteral">&quot;recall&quot;</span>,positive,negative);</div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;      }</div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;</div>
<div class="line"><a name="l00410"></a><span class="lineno"><a class="code" href="a00036.html#a76182961ed0b6f2c49f272ee7703dd15">  410</a></span>&#160;      <span class="keywordtype">double</span> <a class="code" href="a00036.html#a76182961ed0b6f2c49f272ee7703dd15">fallOut</a>(<span class="keyword">const</span> <a class="code" href="a00036.html#a825793ad622531ecec2a593c3553e5a1">class_type</a>&amp; positive,</div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;                     <span class="keyword">const</span> <a class="code" href="a00036.html#a825793ad622531ecec2a593c3553e5a1">class_type</a>&amp; negative)<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="a00036.html#aa313609a9e046aa75461a391c71c7545">FP</a>(positive,negative)/(double)N(<span class="stringliteral">&quot;fallOut&quot;</span>,positive,negative);</div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;      }</div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;</div>
<div class="line"><a name="l00419"></a><span class="lineno"><a class="code" href="a00036.html#a3046211d19bde726a048172fafbbc484">  419</a></span>&#160;      <span class="keywordtype">double</span> <a class="code" href="a00036.html#a3046211d19bde726a048172fafbbc484">accuracy</a>(<span class="keyword">const</span> <a class="code" href="a00036.html#a825793ad622531ecec2a593c3553e5a1">class_type</a>&amp; positive,</div>
<div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;                      <span class="keyword">const</span> <a class="code" href="a00036.html#a825793ad622531ecec2a593c3553e5a1">class_type</a>&amp; negative)<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;        <span class="keywordflow">return</span> (<a class="code" href="a00036.html#aa837bb708ae8ec4ae89a88b9477ca86f">TP</a>(positive,negative) + <a class="code" href="a00036.html#a60669366d8ead3bf08c12f941c405552">TN</a>(positive,negative))</div>
<div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;          / (double)(P(<span class="stringliteral">&quot;accuracy&quot;</span>,positive,negative) + V(<span class="stringliteral">&quot;accuracy&quot;</span>,positive,negative));</div>
<div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;      }</div>
<div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;</div>
<div class="line"><a name="l00428"></a><span class="lineno"><a class="code" href="a00036.html#a6af1ce0bfa8412cc4ce617faaba082ad">  428</a></span>&#160;      <span class="keywordtype">double</span> <a class="code" href="a00036.html#a6af1ce0bfa8412cc4ce617faaba082ad">specificity</a>(<span class="keyword">const</span> <a class="code" href="a00036.html#a825793ad622531ecec2a593c3553e5a1">class_type</a>&amp; positive,</div>
<div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;                         <span class="keyword">const</span> <a class="code" href="a00036.html#a825793ad622531ecec2a593c3553e5a1">class_type</a>&amp; negative)<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;        <span class="keywordflow">return</span> 1-<a class="code" href="a00036.html#aa313609a9e046aa75461a391c71c7545">FP</a>(positive,negative)/(double)N(<span class="stringliteral">&quot;specificity&quot;</span>,positive,negative);</div>
<div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;      }</div>
<div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;</div>
<div class="line"><a name="l00437"></a><span class="lineno"><a class="code" href="a00036.html#aa57f1e1ca6c18cf5a9b0492fe3f35285">  437</a></span>&#160;      <span class="keywordtype">double</span> <a class="code" href="a00036.html#aa57f1e1ca6c18cf5a9b0492fe3f35285">precision</a>(<span class="keyword">const</span> <a class="code" href="a00036.html#a825793ad622531ecec2a593c3553e5a1">class_type</a>&amp; positive,</div>
<div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;                       <span class="keyword">const</span> <a class="code" href="a00036.html#a825793ad622531ecec2a593c3553e5a1">class_type</a>&amp; negative)<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="a00036.html#aa837bb708ae8ec4ae89a88b9477ca86f">TP</a>(positive,negative)/(double)P_(<span class="stringliteral">&quot;precision&quot;</span>,positive,negative);</div>
<div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;      }</div>
<div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;      </div>
<div class="line"><a name="l00445"></a><span class="lineno"><a class="code" href="a00036.html#a86df95f3206ba027d4682aea062ec563">  445</a></span>&#160;      <span class="keywordtype">double</span> <a class="code" href="a00036.html#a86df95f3206ba027d4682aea062ec563">negativePredictiveValue</a>(<span class="keyword">const</span> <a class="code" href="a00036.html#a825793ad622531ecec2a593c3553e5a1">class_type</a>&amp; positive,</div>
<div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;                                     <span class="keyword">const</span> <a class="code" href="a00036.html#a825793ad622531ecec2a593c3553e5a1">class_type</a>&amp; negative)<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="a00036.html#a60669366d8ead3bf08c12f941c405552">TN</a>(positive,negative)/(double)N_(<span class="stringliteral">&quot;negativePredictiveValue&quot;</span>,positive,negative);</div>
<div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;      }</div>
<div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;</div>
<div class="line"><a name="l00453"></a><span class="lineno"><a class="code" href="a00036.html#a222c6dece4b359f1354c9673a00b6247">  453</a></span>&#160;      <span class="keywordtype">double</span> <a class="code" href="a00036.html#a222c6dece4b359f1354c9673a00b6247">falseDiscovery</a>(<span class="keyword">const</span> <a class="code" href="a00036.html#a825793ad622531ecec2a593c3553e5a1">class_type</a>&amp; positive,</div>
<div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;                            <span class="keyword">const</span> <a class="code" href="a00036.html#a825793ad622531ecec2a593c3553e5a1">class_type</a>&amp; negative)<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="a00036.html#aa313609a9e046aa75461a391c71c7545">FP</a>(positive,negative)/(double)P_(<span class="stringliteral">&quot;falseDiscovery&quot;</span>,positive,negative);</div>
<div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;      }</div>
<div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;</div>
<div class="line"><a name="l00461"></a><span class="lineno"><a class="code" href="a00036.html#acfb1d66c5369381715c32e19597cbd21">  461</a></span>&#160;      <span class="keywordtype">double</span> <a class="code" href="a00036.html#acfb1d66c5369381715c32e19597cbd21">MCC</a>(<span class="keyword">const</span> <a class="code" href="a00036.html#a825793ad622531ecec2a593c3553e5a1">class_type</a>&amp; positive,</div>
<div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;                 <span class="keyword">const</span> <a class="code" href="a00036.html#a825793ad622531ecec2a593c3553e5a1">class_type</a>&amp; negative)<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;        <span class="keywordflow">return</span> (<a class="code" href="a00036.html#aa837bb708ae8ec4ae89a88b9477ca86f">TP</a>(positive,negative)*<a class="code" href="a00036.html#a60669366d8ead3bf08c12f941c405552">TN</a>(positive,negative)</div>
<div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;                + <a class="code" href="a00036.html#aa313609a9e046aa75461a391c71c7545">FP</a>(positive,negative)*<a class="code" href="a00036.html#a8eb663e55eaa7ec1342a3054f6e84176">FN</a>(positive,negative))</div>
<div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;          /sqrt(P(<span class="stringliteral">&quot;MCC&quot;</span>,positive,negative)</div>
<div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;                *N(<span class="stringliteral">&quot;MCC&quot;</span>,positive,negative)</div>
<div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;                *P_(<span class="stringliteral">&quot;MCC&quot;</span>,positive,negative)</div>
<div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;                *N_(<span class="stringliteral">&quot;MCC&quot;</span>,positive,negative));</div>
<div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;      }</div>
<div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;</div>
<div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;      </div>
<div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;    };</div>
<div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;  }</div>
<div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;</div>
<div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;}</div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.3.1
</small></address>
</body>
</html>
