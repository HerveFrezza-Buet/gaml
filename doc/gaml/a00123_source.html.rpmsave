<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.3.1"/>
<title>gaml-1.06: gamlBootstrap.hpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">gaml-1.06
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.3.1 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="namespaces.html"><span>Namespaces</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
      <li><a href="examples.html"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.html">src</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">gamlBootstrap.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="a00123.html">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="preprocessor">#pragma once</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">/*</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> *   Copyright (C) 2012,  Supelec</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> *   Author : Hervé Frezza-Buet, Frédéric Pennerath </span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> *   Contributor :</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> *   This library is free software; you can redistribute it and/or</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> *   modify it under the terms of the GNU General Public</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *   License (GPL) as published by the Free Software Foundation; either</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> *   version 3 of the License, or any later version.</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> *   </span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *   This library is distributed in the hope that it will be useful,</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> *   but WITHOUT ANY WARRANTY; without even the implied warranty of</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> *   General Public License for more details.</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> *   </span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> *   You should have received a copy of the GNU General Public</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> *   License along with this library; if not, write to the Free Software</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> *   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="comment"> *   Contact : herve.frezza-buet@supelec.fr, frederic.pennerath@supelec.fr</span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;</div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &lt;vector&gt;</span></div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &lt;set&gt;</span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &lt;sstream&gt;</span></div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#include &lt;iterator&gt;</span></div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#include &lt;cstdlib&gt;</span></div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="a00122.html">gamlAlgorithms.hpp</a>&gt;</span></div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="a00127.html">gamlException.hpp</a>&gt;</span></div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="preprocessor">#include &lt;iostream&gt;</span></div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="preprocessor">#include &lt;iomanip&gt;</span></div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="keyword">namespace </span>gaml {</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;  <span class="keyword">template</span>&lt;<span class="keyword">typename</span> Iterator, <span class="keyword">typename</span> IndexIterator&gt;</div>
<div class="line"><a name="l00040"></a><span class="lineno"><a class="code" href="a00023.html">   40</a></span>&#160;  <span class="keyword">class </span><a class="code" href="a00023.html">BootstrapIterator</a> </div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    : <span class="keyword">public</span> std::iterator&lt;typename std::iterator_traits&lt;Iterator&gt;::iterator_category, </div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;                           typename std::iterator_traits&lt;Iterator&gt;::value_type&gt; {</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;  <span class="keyword">private</span>:</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    Iterator it;</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    IndexIterator idx;</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;  <span class="keyword">public</span>:</div>
<div class="line"><a name="l00049"></a><span class="lineno"><a class="code" href="a00023.html#a43a576edbc069aaec576f229071e2943">   49</a></span>&#160;    <span class="keyword">typedef</span> <span class="keyword">typename</span> std::iterator_traits&lt;Iterator&gt;::value_type      <a class="code" href="a00023.html#a43a576edbc069aaec576f229071e2943">value_type</a>;</div>
<div class="line"><a name="l00050"></a><span class="lineno"><a class="code" href="a00023.html#af59a25ea5e6e4a1d9f1c7fd90c0813fe">   50</a></span>&#160;    <span class="keyword">typedef</span> <span class="keyword">typename</span> std::iterator_traits&lt;Iterator&gt;::difference_type <a class="code" href="a00023.html#af59a25ea5e6e4a1d9f1c7fd90c0813fe">difference_type</a>;</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;</div>
<div class="line"><a name="l00052"></a><span class="lineno"><a class="code" href="a00023.html#aa75892937bc5d3e46ef9742385d5db42">   52</a></span>&#160;    <a class="code" href="a00023.html#aa75892937bc5d3e46ef9742385d5db42">BootstrapIterator</a>(<span class="keywordtype">void</span>) : it(), idx() {}</div>
<div class="line"><a name="l00053"></a><span class="lineno"><a class="code" href="a00023.html#a2bc04407808c9cc2d87617183b12c57a">   53</a></span>&#160;    <a class="code" href="a00023.html#aa75892937bc5d3e46ef9742385d5db42">BootstrapIterator</a>(<span class="keyword">const</span> Iterator&amp; iter, <span class="keyword">const</span> IndexIterator&amp; index_iter) </div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;      : it(iter), idx(index_iter) {}</div>
<div class="line"><a name="l00055"></a><span class="lineno"><a class="code" href="a00023.html#a435a7f3dec3720078a02da9829d8d878">   55</a></span>&#160;    <a class="code" href="a00023.html#a435a7f3dec3720078a02da9829d8d878">BootstrapIterator</a>(<span class="keyword">const</span> <a class="code" href="a00023.html">BootstrapIterator</a>&amp; cp) : it(cp.it), idx(cp.idx) {}</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;</div>
<div class="line"><a name="l00057"></a><span class="lineno"><a class="code" href="a00023.html#a0e7e6cbc40f63bf91f7d8c0c15754685">   57</a></span>&#160;    <a class="code" href="a00023.html">BootstrapIterator</a>&amp; <a class="code" href="a00023.html#a0e7e6cbc40f63bf91f7d8c0c15754685">operator=</a>(<span class="keyword">const</span> <a class="code" href="a00023.html">BootstrapIterator</a>&amp; cp)   {</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;      <span class="keywordflow">if</span>(<span class="keyword">this</span> != &amp;cp) {</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;        it  = cp.it;</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;        idx = cp.idx;</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;      }</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;      <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    }</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;</div>
<div class="line"><a name="l00065"></a><span class="lineno"><a class="code" href="a00023.html#ae59bb0ddf02af2e573337318a5b130de">   65</a></span>&#160;    <a class="code" href="a00023.html">BootstrapIterator</a>&amp; <a class="code" href="a00023.html#ae59bb0ddf02af2e573337318a5b130de">operator++</a>()                       {++idx; <span class="keywordflow">return</span> *<span class="keyword">this</span>;}</div>
<div class="line"><a name="l00066"></a><span class="lineno"><a class="code" href="a00023.html#aee55343750888a009870b5c80fd9f505">   66</a></span>&#160;    <a class="code" href="a00023.html">BootstrapIterator</a>&amp; <a class="code" href="a00023.html#aee55343750888a009870b5c80fd9f505">operator--</a>()                       {--idx; <span class="keywordflow">return</span> *<span class="keyword">this</span>;}</div>
<div class="line"><a name="l00067"></a><span class="lineno"><a class="code" href="a00023.html#a08fd4fccf0fc38133263d007be881c9e">   67</a></span>&#160;    <a class="code" href="a00023.html">BootstrapIterator</a>&amp; <a class="code" href="a00023.html#a08fd4fccf0fc38133263d007be881c9e">operator+=</a>(<a class="code" href="a00023.html#af59a25ea5e6e4a1d9f1c7fd90c0813fe">difference_type</a> diff)   {idx+=diff; <span class="keywordflow">return</span> *<span class="keyword">this</span>;}</div>
<div class="line"><a name="l00068"></a><span class="lineno"><a class="code" href="a00023.html#a35fe320d7785fe3198b8255f78784fac">   68</a></span>&#160;    <a class="code" href="a00023.html">BootstrapIterator</a>&amp; <a class="code" href="a00023.html#a35fe320d7785fe3198b8255f78784fac">operator-=</a>(<span class="keywordtype">int</span> diff)               {idx-=diff; <span class="keywordflow">return</span> *<span class="keyword">this</span>;}</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;</div>
<div class="line"><a name="l00070"></a><span class="lineno"><a class="code" href="a00023.html#aead7b3f4b8cc9bbd93b7468ff5e0ff0f">   70</a></span>&#160;    <a class="code" href="a00023.html">BootstrapIterator</a>  <a class="code" href="a00023.html#aead7b3f4b8cc9bbd93b7468ff5e0ff0f">operator++</a>(<span class="keywordtype">int</span>) {</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;      <a class="code" href="a00023.html">BootstrapIterator</a> res = *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;      ++*<span class="keyword">this</span>; </div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;      <span class="keywordflow">return</span> res;</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    }</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;</div>
<div class="line"><a name="l00076"></a><span class="lineno"><a class="code" href="a00023.html#abdcc5188ae9ba7a93b4fed9f068794ed">   76</a></span>&#160;    <a class="code" href="a00023.html">BootstrapIterator</a>  <a class="code" href="a00023.html#abdcc5188ae9ba7a93b4fed9f068794ed">operator--</a>(<span class="keywordtype">int</span>) {</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;      <a class="code" href="a00023.html">BootstrapIterator</a> res = *<span class="keyword">this</span>; </div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;      --*<span class="keyword">this</span>; </div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;      <span class="keywordflow">return</span> res;</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    }</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;</div>
<div class="line"><a name="l00082"></a><span class="lineno"><a class="code" href="a00023.html#aff0bf3c2b956e109ad95738630a6490a">   82</a></span>&#160;    <a class="code" href="a00023.html#af59a25ea5e6e4a1d9f1c7fd90c0813fe">difference_type</a>  <a class="code" href="a00023.html#aff0bf3c2b956e109ad95738630a6490a">operator-</a>(<span class="keyword">const</span> <a class="code" href="a00023.html">BootstrapIterator</a>&amp; i)<span class="keyword"> const </span>{<span class="keywordflow">return</span> idx - i.idx;}</div>
<div class="line"><a name="l00083"></a><span class="lineno"><a class="code" href="a00023.html#ac68f743255b1629a7e64a2e9401e6a6d">   83</a></span>&#160;    <a class="code" href="a00023.html">BootstrapIterator</a>  <a class="code" href="a00023.html#ac68f743255b1629a7e64a2e9401e6a6d">operator+</a>(<a class="code" href="a00023.html#af59a25ea5e6e4a1d9f1c7fd90c0813fe">difference_type</a> i)<span class="keyword"> const </span>{<span class="keywordflow">return</span> <a class="code" href="a00023.html#aa75892937bc5d3e46ef9742385d5db42">BootstrapIterator</a>(it,idx+i);}</div>
<div class="line"><a name="l00084"></a><span class="lineno"><a class="code" href="a00023.html#af31baaadb2515b8d9594f8c35bdf3bdc">   84</a></span>&#160;    <a class="code" href="a00023.html">BootstrapIterator</a>  <a class="code" href="a00023.html#af31baaadb2515b8d9594f8c35bdf3bdc">operator-</a>(<a class="code" href="a00023.html#af59a25ea5e6e4a1d9f1c7fd90c0813fe">difference_type</a> i)<span class="keyword"> const </span>{<span class="keywordflow">return</span> <a class="code" href="a00023.html#aa75892937bc5d3e46ef9742385d5db42">BootstrapIterator</a>(it,idx-i);}</div>
<div class="line"><a name="l00085"></a><span class="lineno"><a class="code" href="a00023.html#a35dd47bfde33524a3ee59c28c1570869">   85</a></span>&#160;    <a class="code" href="a00023.html#a43a576edbc069aaec576f229071e2943">value_type</a>   <a class="code" href="a00023.html#a35dd47bfde33524a3ee59c28c1570869">operator*</a>()<span class="keyword">      const             </span>{<span class="keywordflow">return</span> *(it+*idx);}</div>
<div class="line"><a name="l00086"></a><span class="lineno"><a class="code" href="a00023.html#ab20aa28f9e3e26177381e821a350797c">   86</a></span>&#160;    <span class="keywordtype">bool</span>     <a class="code" href="a00023.html#ab20aa28f9e3e26177381e821a350797c">operator==</a>(<span class="keyword">const</span> <a class="code" href="a00023.html">BootstrapIterator</a>&amp; i)<span class="keyword"> const </span>{<span class="keywordflow">return</span> it == i.it &amp;&amp; idx == i.idx;}</div>
<div class="line"><a name="l00087"></a><span class="lineno"><a class="code" href="a00023.html#a7183fec65f5097e56b0d3e485dce58c5">   87</a></span>&#160;    <span class="keywordtype">bool</span>     <a class="code" href="a00023.html#a7183fec65f5097e56b0d3e485dce58c5">operator!=</a>(<span class="keyword">const</span> <a class="code" href="a00023.html">BootstrapIterator</a>&amp; i)<span class="keyword"> const </span>{<span class="keywordflow">return</span> it != i.it || idx != i.idx;}</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;  };</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;  <span class="keyword">template</span>&lt;<span class="keyword">typename</span> Iterator&gt; </div>
<div class="line"><a name="l00091"></a><span class="lineno"><a class="code" href="a00022.html">   91</a></span>&#160;  <span class="keyword">class </span><a class="code" href="a00022.html">Bootstrap</a> {</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    Iterator _begin;</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    <span class="keyword">typedef</span> std::vector&lt;unsigned int&gt; indices_type;</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    indices_type indices;</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;  <span class="keyword">public</span>:</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;</div>
<div class="line"><a name="l00099"></a><span class="lineno"><a class="code" href="a00022.html#a74952e8ebcc31eaba0506cbd575db398">   99</a></span>&#160;    <span class="keyword">typedef</span> <span class="keyword">typename</span> Iterator::value_type <a class="code" href="a00022.html#a74952e8ebcc31eaba0506cbd575db398">value_type</a>;</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;</div>
<div class="line"><a name="l00101"></a><span class="lineno"><a class="code" href="a00022.html#ad99e77e97a9025ae57b801af266c44db">  101</a></span>&#160;    <span class="keyword">typedef</span> <a class="code" href="a00023.html">BootstrapIterator&lt;Iterator,typename indices_type::iterator&gt;</a> <a class="code" href="a00022.html#ad99e77e97a9025ae57b801af266c44db">iterator</a>;</div>
<div class="line"><a name="l00102"></a><span class="lineno"><a class="code" href="a00022.html#a0abcde118f2a6a6015a03025d7822c65">  102</a></span>&#160;    <a class="code" href="a00022.html#a0abcde118f2a6a6015a03025d7822c65">Bootstrap</a>(<span class="keywordtype">void</span>) : _begin(), indices() {}</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    </div>
<div class="line"><a name="l00104"></a><span class="lineno"><a class="code" href="a00022.html#af6c562bea8b7e0e0d49e67a3a583532c">  104</a></span>&#160;    <a class="code" href="a00022.html#af6c562bea8b7e0e0d49e67a3a583532c">Bootstrap</a>(<span class="keyword">const</span> <a class="code" href="a00022.html">Bootstrap&lt;Iterator&gt;</a>&amp; cp) : _begin(cp._begin), indices(cp.indices) {}</div>
<div class="line"><a name="l00105"></a><span class="lineno"><a class="code" href="a00022.html#a37f5d93c73e14b8af3d6ec79472dc3f4">  105</a></span>&#160;    <a class="code" href="a00022.html#a0abcde118f2a6a6015a03025d7822c65">Bootstrap</a>(<span class="keyword">const</span> Iterator&amp; begin_iter, </div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;              <span class="keyword">const</span> Iterator&amp; end_iter,</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;              <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> size) : </div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;      _begin(begin_iter), indices(size) {</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;      <span class="keyword">typename</span> indices_type::iterator it,<a class="code" href="a00022.html#ad24ea9ecd3e22ef6fe27407b38ee0524">end</a>;</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;      <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> range = end_iter-begin_iter;</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;      <span class="keywordflow">for</span>(it=indices.begin(),end=indices.end();</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;          it != <a class="code" href="a00022.html#ad24ea9ecd3e22ef6fe27407b38ee0524">end</a>;</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;          ++it)</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;        *it = (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>)<a class="code" href="a00156.html#a63a869d5b9fe61b984623e3ecd99a033">gaml::random::uniform</a>(0,range);</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    }</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;</div>
<div class="line"><a name="l00117"></a><span class="lineno"><a class="code" href="a00022.html#a291f18bcfc2213b7431d5874da30202a">  117</a></span>&#160;    <a class="code" href="a00022.html">Bootstrap&lt;Iterator&gt;</a>&amp; <a class="code" href="a00022.html#a291f18bcfc2213b7431d5874da30202a">operator=</a>(<span class="keyword">const</span> <a class="code" href="a00022.html">Bootstrap&lt;Iterator&gt;</a>&amp; cp) {</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;      <span class="keywordflow">if</span>(<span class="keyword">this</span> != &amp;cp) {</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;        _begin = cp._begin;</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;        indices = cp.indices;</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;      }</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;      <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    }</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;</div>
<div class="line"><a name="l00128"></a><span class="lineno"><a class="code" href="a00022.html#ac4a85688b8e8e238655b20ad2dea998f">  128</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="a00022.html#ac4a85688b8e8e238655b20ad2dea998f">has</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i) {</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;      <span class="keyword">typename</span> indices_type::iterator it,<a class="code" href="a00022.html#ad24ea9ecd3e22ef6fe27407b38ee0524">end</a>;</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;      <span class="keywordtype">bool</span> res = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;      <span class="keywordflow">for</span>(it=indices.begin(),end=indices.end();</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;          ! res &amp;&amp; it != <a class="code" href="a00022.html#ad24ea9ecd3e22ef6fe27407b38ee0524">end</a>;</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;          ++it)</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;        res = *it == i;</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;      <span class="keywordflow">return</span> res;</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    }</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;</div>
<div class="line"><a name="l00141"></a><span class="lineno"><a class="code" href="a00022.html#a42df915c850a291eddc69816f8cf4c96">  141</a></span>&#160;    <span class="keyword">const</span> indices_type <a class="code" href="a00022.html#a42df915c850a291eddc69816f8cf4c96">get_indices</a>(<span class="keywordtype">void</span>)<span class="keyword"> const </span>{<span class="keywordflow">return</span> indices;}</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    </div>
<div class="line"><a name="l00143"></a><span class="lineno"><a class="code" href="a00022.html#a9678ca6bb4a8d416662a96e18eaae8ce">  143</a></span>&#160;    <a class="code" href="a00023.html">iterator</a> <a class="code" href="a00022.html#a9678ca6bb4a8d416662a96e18eaae8ce">begin</a>() {<span class="keywordflow">return</span> <a class="code" href="a00022.html#ad99e77e97a9025ae57b801af266c44db">iterator</a>(_begin, indices.begin()); }</div>
<div class="line"><a name="l00144"></a><span class="lineno"><a class="code" href="a00022.html#ad24ea9ecd3e22ef6fe27407b38ee0524">  144</a></span>&#160;    <a class="code" href="a00023.html">iterator</a> <a class="code" href="a00022.html#ad24ea9ecd3e22ef6fe27407b38ee0524">end</a>()   {<span class="keywordflow">return</span> <a class="code" href="a00022.html#ad99e77e97a9025ae57b801af266c44db">iterator</a>(_begin, indices.end()); }</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;  };</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;  </div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;  <span class="keyword">template</span>&lt;<span class="keyword">typename</span> Iterator&gt;</div>
<div class="line"><a name="l00148"></a><span class="lineno"><a class="code" href="a00143.html#aaf25f90967186d46c65dee0338ef785c">  148</a></span>&#160;  <a class="code" href="a00022.html">Bootstrap&lt;Iterator&gt;</a> <a class="code" href="a00143.html#aaf25f90967186d46c65dee0338ef785c">bootstrap</a>(<span class="keyword">const</span> Iterator&amp; begin, <span class="keyword">const</span> Iterator&amp; end,<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> size) {</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="a00022.html">Bootstrap&lt;Iterator&gt;</a>(begin,end,size);</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;  }</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;  <span class="keyword">namespace </span>risk {</div>
<div class="line"><a name="l00153"></a><span class="lineno"><a class="code" href="a00158.html">  153</a></span>&#160;    <span class="keyword">namespace </span><a class="code" href="a00143.html#aaf25f90967186d46c65dee0338ef785c">bootstrap</a> {</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;      <span class="keyword">template</span>&lt;<span class="keyword">typename</span> LOSS&gt;</div>
<div class="line"><a name="l00156"></a><span class="lineno"><a class="code" href="a00097.html">  156</a></span>&#160;      <span class="keyword">class </span><a class="code" href="a00097.html">LeaveOneOut</a> {</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;      <span class="keyword">private</span>:</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;        LOSS loss;</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> nb_sets;</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;        <span class="keywordtype">bool</span> verbose;</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;      <span class="keyword">public</span>:</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;</div>
<div class="line"><a name="l00165"></a><span class="lineno"><a class="code" href="a00097.html#a82013cc339b7ce1ed88fccd1d1480f38">  165</a></span>&#160;        <a class="code" href="a00097.html#a82013cc339b7ce1ed88fccd1d1480f38">LeaveOneOut</a>(<span class="keyword">const</span> LOSS&amp; l, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> nb_bootstrapped_sets, <span class="keywordtype">bool</span> verbosity) </div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;          : loss(l), nb_sets(nb_bootstrapped_sets), verbose(verbosity) {}</div>
<div class="line"><a name="l00167"></a><span class="lineno"><a class="code" href="a00097.html#af74d84542370505bf76182c32b550702">  167</a></span>&#160;        <a class="code" href="a00097.html#a82013cc339b7ce1ed88fccd1d1480f38">LeaveOneOut</a>(<span class="keyword">const</span> <a class="code" href="a00097.html">LeaveOneOut</a>&amp; other)</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;          : loss(other.loss), nb_sets(other.nb_sets), verbose(other.verbose) {}</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;        </div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;        <span class="keyword">template</span>&lt;<span class="keyword">typename</span> Learner, <span class="keyword">typename</span> DataIterator, <span class="keyword">typename</span> InputOf, <span class="keyword">typename</span> OutputOf&gt; </div>
<div class="line"><a name="l00171"></a><span class="lineno"><a class="code" href="a00097.html#a3ccdbf2e8c5771effd595729dd9c8160">  171</a></span>&#160;        <span class="keywordtype">double</span> <a class="code" href="a00097.html#a3ccdbf2e8c5771effd595729dd9c8160">operator()</a>(<span class="keyword">const</span> Learner&amp; <a class="code" href="a00153.html#a89a33b6f1d995b64df36b9dca77039db">learner</a>,<span class="keyword">const</span> DataIterator&amp; begin, <span class="keyword">const</span> DataIterator&amp; end,</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;                          <span class="keyword">const</span> InputOf&amp; inputOf, <span class="keyword">const</span> OutputOf&amp; outputOf)<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;          <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> size = end - begin;</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;          std::vector&lt;gaml::Bootstrap&lt;DataIterator&gt; &gt; sets;</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;          std::vector&lt;typename Learner::predictor_type&gt; f;</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;          std::vector&lt;std::set&lt;int&gt; &gt; C(size);</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;          <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> b,i;</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;          <span class="keywordflow">if</span>(verbose)</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;            std::cout &lt;&lt; <span class="stringliteral">&quot;Making &quot;</span> &lt;&lt; nb_sets </div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;                      &lt;&lt; <span class="stringliteral">&quot; bootstrapped sets.&quot;</span> &lt;&lt; std::endl;</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;       </div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;          <span class="keywordflow">for</span>(b = 0; b &lt; nb_sets; ++b)</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;            sets.push_back(<a class="code" href="a00143.html#aaf25f90967186d46c65dee0338ef785c">gaml::bootstrap</a>(begin,end,size));</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;          </div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;          <span class="keywordflow">if</span>(verbose) {</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;            <span class="keywordflow">for</span>(b = 0; b &lt; nb_sets; ++b) {</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;              std::cout &lt;&lt; <span class="stringliteral">&quot;  Set &quot;</span> &lt;&lt; std::setw(3) &lt;&lt; b+1 &lt;&lt; <span class="charliteral">&#39;/&#39;</span> &lt;&lt; nb_sets &lt;&lt; <span class="stringliteral">&quot; :&quot;</span>;</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;              <span class="keywordflow">for</span>(<span class="keyword">auto</span> elem : sets[b].get_indices())</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;                std::cout &lt;&lt; <span class="charliteral">&#39; &#39;</span> &lt;&lt; std::setw(3) &lt;&lt; elem;</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;              std::cout &lt;&lt; std::endl;</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;            }</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;          }</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;            </div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;          <span class="keywordflow">if</span>(verbose)</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;            std::cout &lt;&lt; <span class="stringliteral">&quot;Computing the non-belong-to set list for each example.&quot;</span> &lt;&lt; std::endl;</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;          <span class="keywordflow">for</span>(i = 0; i &lt; size; ++i) {</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;            <span class="keyword">auto</span>&amp; Ci = C[i];</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;            <span class="keywordflow">for</span>(b = 0; b &lt; nb_sets; ++b)</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;              <span class="keywordflow">if</span>(!(sets[b].has(i)))</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;                Ci.insert(Ci.begin(),b);</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;            <span class="comment">// Ci contains the indices of sets that can be used to test i.</span></div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;          }</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;          <span class="keywordflow">if</span>(verbose) {</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;            <span class="keywordflow">for</span>(i = 0; i &lt; size; ++i) {</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;              std::cout &lt;&lt; <span class="stringliteral">&quot;  sample &quot;</span> &lt;&lt; std::setw(3) &lt;&lt; i &lt;&lt; <span class="stringliteral">&quot; is not in sets {&quot;</span>;</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;              <span class="keywordflow">for</span>(<span class="keyword">auto</span> elem : C[i])</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;                std::cout &lt;&lt; <span class="charliteral">&#39; &#39;</span> &lt;&lt; elem+1;</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;              std::cout &lt;&lt; <span class="stringliteral">&quot; }&quot;</span> &lt;&lt; std::endl;</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;            }</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;          }</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;          <span class="keywordflow">if</span>(verbose)</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;            std::cout &lt;&lt; <span class="stringliteral">&quot;Learning on these sets.&quot;</span> &lt;&lt; std::endl;</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;          <span class="keywordflow">for</span>(b = 0; b &lt; nb_sets; ++b) {</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;            std::ostringstream ostr;</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;            <span class="keywordflow">if</span>(verbose) {</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;              ostr &lt;&lt; <span class="stringliteral">&quot;  Set &quot;</span> &lt;&lt; std::setw(3) &lt;&lt; b+1 &lt;&lt; <span class="charliteral">&#39;/&#39;</span> &lt;&lt; nb_sets &lt;&lt; <span class="stringliteral">&quot; : &quot;</span>;</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;              std::cout &lt;&lt; ostr.str() &lt;&lt; <span class="stringliteral">&quot;learning...\r&quot;</span> &lt;&lt; std::flush;</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;            }</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;            <a class="code" href="a00022.html">gaml::Bootstrap&lt;DataIterator&gt;</a>&amp; Zb = sets[b];</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;            f.push_back(<a class="code" href="a00153.html#a89a33b6f1d995b64df36b9dca77039db">learner</a>(Zb.<a class="code" href="a00022.html#a9678ca6bb4a8d416662a96e18eaae8ce">begin</a>(),Zb.<a class="code" href="a00022.html#ad24ea9ecd3e22ef6fe27407b38ee0524">end</a>(),inputOf,outputOf));</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;            <span class="keywordflow">if</span>(verbose)</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;              std::cout &lt;&lt; ostr.str() &lt;&lt; <span class="stringliteral">&quot;Done.      &quot;</span> &lt;&lt; std::endl;</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;          }</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;          <span class="keywordflow">if</span>(verbose)</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;            std::cout &lt;&lt; <span class="stringliteral">&quot;Testing each sample&quot;</span> &lt;&lt; std::endl;</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;          <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> cardD = 0;</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;          <span class="keywordtype">double</span>       sumD  = 0;</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;          DataIterator zi;</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;          <span class="keywordflow">for</span>(i = 0, zi = begin; i &lt; size; ++i,++zi) {</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;            <span class="keywordflow">if</span>(verbose)</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;              std::cout &lt;&lt; <span class="stringliteral">&quot;  &quot;</span> &lt;&lt; std::setw(4) &lt;&lt; i+1 &lt;&lt; <span class="charliteral">&#39;/&#39;</span> &lt;&lt; size &lt;&lt; <span class="stringliteral">&quot; : &quot;</span>;</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;            std::set&lt;int&gt;&amp; Ci = C[i];</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;            <span class="keywordflow">if</span>(Ci.empty()) {</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;              <span class="keywordflow">if</span>(verbose)</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;                std::cout &lt;&lt; <span class="stringliteral">&quot;belongs to all sets.&quot;</span> &lt;&lt; std::endl;</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;            }</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;            <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;              <span class="keyword">const</span> <span class="keyword">typename</span> Learner::predictor_type::input_type&amp; xi = inputOf(*zi);</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;              <span class="keyword">const</span> <span class="keyword">typename</span> Learner::predictor_type::output_type yi = outputOf(*zi);</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;              <span class="keywordtype">double</span> sum = 0;</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;              <span class="keywordflow">for</span>(<span class="keyword">auto</span> j : Ci)</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;                sum += loss(f[j](xi),yi);</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;              sum /= Ci.size();</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;              <span class="keywordflow">if</span>(verbose)</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;                std::cout &lt;&lt; sum &lt;&lt; <span class="stringliteral">&quot; (using &quot;</span> &lt;&lt; Ci.size() &lt;&lt; <span class="stringliteral">&quot; samples)&quot;</span> &lt;&lt; std::endl;</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;              ++cardD;</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;              sumD += sum;</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;            }</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;          }</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;          <span class="keywordflow">if</span>(cardD == 0)</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;            <span class="keywordflow">throw</span> <a class="code" href="a00036.html">gaml::exception::Bootstrap</a>(<span class="stringliteral">&quot;Every sample belongs to all bootstrapped sets&quot;</span>);</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;       </div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;          <span class="keywordflow">return</span> sumD/(double)cardD;</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;        }</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;      };</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;      </div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;      </div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;      <span class="keyword">template</span>&lt;<span class="keyword">typename</span> LOSS&gt;</div>
<div class="line"><a name="l00272"></a><span class="lineno"><a class="code" href="a00158.html#a01ac66100a1596566398441fffb1c5dd">  272</a></span>&#160;      <a class="code" href="a00097.html">LeaveOneOut&lt;LOSS&gt;</a> <a class="code" href="a00158.html#a01ac66100a1596566398441fffb1c5dd">leave_one_out</a>(<span class="keyword">const</span> LOSS&amp; l, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> nb_sets, <span class="keywordtype">bool</span> verbosity) {</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="a00097.html">LeaveOneOut&lt;LOSS&gt;</a>(l,nb_sets,verbosity);</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;      }</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;      </div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;      <span class="keyword">template</span>&lt;<span class="keyword">typename</span> LOSS&gt;</div>
<div class="line"><a name="l00278"></a><span class="lineno"><a class="code" href="a00098.html">  278</a></span>&#160;      <span class="keyword">class </span><a class="code" href="a00098.html">R632</a> {</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;      <span class="keyword">private</span>: </div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;        LOSS loss;</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> nb_sets;</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;        <span class="keywordtype">bool</span> verbose;</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;      <span class="keyword">public</span>:</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;</div>
<div class="line"><a name="l00287"></a><span class="lineno"><a class="code" href="a00098.html#a93a5793bc15080a49750e9325c536546">  287</a></span>&#160;        <a class="code" href="a00098.html#a93a5793bc15080a49750e9325c536546">R632</a>(<span class="keyword">const</span> LOSS&amp; l, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> nb_bootstrapped_sets, <span class="keywordtype">bool</span> verbosity) </div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;          : loss(l), nb_sets(nb_bootstrapped_sets), verbose(verbosity) {}</div>
<div class="line"><a name="l00289"></a><span class="lineno"><a class="code" href="a00098.html#a310278446c23e63bf82eed59a366cfd0">  289</a></span>&#160;        <a class="code" href="a00098.html#a93a5793bc15080a49750e9325c536546">R632</a>(<span class="keyword">const</span> <a class="code" href="a00098.html">R632</a>&amp; other)</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;          : loss(other.loss), nb_sets(other.nb_sets), verbose(other.verbose) {}</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;        </div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;        <span class="keyword">template</span>&lt;<span class="keyword">typename</span> Learner, <span class="keyword">typename</span> DataIterator, <span class="keyword">typename</span> InputOf, <span class="keyword">typename</span> OutputOf&gt; </div>
<div class="line"><a name="l00293"></a><span class="lineno"><a class="code" href="a00098.html#a24566b0883e06a8d704fbeb2215877a2">  293</a></span>&#160;        <span class="keywordtype">double</span> <a class="code" href="a00098.html#a24566b0883e06a8d704fbeb2215877a2">operator()</a>(<span class="keyword">const</span> Learner&amp; <a class="code" href="a00153.html#a89a33b6f1d995b64df36b9dca77039db">learner</a>,<span class="keyword">const</span> DataIterator&amp; begin, <span class="keyword">const</span> DataIterator&amp; end,</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;                          <span class="keyword">const</span> InputOf&amp; inputOf, <span class="keyword">const</span> OutputOf&amp; outputOf)<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;          <span class="keyword">auto</span> predictor = <a class="code" href="a00153.html#a89a33b6f1d995b64df36b9dca77039db">learner</a>(begin,end,inputOf,outputOf);</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;          <span class="keyword">auto</span> <a class="code" href="a00157.html#a6d9973bf3290ec3c9e0eccc57a63ad46">empirical</a> = <a class="code" href="a00157.html#a6d9973bf3290ec3c9e0eccc57a63ad46">gaml::risk::empirical</a>(loss);</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;          <span class="keywordtype">double</span> Rn      = <a class="code" href="a00157.html#a6d9973bf3290ec3c9e0eccc57a63ad46">empirical</a>(predictor,begin,end,inputOf,outputOf);</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;          <span class="keyword">auto</span> estimated = <a class="code" href="a00158.html#a01ac66100a1596566398441fffb1c5dd">gaml::risk::bootstrap::leave_one_out</a>(loss,nb_sets,<span class="keyword">false</span>);</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;          <span class="keywordtype">double</span> R       = estimated(learner,begin,end,inputOf,outputOf);</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;          <span class="keywordflow">if</span>(verbose)</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;            std::cout &lt;&lt; <span class="stringliteral">&quot;Empirical risk    : Rn     : &quot;</span> &lt;&lt; Rn &lt;&lt; std::endl</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;                      &lt;&lt; <span class="stringliteral">&quot;Bootstrapped risk : R      : &quot;</span> &lt;&lt; R &lt;&lt; std::endl</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;                      &lt;&lt; <span class="stringliteral">&quot;                  : R - Rn : &quot;</span> &lt;&lt; R-Rn &lt;&lt; std::endl;</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;          <span class="keywordflow">return</span> 0.368*Rn + 0.632*R;</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;        }</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;      };</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;      <span class="keyword">template</span>&lt;<span class="keyword">typename</span> LOSS&gt;</div>
<div class="line"><a name="l00309"></a><span class="lineno"><a class="code" href="a00158.html#a4a8e3a40f3ab1a21805db11247fe2a1c">  309</a></span>&#160;      <a class="code" href="a00098.html">R632&lt;LOSS&gt;</a> <a class="code" href="a00158.html#a4a8e3a40f3ab1a21805db11247fe2a1c">r632</a>(<span class="keyword">const</span> LOSS&amp; l, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> nb_sets, <span class="keywordtype">bool</span> verbosity) {</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="a00098.html">R632&lt;LOSS&gt;</a>(l,nb_sets,verbosity);</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;      }</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;</div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;      <span class="keyword">template</span>&lt;<span class="keyword">typename</span> LOSS&gt;</div>
<div class="line"><a name="l00315"></a><span class="lineno"><a class="code" href="a00099.html">  315</a></span>&#160;      <span class="keyword">class </span><a class="code" href="a00099.html">R632Plus</a> {</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;      <span class="keyword">private</span>:</div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;        LOSS loss;</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> nb_sets;</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;        <span class="keywordtype">bool</span> verbose;</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;      <span class="keyword">public</span>:</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;</div>
<div class="line"><a name="l00324"></a><span class="lineno"><a class="code" href="a00099.html#a4ac7007d9c062a05faeddf5cb886e23e">  324</a></span>&#160;        <a class="code" href="a00099.html#a4ac7007d9c062a05faeddf5cb886e23e">R632Plus</a>(<span class="keyword">const</span> LOSS&amp; l, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> nb_bootstrapped_sets, <span class="keywordtype">bool</span> verbosity) </div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;          : loss(l), nb_sets(nb_bootstrapped_sets), verbose(verbosity) {}</div>
<div class="line"><a name="l00326"></a><span class="lineno"><a class="code" href="a00099.html#ac3171c8f768057434238f15a9422837a">  326</a></span>&#160;        <a class="code" href="a00099.html#a4ac7007d9c062a05faeddf5cb886e23e">R632Plus</a>(<span class="keyword">const</span> <a class="code" href="a00099.html">R632Plus</a>&amp; other)</div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;          : loss(other.loss), nb_sets(other.nb_sets), verbose(other.verbose) {}</div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;        </div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;        <span class="keyword">template</span>&lt;<span class="keyword">typename</span> Learner, <span class="keyword">typename</span> DataIterator, <span class="keyword">typename</span> InputOf, <span class="keyword">typename</span> OutputOf&gt; </div>
<div class="line"><a name="l00330"></a><span class="lineno"><a class="code" href="a00099.html#a82f18b9569604e0c16a5b4995d28793e">  330</a></span>&#160;        <span class="keywordtype">double</span> <a class="code" href="a00099.html#a82f18b9569604e0c16a5b4995d28793e">operator()</a>(<span class="keyword">const</span> Learner&amp; <a class="code" href="a00153.html#a89a33b6f1d995b64df36b9dca77039db">learner</a>,<span class="keyword">const</span> DataIterator&amp; begin, <span class="keyword">const</span> DataIterator&amp; end,</div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;                              <span class="keyword">const</span> InputOf&amp; inputOf, <span class="keyword">const</span> OutputOf&amp; outputOf)<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;          <span class="keyword">auto</span> predictor = <a class="code" href="a00153.html#a89a33b6f1d995b64df36b9dca77039db">learner</a>(begin,end,inputOf,outputOf);</div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;          <span class="keyword">auto</span> <a class="code" href="a00157.html#a6d9973bf3290ec3c9e0eccc57a63ad46">empirical</a> = <a class="code" href="a00157.html#a6d9973bf3290ec3c9e0eccc57a63ad46">gaml::risk::empirical</a>(loss);</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;          <span class="keywordtype">double</span> Rn      = <a class="code" href="a00157.html#a6d9973bf3290ec3c9e0eccc57a63ad46">empirical</a>(predictor,begin,end,inputOf,outputOf);</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;          <span class="keyword">auto</span> estimated = <a class="code" href="a00158.html#a01ac66100a1596566398441fffb1c5dd">gaml::risk::bootstrap::leave_one_out</a>(loss,nb_sets,<span class="keyword">false</span>);</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;          <span class="keywordtype">double</span> R       = estimated(learner,begin,end,inputOf,outputOf);</div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;          <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> N = end-begin;</div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;      </div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;          <span class="keywordflow">if</span>(N == 0)</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;            <span class="keywordflow">throw</span> <a class="code" href="a00036.html">gaml::exception::Bootstrap</a>(<span class="stringliteral">&quot;Empty database provided.&quot;</span>);</div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;        </div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;</div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;          DataIterator i,j;</div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;          <span class="keywordtype">double</span> gamma = 0;</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;</div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;          <span class="keywordflow">for</span>(i = begin; i != end; ++i) {</div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;            <span class="keyword">const</span> <span class="keyword">typename</span> Learner::predictor_type::output_type yi = predictor(inputOf(*i));</div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;            <span class="keywordflow">for</span>(j = begin; j != end; ++j)</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;              gamma += loss(outputOf(*j),yi);</div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;          }</div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;          gamma /= N*N;</div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;</div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;          <span class="keywordtype">double</span> r = (R-Rn)/(gamma-Rn);</div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;          <span class="keywordtype">double</span> omega = 0.632/(1-0.368*r);</div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;</div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;          <span class="keywordflow">if</span>(verbose)</div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;            std::cout &lt;&lt; <span class="stringliteral">&quot;Empirical risk           : Rn                        : &quot;</span> &lt;&lt; Rn &lt;&lt; std::endl</div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;                      &lt;&lt; <span class="stringliteral">&quot;Bootstrapped risk        : R                         : &quot;</span> &lt;&lt; R &lt;&lt; std::endl</div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;                      &lt;&lt; <span class="stringliteral">&quot;0-information error rate : gamma                     : &quot;</span> &lt;&lt; gamma &lt;&lt; std::endl</div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;                      &lt;&lt; <span class="stringliteral">&quot;Overfitting rate         : r = (R-Rn)/(gamma-Rn)     : &quot;</span> &lt;&lt; r &lt;&lt; std::endl</div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;                      &lt;&lt; <span class="stringliteral">&quot;Weight                   : omega = 0.632/(1-0.368*r) : &quot;</span> &lt;&lt; omega &lt;&lt; std::endl;</div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;          <span class="keywordflow">return</span> (1-omega)*Rn + omega*R;</div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;        }</div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;      };</div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;</div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;      <span class="keyword">template</span>&lt;<span class="keyword">typename</span> LOSS&gt;</div>
<div class="line"><a name="l00368"></a><span class="lineno"><a class="code" href="a00158.html#ae33b2cab5e4459a0dc7c03c156292982">  368</a></span>&#160;      <a class="code" href="a00099.html">R632Plus&lt;LOSS&gt;</a> <a class="code" href="a00158.html#ae33b2cab5e4459a0dc7c03c156292982">r632plus</a>(<span class="keyword">const</span> LOSS&amp; l, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> nb_sets, <span class="keywordtype">bool</span> verbosity) {</div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="a00099.html">R632Plus&lt;LOSS&gt;</a>(l,nb_sets,verbosity);</div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;      }</div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;    }</div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;  }</div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;}</div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.3.1
</small></address>
</body>
</html>
