<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.3.1"/>
<title>gaml-1.10: gamlVirtual.hpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">gaml-1.10
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.3.1 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="namespaces.html"><span>Namespaces</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
      <li><a href="examples.html"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.html">src</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">gamlVirtual.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="a00168.html">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="preprocessor">#pragma once</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">/*</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> *   Copyright (C) 2012,  Supelec</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> *   Author : Hervé Frezza-Buet, Frédéric Pennerath </span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> *   Contributor :</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> *   This library is free software; you can redistribute it and/or</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> *   modify it under the terms of the GNU General Public</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *   License (GPL) as published by the Free Software Foundation; either</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> *   version 3 of the License, or any later version.</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> *   </span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *   This library is distributed in the hope that it will be useful,</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> *   but WITHOUT ANY WARRANTY; without even the implied warranty of</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> *   General Public License for more details.</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> *   </span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> *   You should have received a copy of the GNU General Public</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> *   License along with this library; if not, write to the Free Software</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> *   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="comment"> *   Contact : herve.frezza-buet@supelec.fr, frederic.pennerath@supelec.fr</span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;</div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &lt;iterator&gt;</span></div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &lt;memory&gt;</span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &lt;stdexcept&gt;</span></div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;</div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="keyword">namespace </span>gaml {</div>
<div class="line"><a name="l00033"></a><span class="lineno"><a class="code" href="a00188.html">   33</a></span>&#160;  <span class="keyword">namespace </span>virtualized {</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> CATEGORY,<span class="keyword">typename</span> VALUE&gt;</div>
<div class="line"><a name="l00039"></a><span class="lineno"><a class="code" href="a00023.html">   39</a></span>&#160;    <span class="keyword">class </span><a class="code" href="a00023.html">base_iterator</a> : <span class="keyword">public</span> std::iterator&lt;CATEGORY, VALUE&gt; {</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    <span class="keyword">public</span>:</div>
<div class="line"><a name="l00041"></a><span class="lineno"><a class="code" href="a00023.html#afa888796974267edc9846f7713aec79b">   41</a></span>&#160;      <span class="keyword">typedef</span> <span class="keyword">typename</span> std::iterator&lt;CATEGORY, VALUE&gt;::difference_type <a class="code" href="a00023.html#afa888796974267edc9846f7713aec79b">difference_type</a>;</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;</div>
<div class="line"><a name="l00043"></a><span class="lineno"><a class="code" href="a00023.html#a7cb3e416214f3971906a8fea734b6aa2">   43</a></span>&#160;      <a class="code" href="a00023.html#a7cb3e416214f3971906a8fea734b6aa2">base_iterator</a>() {}</div>
<div class="line"><a name="l00044"></a><span class="lineno"><a class="code" href="a00023.html#afd66b133bf0dcebdc381f751896b004d">   44</a></span>&#160;      <a class="code" href="a00023.html#afd66b133bf0dcebdc381f751896b004d">base_iterator</a>(<span class="keyword">const</span> <a class="code" href="a00023.html">base_iterator</a>&amp; cp) {}</div>
<div class="line"><a name="l00045"></a><span class="lineno"><a class="code" href="a00023.html#a7a585cfd7ce2669406c75bd3de7e6fa7">   45</a></span>&#160;      <span class="keyword">virtual</span> <a class="code" href="a00023.html#a7a585cfd7ce2669406c75bd3de7e6fa7">~base_iterator</a>() {}</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;      <span class="keyword">virtual</span> <a class="code" href="a00023.html">base_iterator</a>* <a class="code" href="a00023.html#a66b3e37530a0ac683f8ae20fd471f6fa">clone</a>()                    <span class="keyword">const</span>       = 0;</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;      <span class="keyword">virtual</span> <span class="keyword">const</span> VALUE&amp; <span class="keyword">get</span>()                        <span class="keyword">const</span>       = 0;</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;      <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="a00023.html#a1e3b1e3aa2a80acd29f4d5735c4c09d1">is_equal</a>(<span class="keyword">const</span> <a class="code" href="a00023.html">base_iterator</a>&amp; other) <span class="keyword">const</span>       = 0;</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;      <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="a00023.html#a027ecd0bd4e30e168548f7c26a002a05">increment</a>(<span class="keywordtype">void</span>)                                  = 0;</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    };</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> VALUE&gt;</div>
<div class="line"><a name="l00058"></a><span class="lineno"><a class="code" href="a00136.html">   58</a></span>&#160;    <span class="keyword">class </span><a class="code" href="a00023.html">base_iterator</a>&lt;std::random_access_iterator_tag,VALUE&gt; : <span class="keyword">public</span> std::iterator&lt;std::random_access_iterator_tag, VALUE&gt; {</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    <span class="keyword">public</span>:</div>
<div class="line"><a name="l00060"></a><span class="lineno"><a class="code" href="a00136.html#aa7c4868f02e050421006aa2afcb6ee95">   60</a></span>&#160;      <span class="keyword">typedef</span> <span class="keyword">typename</span> std::iterator&lt;std::random_access_iterator_tag, VALUE&gt;::difference_type <a class="code" href="a00136.html#aa7c4868f02e050421006aa2afcb6ee95">difference_type</a>;</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;</div>
<div class="line"><a name="l00062"></a><span class="lineno"><a class="code" href="a00136.html#a36f75dcdd1b3589f6a92dfa7ea3deb0a">   62</a></span>&#160;      <a class="code" href="a00136.html#a36f75dcdd1b3589f6a92dfa7ea3deb0a">base_iterator</a>() {}</div>
<div class="line"><a name="l00063"></a><span class="lineno"><a class="code" href="a00136.html#ab63ef4d2631ad57c926789b821196ca1">   63</a></span>&#160;      <a class="code" href="a00136.html#ab63ef4d2631ad57c926789b821196ca1">base_iterator</a>(<span class="keyword">const</span> <a class="code" href="a00023.html">base_iterator</a>&amp; cp) {}</div>
<div class="line"><a name="l00064"></a><span class="lineno"><a class="code" href="a00136.html#a0851382b80c1947a6f56d44cd410da37">   64</a></span>&#160;      <span class="keyword">virtual</span> <a class="code" href="a00136.html#a0851382b80c1947a6f56d44cd410da37">~base_iterator</a>() {}</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;      <span class="keyword">virtual</span> <a class="code" href="a00023.html">base_iterator</a>* <a class="code" href="a00023.html#a66b3e37530a0ac683f8ae20fd471f6fa">clone</a>()                    <span class="keyword">const</span>       = 0;</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;      <span class="keyword">virtual</span> <span class="keyword">const</span> VALUE&amp; <span class="keyword">get</span>()                        <span class="keyword">const</span>       = 0;</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;      <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="a00023.html#a1e3b1e3aa2a80acd29f4d5735c4c09d1">is_equal</a>(<span class="keyword">const</span> <a class="code" href="a00023.html">base_iterator</a>&amp; other) <span class="keyword">const</span>       = 0;</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;      <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="a00023.html#a027ecd0bd4e30e168548f7c26a002a05">increment</a>(<span class="keywordtype">void</span>)                                  = 0;</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;      <span class="keyword">virtual</span> <span class="keywordtype">void</span> decrement(<span class="keywordtype">void</span>)                                  = 0;</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;      <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="a00023.html#a027ecd0bd4e30e168548f7c26a002a05">increment</a>(<a class="code" href="a00023.html#afa888796974267edc9846f7713aec79b">difference_type</a> i)                     = 0;</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;      <span class="keyword">virtual</span> <span class="keywordtype">void</span> decrement(<a class="code" href="a00023.html#afa888796974267edc9846f7713aec79b">difference_type</a> i)                     = 0;</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;      <span class="keyword">virtual</span> <a class="code" href="a00023.html#afa888796974267edc9846f7713aec79b">difference_type</a>  distance(<span class="keyword">const</span> <a class="code" href="a00023.html">base_iterator</a>&amp; other) = 0;</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    };</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    </div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> CATEGORY, <span class="keyword">typename</span> VALUE&gt;</div>
<div class="line"><a name="l00081"></a><span class="lineno"><a class="code" href="a00137.html">   81</a></span>&#160;    <span class="keyword">class </span><a class="code" href="a00137.html">iterator</a> : <span class="keyword">public</span> <a class="code" href="a00023.html">base_iterator</a>&lt;CATEGORY, VALUE&gt; {</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    <span class="keyword">public</span>:</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;      </div>
<div class="line"><a name="l00084"></a><span class="lineno"><a class="code" href="a00137.html#ae7e2c987b571c2485ad6c717b66bf1f7">   84</a></span>&#160;      <span class="keyword">typedef</span> <a class="code" href="a00023.html">base_iterator&lt;CATEGORY, VALUE&gt;</a>                           <a class="code" href="a00137.html#ae7e2c987b571c2485ad6c717b66bf1f7">base_type</a>;</div>
<div class="line"><a name="l00085"></a><span class="lineno"><a class="code" href="a00137.html#a90848e9407c330f4a675edf3b29d0b37">   85</a></span>&#160;      <span class="keyword">typedef</span> <a class="code" href="a00023.html">base_iterator&lt;CATEGORY, VALUE&gt;</a>                           <a class="code" href="a00137.html#a90848e9407c330f4a675edf3b29d0b37">iterator_type</a>;</div>
<div class="line"><a name="l00086"></a><span class="lineno"><a class="code" href="a00137.html#a8176999c93584128c1b02c70a4ca1a22">   86</a></span>&#160;      <span class="keyword">typedef</span> VALUE                                                    <a class="code" href="a00137.html#a8176999c93584128c1b02c70a4ca1a22">value_type</a>;</div>
<div class="line"><a name="l00087"></a><span class="lineno"><a class="code" href="a00137.html#aac05a17c2e374fd5edd1a49ee7f37074">   87</a></span>&#160;      <span class="keyword">typedef</span> <span class="keyword">typename</span> std::iterator&lt;CATEGORY, VALUE&gt;::difference_type <a class="code" href="a00137.html#aac05a17c2e374fd5edd1a49ee7f37074">difference_type</a>;</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    <span class="keyword">private</span>:</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;      </div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;      std::unique_ptr&lt;iterator_type&gt; it_ptr;</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;      </div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    <span class="keyword">public</span>:</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;      </div>
<div class="line"><a name="l00095"></a><span class="lineno"><a class="code" href="a00137.html#ac46a6ac1f5a508f789a843be410e32a7">   95</a></span>&#160;      <a class="code" href="a00137.html#ac46a6ac1f5a508f789a843be410e32a7">iterator</a>() : <a class="code" href="a00023.html">base_type</a>(), it_ptr() {}</div>
<div class="line"><a name="l00096"></a><span class="lineno"><a class="code" href="a00137.html#a93c103a01f34fbcaf2fe189ea40ac9b4">   96</a></span>&#160;      <a class="code" href="a00137.html#a93c103a01f34fbcaf2fe189ea40ac9b4">iterator</a>(<span class="keyword">const</span> <a class="code" href="a00023.html">iterator_type</a>&amp; iter) : <a class="code" href="a00023.html">base_type</a>(), it_ptr(iter.<a class="code" href="a00137.html#a23edbf657a8d5b8f9b64818ce7a46f4f">clone</a>()) {}</div>
<div class="line"><a name="l00097"></a><span class="lineno"><a class="code" href="a00137.html#a2e80ccc5eb8b12deae36cee55848f536">   97</a></span>&#160;      <a class="code" href="a00137.html#a2e80ccc5eb8b12deae36cee55848f536">iterator</a>(<span class="keyword">const</span> <a class="code" href="a00137.html">iterator</a>&amp; cp) : <a class="code" href="a00023.html">base_type</a>(), it_ptr() {</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;        <span class="keywordflow">if</span>(cp.it_ptr != <span class="keyword">nullptr</span>) {</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;          std::unique_ptr&lt;iterator_type&gt; other(cp.it_ptr-&gt;clone());</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;          it_ptr = std::move(other);</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;        }</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;      }</div>
<div class="line"><a name="l00103"></a><span class="lineno"><a class="code" href="a00137.html#ae48e2173083d5df8a93d0617bc2e2e91">  103</a></span>&#160;      <span class="keyword">virtual</span> <a class="code" href="a00137.html#ae48e2173083d5df8a93d0617bc2e2e91">~iterator</a>() {}</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;      </div>
<div class="line"><a name="l00106"></a><span class="lineno"><a class="code" href="a00137.html#a021a350b7b84138b99e63d53e286e6bf">  106</a></span>&#160;      <a class="code" href="a00137.html">iterator</a>&amp; <a class="code" href="a00137.html#a021a350b7b84138b99e63d53e286e6bf">operator=</a>(<span class="keyword">const</span> <a class="code" href="a00137.html">iterator</a>&amp; cp) {</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;        <span class="keywordflow">if</span>(&amp;cp != <span class="keyword">this</span>) {</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;          <span class="keywordflow">if</span>(cp.it_ptr == <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;            it_ptr = <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;          <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;            std::unique_ptr&lt;iterator_type&gt; other(cp.it_ptr-&gt;clone());</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;            it_ptr = std::move(other);</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;          }</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;        }</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;        <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;      }</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;</div>
<div class="line"><a name="l00118"></a><span class="lineno"><a class="code" href="a00137.html#a05d2777c085ad94d86d5f510039ecfcf">  118</a></span>&#160;      <a class="code" href="a00137.html">iterator</a>&amp; <a class="code" href="a00137.html#a05d2777c085ad94d86d5f510039ecfcf">operator++</a>() {</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;        it_ptr-&gt;increment();</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;        <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;      }</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;</div>
<div class="line"><a name="l00123"></a><span class="lineno"><a class="code" href="a00137.html#a63c0d57f532a78899c353b42da58410e">  123</a></span>&#160;      <a class="code" href="a00137.html">iterator</a>  <a class="code" href="a00137.html#a63c0d57f532a78899c353b42da58410e">operator++</a>(<span class="keywordtype">int</span>) {</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;        <a class="code" href="a00137.html">iterator</a> res = *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;        ++*<span class="keyword">this</span>; </div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;        <span class="keywordflow">return</span> res;</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;      }</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;</div>
<div class="line"><a name="l00129"></a><span class="lineno"><a class="code" href="a00137.html#aeb215265a741355e8e2dcbe4a9bf112b">  129</a></span>&#160;      <span class="keyword">const</span> <a class="code" href="a00137.html#a8176999c93584128c1b02c70a4ca1a22">value_type</a>&amp; <a class="code" href="a00137.html#aeb215265a741355e8e2dcbe4a9bf112b">operator*</a>()<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;        <span class="keywordflow">return</span> it_ptr-&gt;get();</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;      }</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;</div>
<div class="line"><a name="l00133"></a><span class="lineno"><a class="code" href="a00137.html#a4fb0662412c1ff93594a1b47575e4d37">  133</a></span>&#160;      <span class="keywordtype">bool</span> <a class="code" href="a00137.html#a4fb0662412c1ff93594a1b47575e4d37">operator==</a>(<span class="keyword">const</span> <a class="code" href="a00137.html">iterator</a>&amp; other)<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;        <span class="keywordflow">if</span>(it_ptr == <span class="keyword">nullptr</span>) </div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;          <span class="keywordflow">if</span>(other.it_ptr == <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;          <span class="keywordflow">else</span></div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;        <span class="keywordflow">else</span></div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;          <span class="keywordflow">if</span>(other.it_ptr == <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;          <span class="keywordflow">else</span></div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;            <span class="keywordflow">return</span> (*it_ptr).is_equal(*(other.it_ptr));</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;      }</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;</div>
<div class="line"><a name="l00146"></a><span class="lineno"><a class="code" href="a00137.html#a781f6d2632408f0db4be741601544152">  146</a></span>&#160;      <span class="keywordtype">bool</span> <a class="code" href="a00137.html#a781f6d2632408f0db4be741601544152">operator!=</a>(<span class="keyword">const</span> <a class="code" href="a00137.html">iterator</a>&amp; other)<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;        <span class="keywordflow">return</span> !(*<span class="keyword">this</span> == other);</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;      }</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;</div>
<div class="line"><a name="l00151"></a><span class="lineno"><a class="code" href="a00137.html#a23edbf657a8d5b8f9b64818ce7a46f4f">  151</a></span>&#160;      <span class="keyword">virtual</span> <a class="code" href="a00023.html">base_type</a>* <a class="code" href="a00137.html#a23edbf657a8d5b8f9b64818ce7a46f4f">clone</a>()<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">new</span> <a class="code" href="a00137.html#ac46a6ac1f5a508f789a843be410e32a7">iterator</a>(*<span class="keyword">this</span>);</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;      }</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;</div>
<div class="line"><a name="l00155"></a><span class="lineno"><a class="code" href="a00137.html#a9a1c89185810cf1c7e0ca84f76f3f57d">  155</a></span>&#160;      <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="a00137.html#a9a1c89185810cf1c7e0ca84f76f3f57d">increment</a>(<span class="keywordtype">void</span>) {</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;        ++*<span class="keyword">this</span>; </div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;      }</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;</div>
<div class="line"><a name="l00159"></a><span class="lineno"><a class="code" href="a00137.html#a913b7a0e3517a6a8c8418a2d5e809c0e">  159</a></span>&#160;      <span class="keyword">virtual</span> <span class="keyword">const</span> VALUE&amp; <span class="keyword">get</span>() <span class="keyword">const</span> {</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;        <span class="keywordflow">return</span> *(*this);</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;      };</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;</div>
<div class="line"><a name="l00163"></a><span class="lineno"><a class="code" href="a00137.html#aa7f108e46ecab3c2984e39c19a42bb9f">  163</a></span>&#160;      <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="a00137.html#aa7f108e46ecab3c2984e39c19a42bb9f">is_equal</a>(<span class="keyword">const</span> <a class="code" href="a00023.html">base_type</a>&amp; other)<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;        <span class="keywordflow">return</span> *<span class="keyword">this</span> == other;</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;      }</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    };</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    </div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> VALUE&gt;</div>
<div class="line"><a name="l00174"></a><span class="lineno"><a class="code" href="a00138.html">  174</a></span>&#160;    <span class="keyword">class </span><a class="code" href="a00137.html">iterator</a>&lt;std::random_access_iterator_tag,VALUE&gt; : <span class="keyword">public</span> <a class="code" href="a00023.html">base_iterator</a>&lt;std::random_access_iterator_tag, VALUE&gt; {</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    <span class="keyword">public</span>:</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;      </div>
<div class="line"><a name="l00177"></a><span class="lineno"><a class="code" href="a00138.html#a2db5afe24cc8a2951450b7f5a88cf4e2">  177</a></span>&#160;      <span class="keyword">typedef</span> <a class="code" href="a00136.html">base_iterator&lt;std::random_access_iterator_tag, VALUE&gt;</a>                           <a class="code" href="a00138.html#a2db5afe24cc8a2951450b7f5a88cf4e2">base_type</a>;</div>
<div class="line"><a name="l00178"></a><span class="lineno"><a class="code" href="a00138.html#a3aefaf3fe4278ee78d7c87bcea96fda6">  178</a></span>&#160;      <span class="keyword">typedef</span> <a class="code" href="a00136.html">base_iterator&lt;std::random_access_iterator_tag, VALUE&gt;</a>                           <a class="code" href="a00138.html#a3aefaf3fe4278ee78d7c87bcea96fda6">iterator_type</a>;</div>
<div class="line"><a name="l00179"></a><span class="lineno"><a class="code" href="a00138.html#a21e7c704b2d75dbb7cf13b73daffc2b6">  179</a></span>&#160;      <span class="keyword">typedef</span> VALUE                                                    <a class="code" href="a00138.html#a21e7c704b2d75dbb7cf13b73daffc2b6">value_type</a>;</div>
<div class="line"><a name="l00180"></a><span class="lineno"><a class="code" href="a00138.html#acb013d0972e28b4f6c9c9fbc2456b01c">  180</a></span>&#160;      <span class="keyword">typedef</span> <span class="keyword">typename</span> std::iterator&lt;std::random_access_iterator_tag, VALUE&gt;::difference_type <a class="code" href="a00138.html#acb013d0972e28b4f6c9c9fbc2456b01c">difference_type</a>;</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    <span class="keyword">private</span>:</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;      </div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;      std::unique_ptr&lt;iterator_type&gt; it_ptr;</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;      </div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    <span class="keyword">public</span>:</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;      </div>
<div class="line"><a name="l00188"></a><span class="lineno"><a class="code" href="a00138.html#a61a5a024317534a2138c8b6ea1e341bf">  188</a></span>&#160;      <a class="code" href="a00138.html#a61a5a024317534a2138c8b6ea1e341bf">iterator</a>() : <a class="code" href="a00136.html">base_type</a>(), it_ptr() {}</div>
<div class="line"><a name="l00189"></a><span class="lineno"><a class="code" href="a00138.html#a370ebee01db819f0bf912856526a7f9f">  189</a></span>&#160;      <a class="code" href="a00138.html#a370ebee01db819f0bf912856526a7f9f">iterator</a>(<span class="keyword">const</span> <a class="code" href="a00136.html">iterator_type</a>&amp; iter) : <a class="code" href="a00136.html">base_type</a>(), it_ptr(iter.<a class="code" href="a00137.html#a23edbf657a8d5b8f9b64818ce7a46f4f">clone</a>()) {}</div>
<div class="line"><a name="l00190"></a><span class="lineno"><a class="code" href="a00138.html#a3e62c84f086f825b4c763f1d6302fb05">  190</a></span>&#160;      <a class="code" href="a00138.html#a3e62c84f086f825b4c763f1d6302fb05">iterator</a>(<span class="keyword">const</span> <a class="code" href="a00137.html">iterator</a>&amp; cp) : <a class="code" href="a00136.html">base_type</a>(), it_ptr() {</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;        <span class="keywordflow">if</span>(cp.it_ptr != <span class="keyword">nullptr</span>) {</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;          std::unique_ptr&lt;iterator_type&gt; other(cp.it_ptr-&gt;clone());</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;          it_ptr = std::move(other);</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;        }</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;      }</div>
<div class="line"><a name="l00196"></a><span class="lineno"><a class="code" href="a00138.html#a32d16d7a4765bca4bb8241bcbd5ec5d7">  196</a></span>&#160;      <span class="keyword">virtual</span> <a class="code" href="a00138.html#a32d16d7a4765bca4bb8241bcbd5ec5d7">~iterator</a>() {}</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;</div>
<div class="line"><a name="l00199"></a><span class="lineno"><a class="code" href="a00138.html#a18eaf454d11cfedd6311547e09575256">  199</a></span>&#160;      <a class="code" href="a00137.html">iterator</a>&amp; <a class="code" href="a00138.html#a18eaf454d11cfedd6311547e09575256">operator--</a>()   {</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;        it_ptr-&gt;decrement();</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;        <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;      }</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;      </div>
<div class="line"><a name="l00204"></a><span class="lineno"><a class="code" href="a00138.html#a862ad0d2727435596114c2b4c9367735">  204</a></span>&#160;      <a class="code" href="a00137.html">iterator</a>&amp; <a class="code" href="a00138.html#a862ad0d2727435596114c2b4c9367735">operator+=</a>(<a class="code" href="a00136.html#aa7c4868f02e050421006aa2afcb6ee95">difference_type</a> diff)   {</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;        it_ptr-&gt;increment(diff);</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;        <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;      }</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;      </div>
<div class="line"><a name="l00209"></a><span class="lineno"><a class="code" href="a00138.html#a3fdc5df5fba6bc62da7fa008f7975217">  209</a></span>&#160;      <a class="code" href="a00137.html">iterator</a>&amp; <a class="code" href="a00138.html#a3fdc5df5fba6bc62da7fa008f7975217">operator-=</a>(<a class="code" href="a00136.html#aa7c4868f02e050421006aa2afcb6ee95">difference_type</a> diff)   {</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;        it_ptr-&gt;decrement(diff);</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;        <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;      }</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;      </div>
<div class="line"><a name="l00214"></a><span class="lineno"><a class="code" href="a00138.html#ae8078a1a07e7b3505a14fb726c4b564d">  214</a></span>&#160;      <a class="code" href="a00137.html">iterator</a>  <a class="code" href="a00138.html#ae8078a1a07e7b3505a14fb726c4b564d">operator--</a>(<span class="keywordtype">int</span>) {</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;        <a class="code" href="a00137.html">iterator</a> res = *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;        --*<span class="keyword">this</span>; </div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;        <span class="keywordflow">return</span> res;</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;      }</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;      </div>
<div class="line"><a name="l00220"></a><span class="lineno"><a class="code" href="a00138.html#ae320048c3d3c5fdf1a3e20a1931a6469">  220</a></span>&#160;      <a class="code" href="a00136.html#aa7c4868f02e050421006aa2afcb6ee95">difference_type</a>  <a class="code" href="a00138.html#ae320048c3d3c5fdf1a3e20a1931a6469">operator-</a>(<span class="keyword">const</span> <a class="code" href="a00137.html">iterator</a>&amp; i)<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;        <span class="keywordflow">if</span>(it_ptr == <span class="keyword">nullptr</span> || i.it_ptr == <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;          <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;gaml::virtualized::iterator : operator-(iter) : null iterator&quot;</span>);</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;        <span class="keywordflow">return</span> i.it_ptr-&gt;distance(*it_ptr);</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;      }</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;      </div>
<div class="line"><a name="l00226"></a><span class="lineno"><a class="code" href="a00138.html#a27793216532d046cbcc30bd9cd711e33">  226</a></span>&#160;      <a class="code" href="a00137.html">iterator</a>  <a class="code" href="a00138.html#a27793216532d046cbcc30bd9cd711e33">operator+</a>(<a class="code" href="a00136.html#aa7c4868f02e050421006aa2afcb6ee95">difference_type</a> i)<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;        <span class="keywordflow">if</span>(it_ptr == <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;          <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;gaml::virtualized::iterator : operator+(diff) : null iterator&quot;</span>);</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;        <a class="code" href="a00137.html">iterator</a> res(*<span class="keyword">this</span>);</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;        res.it_ptr-&gt;increment(i);</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;        <span class="keywordflow">return</span> res;</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;      }</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;</div>
<div class="line"><a name="l00234"></a><span class="lineno"><a class="code" href="a00138.html#a4216cb53720275697f9a78f203e3906e">  234</a></span>&#160;      <a class="code" href="a00137.html">iterator</a> <a class="code" href="a00138.html#a4216cb53720275697f9a78f203e3906e">operator-</a>(<a class="code" href="a00136.html#aa7c4868f02e050421006aa2afcb6ee95">difference_type</a> i)<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;        <span class="keywordflow">if</span>(it_ptr == <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;          <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;gaml::virtualized::iterator : operator-(diff) : null iterator&quot;</span>);</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;        <a class="code" href="a00137.html">iterator</a> res(*<span class="keyword">this</span>);</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;        res.it_ptr-&gt;decrement(i);</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;        <span class="keywordflow">return</span> res;</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;      }</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;</div>
<div class="line"><a name="l00242"></a><span class="lineno"><a class="code" href="a00138.html#ad50c3ca4c37c40f4aa6bb9ecfde2d233">  242</a></span>&#160;      <a class="code" href="a00137.html">iterator</a>&amp; <a class="code" href="a00138.html#ad50c3ca4c37c40f4aa6bb9ecfde2d233">operator=</a>(<span class="keyword">const</span> <a class="code" href="a00137.html">iterator</a>&amp; cp) {</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;        <span class="keywordflow">if</span>(&amp;cp != <span class="keyword">this</span>) {</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;          <span class="keywordflow">if</span>(cp.it_ptr == <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;            it_ptr = <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;          <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;            std::unique_ptr&lt;iterator_type&gt; other(cp.it_ptr-&gt;clone());</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;            it_ptr = std::move(other);</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;          }</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;        }</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;        <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;      }</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;</div>
<div class="line"><a name="l00254"></a><span class="lineno"><a class="code" href="a00138.html#abdbebff45b667b12df8182d6cd1d5034">  254</a></span>&#160;      <a class="code" href="a00137.html">iterator</a>&amp; <a class="code" href="a00138.html#abdbebff45b667b12df8182d6cd1d5034">operator++</a>() {</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;        it_ptr-&gt;increment();</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;        <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;      }</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;</div>
<div class="line"><a name="l00259"></a><span class="lineno"><a class="code" href="a00138.html#a332bd1e17aa9011f0c5d4fe3c7015aa4">  259</a></span>&#160;      <a class="code" href="a00137.html">iterator</a>  <a class="code" href="a00138.html#a332bd1e17aa9011f0c5d4fe3c7015aa4">operator++</a>(<span class="keywordtype">int</span>) {</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;        <a class="code" href="a00137.html">iterator</a> res = *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;        ++*<span class="keyword">this</span>; </div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;        <span class="keywordflow">return</span> res;</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;      }</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;</div>
<div class="line"><a name="l00265"></a><span class="lineno"><a class="code" href="a00138.html#a50436a5b785be09a74237ff701fb6934">  265</a></span>&#160;      <span class="keyword">const</span> <a class="code" href="a00138.html#a21e7c704b2d75dbb7cf13b73daffc2b6">value_type</a>&amp; <a class="code" href="a00138.html#a50436a5b785be09a74237ff701fb6934">operator*</a>()<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;        <span class="keywordflow">return</span> it_ptr-&gt;get();</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;      }</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;</div>
<div class="line"><a name="l00269"></a><span class="lineno"><a class="code" href="a00138.html#af50f71f4538bbd46c3fa08e84c4406a5">  269</a></span>&#160;      <span class="keywordtype">bool</span> <a class="code" href="a00138.html#af50f71f4538bbd46c3fa08e84c4406a5">operator==</a>(<span class="keyword">const</span> <a class="code" href="a00137.html">iterator</a>&amp; other)<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;        <span class="keywordflow">if</span>(it_ptr == <span class="keyword">nullptr</span>) </div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;          <span class="keywordflow">if</span>(other.it_ptr == <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;          <span class="keywordflow">else</span></div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;        <span class="keywordflow">else</span></div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;          <span class="keywordflow">if</span>(other.it_ptr == <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;          <span class="keywordflow">else</span></div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;            <span class="keywordflow">return</span> (*it_ptr).is_equal(*(other.it_ptr));</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;      }</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;</div>
<div class="line"><a name="l00282"></a><span class="lineno"><a class="code" href="a00138.html#a0c8ba19320ce24b2d999b843165f21eb">  282</a></span>&#160;      <span class="keywordtype">bool</span> <a class="code" href="a00138.html#a0c8ba19320ce24b2d999b843165f21eb">operator!=</a>(<span class="keyword">const</span> <a class="code" href="a00137.html">iterator</a>&amp; other)<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;        <span class="keywordflow">return</span> !(*<span class="keyword">this</span> == other);</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;      }</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;</div>
<div class="line"><a name="l00287"></a><span class="lineno"><a class="code" href="a00138.html#ac50b9fb06e9444c699e8df20e4cd1151">  287</a></span>&#160;      <span class="keyword">virtual</span> <a class="code" href="a00136.html">base_type</a>* <a class="code" href="a00138.html#ac50b9fb06e9444c699e8df20e4cd1151">clone</a>()<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">new</span> <a class="code" href="a00137.html#ac46a6ac1f5a508f789a843be410e32a7">iterator</a>(*<span class="keyword">this</span>);</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;      }</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;</div>
<div class="line"><a name="l00291"></a><span class="lineno"><a class="code" href="a00138.html#a86ca6962e975e3590858c68dade8a111">  291</a></span>&#160;      <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="a00138.html#a86ca6962e975e3590858c68dade8a111">increment</a>(<span class="keywordtype">void</span>) {</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;        ++*<span class="keyword">this</span>; </div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;      }</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;</div>
<div class="line"><a name="l00295"></a><span class="lineno"><a class="code" href="a00138.html#a3942a9a3b7792e686af71ac6c403b49f">  295</a></span>&#160;      <span class="keyword">virtual</span> <span class="keyword">const</span> VALUE&amp; <span class="keyword">get</span>() <span class="keyword">const</span> {</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;        <span class="keywordflow">return</span> *(*this);</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;      };</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;</div>
<div class="line"><a name="l00299"></a><span class="lineno"><a class="code" href="a00138.html#ac639de39f3d0c8f6b94df671938837b3">  299</a></span>&#160;      <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="a00138.html#ac639de39f3d0c8f6b94df671938837b3">is_equal</a>(<span class="keyword">const</span> <a class="code" href="a00136.html">base_type</a>&amp; other)<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;        <span class="keywordflow">return</span> *<span class="keyword">this</span> == other;</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;      }</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;</div>
<div class="line"><a name="l00303"></a><span class="lineno"><a class="code" href="a00138.html#a6fa8cc00d18337777a3db7b538f97128">  303</a></span>&#160;      <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="a00138.html#a6fa8cc00d18337777a3db7b538f97128">decrement</a>(<span class="keywordtype">void</span>) {</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;        --(*this);</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;      }</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;</div>
<div class="line"><a name="l00307"></a><span class="lineno"><a class="code" href="a00138.html#a2779c635864a9ad6bff9a093f878586f">  307</a></span>&#160;      <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="a00138.html#a2779c635864a9ad6bff9a093f878586f">increment</a>(<span class="keyword">typename</span> <a class="code" href="a00136.html#aa7c4868f02e050421006aa2afcb6ee95">base_type::difference_type</a> i) {</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;        (*this) += i;</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;      }</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;</div>
<div class="line"><a name="l00311"></a><span class="lineno"><a class="code" href="a00138.html#ac0855a8237238aa663aeafcf432b3168">  311</a></span>&#160;      <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="a00138.html#ac0855a8237238aa663aeafcf432b3168">decrement</a>(<span class="keyword">typename</span> <a class="code" href="a00136.html#aa7c4868f02e050421006aa2afcb6ee95">base_type::difference_type</a> i) {</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;        (*this) -= i;</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;      }</div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;</div>
<div class="line"><a name="l00315"></a><span class="lineno"><a class="code" href="a00138.html#a425b83146aab942e7bab2dab6fc9b9cc">  315</a></span>&#160;      <span class="keyword">virtual</span> <span class="keyword">typename</span> <a class="code" href="a00136.html#aa7c4868f02e050421006aa2afcb6ee95">base_type::difference_type</a> <a class="code" href="a00138.html#a425b83146aab942e7bab2dab6fc9b9cc">distance</a>(<span class="keyword">const</span> <a class="code" href="a00136.html">base_type</a>&amp; other) {</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;        <span class="keyword">auto</span> p_iter = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><a class="code" href="a00137.html">iterator</a>*<span class="keyword">&gt;</span>(&amp;other);</div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;        <span class="keywordflow">return</span> std::distance(*<span class="keyword">this</span>,*p_iter);</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;      }</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;    };</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> CATEGORY,<span class="keyword">typename</span> VALUE&gt;</div>
<div class="line"><a name="l00322"></a><span class="lineno"><a class="code" href="a00139.html">  322</a></span>&#160;    <span class="keyword">class </span><a class="code" href="a00139.html">Sequence</a> {</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;    <span class="keyword">public</span>:</div>
<div class="line"><a name="l00324"></a><span class="lineno"><a class="code" href="a00139.html#ae5ae71f9d79fcf2aeca41640545f188b">  324</a></span>&#160;      <span class="keyword">typedef</span> VALUE                                 <a class="code" href="a00139.html#ae5ae71f9d79fcf2aeca41640545f188b">value_type</a>;</div>
<div class="line"><a name="l00325"></a><span class="lineno"><a class="code" href="a00139.html#ac61b95e8f655443b9cd971416c71516a">  325</a></span>&#160;      <span class="keyword">typedef</span> <a class="code" href="a00137.html">virtualized::iterator&lt;CATEGORY,VALUE&gt;</a> <a class="code" href="a00139.html#ac61b95e8f655443b9cd971416c71516a">iterator</a>;</div>
<div class="line"><a name="l00326"></a><span class="lineno"><a class="code" href="a00139.html#a58a170fd74cd9d8a524ff9878df43076">  326</a></span>&#160;      <span class="keyword">typedef</span> <a class="code" href="a00023.html">base_iterator&lt;CATEGORY, VALUE&gt;</a>        <a class="code" href="a00139.html#a58a170fd74cd9d8a524ff9878df43076">base_type</a>;</div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;</div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;    <span class="keyword">private</span>:</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;</div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;      <a class="code" href="a00137.html">iterator</a> _begin;</div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;      <a class="code" href="a00137.html">iterator</a> _end;</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;</div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;    <span class="keyword">public</span>:</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;</div>
<div class="line"><a name="l00335"></a><span class="lineno"><a class="code" href="a00139.html#a54192e44e95f86600386dc4a621bb797">  335</a></span>&#160;      <a class="code" href="a00139.html#a54192e44e95f86600386dc4a621bb797">Sequence</a>(<span class="keyword">const</span> <a class="code" href="a00023.html">base_type</a>&amp; <a class="code" href="a00139.html#a02ff9584a36190f2a1ef79ba166fe0bb">begin</a>, </div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;               <span class="keyword">const</span> <a class="code" href="a00023.html">base_type</a>&amp; <a class="code" href="a00139.html#a3acd93c319532efb2006c01cf8dc371d">end</a>) </div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;        : _begin(begin), _end(end) {}</div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;</div>
<div class="line"><a name="l00339"></a><span class="lineno"><a class="code" href="a00139.html#a6adbc29567a5dd3a9aa7c1ebc4525dfe">  339</a></span>&#160;      <a class="code" href="a00139.html#a6adbc29567a5dd3a9aa7c1ebc4525dfe">Sequence</a>(<span class="keyword">const</span> <a class="code" href="a00139.html">Sequence</a>&amp; copy) : _begin(copy._begin), _end(copy.<a class="code" href="a00139.html#a3acd93c319532efb2006c01cf8dc371d">end</a>()) {}</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;</div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;      </div>
<div class="line"><a name="l00342"></a><span class="lineno"><a class="code" href="a00139.html#a02ff9584a36190f2a1ef79ba166fe0bb">  342</a></span>&#160;      <span class="keyword">const</span> <a class="code" href="a00137.html">iterator</a>&amp; <a class="code" href="a00139.html#a02ff9584a36190f2a1ef79ba166fe0bb">begin</a>()<span class="keyword"> const </span>{<span class="keywordflow">return</span> _begin;}</div>
<div class="line"><a name="l00343"></a><span class="lineno"><a class="code" href="a00139.html#a3acd93c319532efb2006c01cf8dc371d">  343</a></span>&#160;      <span class="keyword">const</span> <a class="code" href="a00137.html">iterator</a>&amp; <a class="code" href="a00139.html#a3acd93c319532efb2006c01cf8dc371d">end</a>()<span class="keyword">   const </span>{<span class="keywordflow">return</span> _end;}</div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;    };</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> Iterator&gt;</div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;    Sequence&lt;typename std::iterator_traits&lt;Iterator&gt;::iterator_category,</div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;             <span class="keyword">typename</span> std::iterator_traits&lt;Iterator&gt;::value_type&gt; </div>
<div class="line"><a name="l00349"></a><span class="lineno"><a class="code" href="a00188.html#a5ed5ee0d44bf8502711371f96dfda03c">  349</a></span>&#160;      <a class="code" href="a00188.html#a5ed5ee0d44bf8502711371f96dfda03c">sequence</a>(<span class="keyword">const</span> Iterator&amp; begin, <span class="keyword">const</span> Iterator&amp; end) {</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;      <span class="keywordflow">return</span> <a class="code" href="a00139.html">Sequence&lt;typename std::iterator_traits&lt;Iterator&gt;::iterator_category</a>,</div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;                      <span class="keyword">typename</span> std::iterator_traits&lt;Iterator&gt;::value_type&gt;(begin,end);</div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;    }</div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;  }</div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;}</div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.3.1
</small></address>
</body>
</html>
