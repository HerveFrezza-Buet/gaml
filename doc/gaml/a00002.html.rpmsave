<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.3.1"/>
<title>gaml-1.10: example-001-001-parser.cpp</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">gaml-1.10
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.3.1 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="namespaces.html"><span>Namespaces</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li><a href="files.html"><span>Files</span></a></li>
      <li><a href="examples.html"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
</div><!-- top -->
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">example-001-001-parser.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><span class="preprocessor">#include&lt;iostream&gt;</span></div>
<div class="line"><span class="preprocessor">#include&lt;fstream&gt;</span></div>
<div class="line"><span class="preprocessor">#include&lt;sstream&gt;</span></div>
<div class="line"><span class="preprocessor">#include&lt;string&gt;</span></div>
<div class="line"><span class="preprocessor">#include&lt;vector&gt;</span></div>
<div class="line"><span class="preprocessor">#include&lt;stdexcept&gt;</span></div>
<div class="line"><span class="preprocessor">#include&lt;algorithm&gt;</span></div>
<div class="line"><span class="preprocessor">#include &lt;iterator&gt;</span> </div>
<div class="line"></div>
<div class="line"><span class="comment">// The ml library.</span></div>
<div class="line"><span class="preprocessor">#include &lt;<a class="code" href="a00141.html">gaml.hpp</a>&gt;</span></div>
<div class="line"></div>
<div class="line"><span class="comment">/*</span></div>
<div class="line"><span class="comment"> * About this example :</span></div>
<div class="line"><span class="comment"> *</span></div>
<div class="line"><span class="comment"> * The following example explains how to read or write datasets by handling them as streams.</span></div>
<div class="line"><span class="comment"> * It shows how to use the JSON built-in parser or to write one&#39;s own custom parser.</span></div>
<div class="line"><span class="comment"> * It also shows how to apply STL algorithms to datasets.</span></div>
<div class="line"><span class="comment"> *</span></div>
<div class="line"><span class="comment"> */</span></div>
<div class="line"></div>
<div class="line"><span class="comment">// Read this file.</span></div>
<div class="line"><span class="preprocessor">#include &lt;example-customer.hpp&gt;</span></div>
<div class="line"></div>
<div class="line"><span class="comment">/* </span></div>
<div class="line"><span class="comment"> * A data parser can be handcrafted to display customer data.</span></div>
<div class="line"><span class="comment"> * Parser defines two methods: </span></div>
<div class="line"><span class="comment"> *   void read (std::istream&amp; input,        Data&amp; d) const;</span></div>
<div class="line"><span class="comment"> *   void write(std::ostream&amp; output, const Data&amp; d) const; </span></div>
<div class="line"><span class="comment"> * In this tutorial, the read method is not implemented.</span></div>
<div class="line"><span class="comment"> */</span></div>
<div class="line"><span class="keyword">struct </span>HandcraftedParser {</div>
<div class="line">        <span class="keyword">typedef</span> customer::Data value_type;</div>
<div class="line"></div>
<div class="line">        <span class="keywordtype">void</span> read(std::ostream&amp; os, value_type&amp; customer)<span class="keyword"> const </span>{</div>
<div class="line">                <span class="comment">// Not implemented.</span></div>
<div class="line">        }</div>
<div class="line"></div>
<div class="line">        <span class="keywordtype">void</span> write(std::ostream&amp; os, <span class="keyword">const</span> value_type&amp; customer)<span class="keyword"> const </span>{</div>
<div class="line">                os &lt;&lt; <span class="stringliteral">&quot;A &quot;</span> &lt;&lt; std::get &lt; 1 &gt; (customer) &lt;&lt; <span class="stringliteral">&quot; years old &quot;</span>;</div>
<div class="line">                <span class="keywordflow">if</span> (std::get &lt; 0 &gt; (customer))</div>
<div class="line">                        os &lt;&lt; <span class="stringliteral">&quot;female&quot;</span>;</div>
<div class="line">                <span class="keywordflow">else</span></div>
<div class="line">                        os &lt;&lt; <span class="stringliteral">&quot;male&quot;</span>;</div>
<div class="line">                os &lt;&lt; <span class="stringliteral">&quot; customer bought&quot;</span> &lt;&lt; std::endl;</div>
<div class="line">                <span class="keyword">auto</span>&amp; purchases = std::get &lt; 2 &gt; (customer);</div>
<div class="line">                <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp; purchase : purchases) {</div>
<div class="line">                        <span class="keyword">auto</span>&amp; date = std::get &lt; 0 &gt; (purchase);</div>
<div class="line">                        os &lt;&lt; <span class="stringliteral">&quot;  on &quot;</span> &lt;&lt; std::get &lt; 2 &gt; (date) &lt;&lt; <span class="stringliteral">&quot;/&quot;</span> &lt;&lt; std::get &lt; 1</div>
<div class="line">                                        &gt; (date) &lt;&lt; <span class="stringliteral">&quot;/&quot;</span> &lt;&lt; std::get &lt; 0</div>
<div class="line">                                        &gt; (date) &lt;&lt; <span class="stringliteral">&quot;:&quot;</span> &lt;&lt; std::endl;</div>
<div class="line">                        <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp; item : std::get &lt; 1 &gt; (purchase))</div>
<div class="line">                                os &lt;&lt; <span class="stringliteral">&quot;    - \&quot;&quot;</span> &lt;&lt; item.first &lt;&lt; <span class="stringliteral">&quot;\&quot; for $&quot;</span> &lt;&lt; item.second</div>
<div class="line">                                                &lt;&lt; std::endl;</div>
<div class="line">                }</div>
<div class="line">                <span class="keyword">auto</span>&amp; ratings = std::get &lt; 3 &gt; (customer);</div>
<div class="line">                <span class="keywordflow">if</span>(! ratings.empty()) {</div>
<div class="line">                        os &lt;&lt; <span class="stringliteral">&quot;Her/she made the following ratings:&quot;</span> &lt;&lt; std::endl;</div>
<div class="line">                        <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp; rating : ratings)</div>
<div class="line">                                os &lt;&lt; <span class="stringliteral">&quot;    - &quot;</span> &lt;&lt; rating.first &lt;&lt; <span class="stringliteral">&quot;: &quot;</span> &lt;&lt; rating.second &lt;&lt; <span class="stringliteral">&quot;/5&quot;</span> &lt;&lt; std::endl;</div>
<div class="line">                }</div>
<div class="line">        }</div>
<div class="line">};</div>
<div class="line"></div>
<div class="line"><span class="comment">/*</span></div>
<div class="line"><span class="comment"> * Let us parse Customers.</span></div>
<div class="line"><span class="comment"> */</span></div>
<div class="line"></div>
<div class="line"><span class="preprocessor">#define CUSTOMERS_DATA_FILE &quot;customers.data&quot;</span></div>
<div class="line"><span class="preprocessor"></span></div>
<div class="line"><span class="keywordtype">int</span> main(<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span>** argv) {</div>
<div class="line">        <span class="keywordflow">try</span> {</div>
<div class="line"></div>
<div class="line">                <span class="comment">// Let us create some data.</span></div>
<div class="line"></div>
<div class="line">                <span class="keyword">auto</span> data = customer::make_data();</div>
<div class="line"></div>
<div class="line">                <span class="comment">// Let us now serialize this data.</span></div>
<div class="line"></div>
<div class="line">                <span class="comment">// The gaml library provides a JSON built-in parser. The grammar</span></div>
<div class="line">                <span class="comment">// assumed by the JSON format is the following:</span></div>
<div class="line">                <span class="comment">//   - Each line in the file describes a datum.</span></div>
<div class="line">                <span class="comment">//   - Data fields are separated by comma &#39;,&#39;,</span></div>
<div class="line">                <span class="comment">//   - Compound elements (array, vector, list, tuple, pair) are</span></div>
<div class="line">                <span class="comment">//     enclosed within square brackets &#39;[...]&#39;</span></div>
<div class="line">                <span class="comment">//   - Strings are enclosed within double quotes &#39;&quot;...&quot;&#39;</span></div>
<div class="line">                <span class="comment">//   - Maps are enclosed with braces &#39;{...}&#39;. Keys can only be strings.</span></div>
<div class="line">                <span class="comment">// Because the JSON parser is generated specifically for a C++ data type</span></div>
<div class="line">                <span class="comment">// there are some additional requirements.</span></div>
<div class="line">                <span class="comment">//   - Use of STL sequences (vectors, lists and arrays) require that the type</span></div>
<div class="line">                <span class="comment">//     of the elements in the JSON list mapped to the sequence is the same as the value type of the sequence</span></div>
<div class="line">                <span class="comment">//   - STL tuples require that the JSON list mapped to the type contains as many elements as the tuple</span></div>
<div class="line">                <span class="comment">//         and that their types coincide with the ones of the tuple in the same order.</span></div>
<div class="line">                <span class="comment">//   - STL pairs have the same requirement as tuple since a pair is equivalent to a 2-tuple.</span></div>
<div class="line">                <span class="comment">//   - STL associative containers (maps and hash tables) require that the fields of the JSON object mapped to the container</span></div>
<div class="line">                <span class="comment">//     have all the same types and is compatible with the mapped type of the container.</span></div>
<div class="line"></div>
<div class="line">                <span class="keyword">auto</span> JSON_parser = gaml::make_JSON_parser&lt;customer::Data&gt;();</div>
<div class="line"></div>
<div class="line">                <span class="comment">// But we can use our parser as well.</span></div>
<div class="line">                HandcraftedParser custom_parser;</div>
<div class="line"></div>
<div class="line">                <span class="comment">// From parsers, output streams can be made, from existing</span></div>
<div class="line">                <span class="comment">// streams. Let us use std::cout here, with the two parsers.</span></div>
<div class="line"></div>
<div class="line">                <span class="keyword">auto</span> output_customer_stream_1 = <a name="a0"></a><a class="code" href="a00170.html#a2addf6f6d613b40c6f598ed3d68bf12a">gaml::make_output_data_stream</a>(std::cout,</div>
<div class="line">                                JSON_parser);</div>
<div class="line">                <span class="keyword">auto</span> output_customer_stream_2 = <a class="code" href="a00170.html#a2addf6f6d613b40c6f598ed3d68bf12a">gaml::make_output_data_stream</a>(std::cout,</div>
<div class="line">                                custom_parser);</div>
<div class="line"></div>
<div class="line">                <span class="comment">// We use an output iterator to write in the streams.</span></div>
<div class="line"></div>
<div class="line">                <span class="keyword">auto</span> out1 = <a name="a1"></a><a class="code" href="a00170.html#a0b23f6891f675d9e85f308c75a3d69bf">gaml::make_output_iterator</a>(output_customer_stream_1);</div>
<div class="line">                std::cout &lt;&lt; std::endl &lt;&lt; <span class="stringliteral">&quot;JSON built-in output parser&quot;</span> &lt;&lt; std::endl</div>
<div class="line">                                &lt;&lt; std::endl;</div>
<div class="line">                std::copy(data.begin(), data.end(), out1);</div>
<div class="line"></div>
<div class="line">                <span class="keyword">auto</span> out2 = <a class="code" href="a00170.html#a0b23f6891f675d9e85f308c75a3d69bf">gaml::make_output_iterator</a>(output_customer_stream_2);</div>
<div class="line">                std::cout &lt;&lt; std::endl &lt;&lt; <span class="stringliteral">&quot;Custom output parser&quot;</span> &lt;&lt; std::endl</div>
<div class="line">                                &lt;&lt; std::endl;</div>
<div class="line">                std::copy(data.begin(), data.end(), out2);</div>
<div class="line"></div>
<div class="line">                <span class="comment">// Let us serialize this data into a file, using the JSON syntax.</span></div>
<div class="line">                std::ofstream ofile(CUSTOMERS_DATA_FILE);</div>
<div class="line">                <span class="keyword">auto</span> output_stream = <a class="code" href="a00170.html#a2addf6f6d613b40c6f598ed3d68bf12a">gaml::make_output_data_stream</a>(ofile, JSON_parser);</div>
<div class="line">                <span class="keyword">auto</span> out = <a class="code" href="a00170.html#a0b23f6891f675d9e85f308c75a3d69bf">gaml::make_output_iterator</a>(output_stream);</div>
<div class="line">                std::copy(data.begin(), data.end(), out);</div>
<div class="line">                ofile.close();</div>
<div class="line"></div>
<div class="line">                <span class="comment">// Now, we can clear the data and re-load it from the file.</span></div>
<div class="line">                data.clear();</div>
<div class="line">                std::ifstream ifile;</div>
<div class="line">                ifile.exceptions(</div>
<div class="line">                                std::ios::failbit | std::ios::badbit | std::ios::eofbit);</div>
<div class="line">                ifile.open(CUSTOMERS_DATA_FILE);</div>
<div class="line">                <span class="keyword">auto</span> input_customer_stream = <a name="a2"></a><a class="code" href="a00170.html#a9d1e8fc702741244acca28fcb66a43cf">gaml::make_input_data_stream</a>(ifile,</div>
<div class="line">                                JSON_parser);</div>
<div class="line">                <span class="keyword">auto</span> begin = <a name="a3"></a><a class="code" href="a00170.html#ab7d484df343150af7f8008d5ce9f1a09">gaml::make_input_data_begin</a>(input_customer_stream);</div>
<div class="line">                <span class="keyword">auto</span> end = <a name="a4"></a><a class="code" href="a00170.html#a5a6f1a715ac4002315332304c17eee36">gaml::make_input_data_end</a>(input_customer_stream);</div>
<div class="line">                std::copy(begin, end, std::back_inserter(data));</div>
<div class="line">                ifile.close();</div>
<div class="line"></div>
<div class="line">                <span class="comment">// Let us display the data again.</span></div>
<div class="line">                std::copy(data.begin(), data.end(), out1);</div>
<div class="line">        }</div>
<div class="line"></div>
<div class="line">        <span class="keywordflow">catch</span> (std::exception&amp; e) {</div>
<div class="line">                std::cerr &lt;&lt; <span class="stringliteral">&quot;Error: &quot;</span> &lt;&lt; e.what() &lt;&lt; std::endl;</div>
<div class="line">        }</div>
<div class="line"></div>
<div class="line">        <span class="keywordflow">return</span> EXIT_SUCCESS;</div>
<div class="line">}</div>
</div><!-- fragment --> </div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.3.1
</small></address>
</body>
</html>
