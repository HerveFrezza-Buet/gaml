<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.3.1"/>
<title>gaml-1.01: gamlDefaultParser.hpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">gaml-1.01
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.3.1 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="namespaces.html"><span>Namespaces</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
      <li><a href="examples.html"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.html">src</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">gamlDefaultParser.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="a00116.html">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="preprocessor">#pragma once</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">/*</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> *   Copyright (C) 2012,  Supelec</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> *   Authors : Herv� Frezza-Buet, Fr�d�ric Pennerath</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> *   Contributor :</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> *   This library is free software; you can redistribute it and/or</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> *   modify it under the terms of the GNU General Public</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *   License (GPL) as published by the Free Software Foundation; either</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> *   version 3 of the License, or any later version.</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *   This library is distributed in the hope that it will be useful,</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> *   but WITHOUT ANY WARRANTY; without even the implied warranty of</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> *   General Public License for more details.</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> *   You should have received a copy of the GNU General Public</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> *   License along with this library; if not, write to the Free Software</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> *   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="comment"> *   Contact : herve.frezza-buet@supelec.fr, frederic.pennerath@supelec.fr</span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;</div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include&lt;iostream&gt;</span></div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include&lt;string&gt;</span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include&lt;vector&gt;</span></div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#include&lt;list&gt;</span></div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#include&lt;array&gt;</span></div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor">#include&lt;tuple&gt;</span></div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="preprocessor">#include&lt;typeinfo&gt;</span></div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="preprocessor">#include&lt;stdexcept&gt;</span></div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="preprocessor">#include&lt;iterator&gt;</span></div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="preprocessor">#include&lt;utility&gt;</span></div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="keyword">namespace </span>gaml {</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;</div>
<div class="line"><a name="l00041"></a><span class="lineno"><a class="code" href="a00053.html">   41</a></span>&#160;<span class="keyword">class </span><a class="code" href="a00053.html">FormatException</a>: <span class="keyword">public</span> std::runtime_error {</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00043"></a><span class="lineno"><a class="code" href="a00053.html#a3305077c471ec9e49d9458425b2e9985">   43</a></span>&#160;        <a class="code" href="a00053.html#a3305077c471ec9e49d9458425b2e9985">FormatException</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* msg) :</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;                        std::runtime_error(</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;                                        (std::string(<span class="stringliteral">&quot;default parser error: &quot;</span>) += msg).c_str()) {</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;        }</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;};</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;</div>
<div class="line"><a name="l00049"></a><span class="lineno"><a class="code" href="a00080.html">   49</a></span>&#160;<span class="keyword">class </span><a class="code" href="a00080.html">ParserBase</a> {</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="keyword">protected</span>:</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;</div>
<div class="line"><a name="l00052"></a><span class="lineno"><a class="code" href="a00080.html#ac3f98339e32c26644702f9fc6df3742f">   52</a></span>&#160;        <span class="keyword">static</span> <a class="code" href="a00053.html">FormatException</a> <a class="code" href="a00080.html#ac3f98339e32c26644702f9fc6df3742f">formatError</a>(std::istream&amp; is, std::string msg) {</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;                <span class="keywordtype">char</span> location[20];</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;                <span class="keywordflow">if</span>(is.good()) {</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;                        is.getline(location, <span class="keyword">sizeof</span>(location));</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;                        (msg += <span class="stringliteral">&quot; (at &gt;&gt;&gt;&quot;</span>) += location;</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;                        <span class="keywordflow">if</span> (is.gcount() &gt;= 19)</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;                                msg += <span class="stringliteral">&quot; ...&quot;</span>;</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;                        msg += <span class="stringliteral">&quot;&lt;&lt;&lt;)&quot;</span>;</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;                }</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;                <span class="keywordflow">return</span> <a class="code" href="a00053.html">FormatException</a>(msg.c_str());</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;        }</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;</div>
<div class="line"><a name="l00064"></a><span class="lineno"><a class="code" href="a00080.html#a45e217295b5433dc07ea06ef5f06256b">   64</a></span>&#160;        <span class="keyword">static</span> <a class="code" href="a00053.html">FormatException</a> <a class="code" href="a00080.html#a45e217295b5433dc07ea06ef5f06256b">formatError</a>(std::istream&amp; is, <span class="keyword">const</span> <span class="keywordtype">char</span>* msg) {</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;                <span class="keywordflow">return</span> <a class="code" href="a00080.html#ac3f98339e32c26644702f9fc6df3742f">formatError</a>(is, std::string(msg));</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        }</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;</div>
<div class="line"><a name="l00068"></a><span class="lineno"><a class="code" href="a00080.html#a571af184506a2660c522f945abd98c78">   68</a></span>&#160;        <span class="keyword">static</span> <span class="keywordtype">char</span> <a class="code" href="a00080.html#a571af184506a2660c522f945abd98c78">expect</a>(std::istream&amp; is, <span class="keyword">const</span> <span class="keywordtype">char</span>* chars,</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;                        <span class="keyword">const</span> <span class="keywordtype">char</span>* msg = 0) {</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;                <span class="keywordtype">char</span> c;</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;                is &gt;&gt; std::skipws &gt;&gt; c;</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;                <span class="keywordflow">for</span> (; *chars != 0; ++chars) {</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;                        <span class="keywordflow">if</span> (*chars == -1) {</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;                                <span class="keywordflow">if</span> (is.eof())</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;                                        <span class="keywordflow">return</span> -1;</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;                        } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (*chars == c)</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;                                <span class="keywordflow">return</span> c;</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;                }</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;                is.putback(c);</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;                std::string fullMessage;</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;                <span class="keywordflow">if</span> (msg == 0) {</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;                        fullMessage = <span class="stringliteral">&quot;char in \&quot;&quot;</span>;</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;                        (fullMessage += chars) += <span class="stringliteral">&quot;\&quot; expected&quot;</span>;</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;                } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;                        fullMessage = msg;</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;                }</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;                <span class="keywordflow">throw</span> <a class="code" href="a00080.html#ac3f98339e32c26644702f9fc6df3742f">formatError</a>(is, fullMessage);</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;        }</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;</div>
<div class="line"><a name="l00090"></a><span class="lineno"><a class="code" href="a00080.html#a5f2e0fc39f579366a68a58c7e9fea1ab">   90</a></span>&#160;        <span class="keyword">static</span> <span class="keywordtype">int</span> <a class="code" href="a00080.html#a5f2e0fc39f579366a68a58c7e9fea1ab">expect</a>(std::istream&amp; is, <span class="keyword">const</span> std::vector&lt;const char*&gt;&amp; words) {</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;                std::vector&lt;const char*&gt; ptrs = words;</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;                <span class="keywordtype">char</span> c;</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;                is &gt;&gt; c;</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;                <span class="keywordflow">while</span> (is.good()) {</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;                        <span class="keywordflow">for</span>(std::size_t i = 0; i != ptrs.size(); ++i) {</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;                                <span class="keyword">const</span> <span class="keywordtype">char</span>*&amp; ptr = ptrs[i];</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;                                <span class="keywordflow">if</span>(ptr != <span class="keyword">nullptr</span>) {</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;                                        <span class="keywordflow">if</span>(c != *ptr) ptr = <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;                                        <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;                                                ++ptr;</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;                                                <span class="keywordflow">if</span>(*ptr == 0) <span class="keywordflow">return</span> (<span class="keywordtype">int</span>) i;</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;                                        }</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;                                }</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;                        }</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;                        is &gt;&gt; c;</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;                }</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;                <span class="keywordflow">return</span> -1;</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;        }</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;};</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;</div>
<div class="line"><a name="l00113"></a><span class="lineno"><a class="code" href="a00017.html">  113</a></span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="keyword">struct </span><a class="code" href="a00017.html">DefaultParser</a>: <span class="keyword">public</span> <a class="code" href="a00080.html">ParserBase</a> {</div>
<div class="line"><a name="l00114"></a><span class="lineno"><a class="code" href="a00017.html#af5578e77e56404e35e529063acc25d1a">  114</a></span>&#160;        <span class="keyword">typedef</span> T <a class="code" href="a00017.html#af5578e77e56404e35e529063acc25d1a">value_type</a>;</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;</div>
<div class="line"><a name="l00116"></a><span class="lineno"><a class="code" href="a00017.html#a4cb6bad35556b1b2675f3fa6ca55b32c">  116</a></span>&#160;        <span class="keywordtype">void</span> <a class="code" href="a00017.html#a4cb6bad35556b1b2675f3fa6ca55b32c">read</a>(std::istream&amp; is, T&amp; t) {</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;                <span class="keywordflow">try</span> {</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;                        is &gt;&gt; t;</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;                } <span class="keywordflow">catch</span> (std::istream::failure e) {</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;                        std::string message(<span class="stringliteral">&quot;parsing of type \&quot;&quot;</span>);</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;                        (message += <span class="keyword">typeid</span>(T).name()) += <span class="stringliteral">&quot;\&quot; failed&quot;</span>;</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;                        <span class="keywordflow">throw</span> std::runtime_error(message.c_str());</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;                }</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;        }</div>
<div class="line"><a name="l00125"></a><span class="lineno"><a class="code" href="a00017.html#a13090622271c367d62701676d121f737">  125</a></span>&#160;        <span class="keywordtype">void</span> <a class="code" href="a00017.html#a13090622271c367d62701676d121f737">write</a>(std::ostream&amp; os, <span class="keyword">const</span> T&amp; t) {</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;                os &lt;&lt; t;</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;        }</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;};</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;</div>
<div class="line"><a name="l00130"></a><span class="lineno"><a class="code" href="a00034.html">  130</a></span>&#160;<span class="keyword">template</span>&lt;&gt; <span class="keyword">struct </span><a class="code" href="a00017.html">DefaultParser</a>&lt;bool&gt; : <span class="keyword">public</span> <a class="code" href="a00080.html">ParserBase</a> {</div>
<div class="line"><a name="l00131"></a><span class="lineno"><a class="code" href="a00034.html#a0c1aafaca29a2c3185234c4df064b276">  131</a></span>&#160;        <span class="keyword">typedef</span> <span class="keywordtype">bool</span> <a class="code" href="a00034.html#a0c1aafaca29a2c3185234c4df064b276">value_type</a>;</div>
<div class="line"><a name="l00132"></a><span class="lineno"><a class="code" href="a00034.html#aa9dfa29ac702334a006b65f608a76ebe">  132</a></span>&#160;        std::vector&lt;const char*&gt; booleanValues { <span class="stringliteral">&quot;true&quot;</span>, <span class="stringliteral">&quot;false&quot;</span>, <span class="stringliteral">&quot;1&quot;</span>, <span class="stringliteral">&quot;0&quot;</span>, <span class="stringliteral">&quot;TRUE&quot;</span>, <span class="stringliteral">&quot;FALSE&quot;</span> };</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;</div>
<div class="line"><a name="l00134"></a><span class="lineno"><a class="code" href="a00034.html#a7770b8e443e277bf833567271833015c">  134</a></span>&#160;        <span class="keywordtype">void</span> <a class="code" href="a00034.html#a7770b8e443e277bf833567271833015c">read</a>(std::istream&amp; is, <span class="keywordtype">bool</span>&amp; flag) {</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;                <span class="keywordtype">int</span> value = <a class="code" href="a00080.html#a571af184506a2660c522f945abd98c78">expect</a>(is, booleanValues);</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;                <span class="keywordflow">if</span>(value &lt; 0)</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;                        <span class="keywordflow">throw</span> <a class="code" href="a00080.html#ac3f98339e32c26644702f9fc6df3742f">formatError</a>(is, <span class="stringliteral">&quot;bad boolean value&quot;</span>);</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;                <span class="keywordflow">if</span>(value % 2 == 0) flag = <span class="keyword">true</span>; <span class="keywordflow">else</span> flag = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;        }</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;</div>
<div class="line"><a name="l00141"></a><span class="lineno"><a class="code" href="a00034.html#a53901b41bb0b417d0b47be534a507c7c">  141</a></span>&#160;        <span class="keywordtype">void</span> <a class="code" href="a00034.html#a53901b41bb0b417d0b47be534a507c7c">write</a>(std::ostream&amp; os, <span class="keyword">const</span> <span class="keywordtype">bool</span>&amp; flag) {</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;                <span class="keywordflow">if</span>(flag) os &lt;&lt; <span class="stringliteral">&quot;true&quot;</span>; <span class="keywordflow">else</span> os &lt;&lt; <span class="stringliteral">&quot;false&quot;</span>;</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;        }</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;};</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;</div>
<div class="line"><a name="l00146"></a><span class="lineno"><a class="code" href="a00036.html">  146</a></span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> Char&gt; <span class="keyword">struct </span><a class="code" href="a00017.html">DefaultParser</a>&lt;std::basic_string&lt;Char&gt;&gt; : <span class="keyword">public</span> <a class="code" href="a00080.html">ParserBase</a> {</div>
<div class="line"><a name="l00147"></a><span class="lineno"><a class="code" href="a00036.html#a9bad648d4f9619e3994f6245f9a9b937">  147</a></span>&#160;        <span class="keyword">typedef</span> std::basic_string&lt;Char&gt; <a class="code" href="a00036.html#a9bad648d4f9619e3994f6245f9a9b937">value_type</a>;</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;</div>
<div class="line"><a name="l00149"></a><span class="lineno"><a class="code" href="a00036.html#a1eb0d61953a52f351d85368fd059827c">  149</a></span>&#160;        <span class="keywordtype">void</span> <a class="code" href="a00036.html#a1eb0d61953a52f351d85368fd059827c">read</a>(std::istream&amp; is, std::basic_string&lt;Char&gt;&amp; s) {</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;                <a class="code" href="a00080.html#a571af184506a2660c522f945abd98c78">expect</a>(is, <span class="stringliteral">&quot;\&quot;&quot;</span>, <span class="stringliteral">&quot;a string starts with a quote&quot;</span>);</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;                is &gt;&gt; std::noskipws;</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;                s.clear();</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;                Char c;</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;                is &gt;&gt; c;</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;                <span class="keywordflow">while</span> (is.good()) {</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;                        <span class="keywordflow">if</span> (c == (Char) <span class="charliteral">&#39;&quot;&#39;</span>) {</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;                                <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;                        }</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;                        s.push_back(c);</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;                        is &gt;&gt; c;</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;                }</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;                <span class="keywordflow">throw</span> <a class="code" href="a00080.html#ac3f98339e32c26644702f9fc6df3742f">formatError</a>(is, <span class="stringliteral">&quot;a string ends with a quote&quot;</span>);</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;        }</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;</div>
<div class="line"><a name="l00166"></a><span class="lineno"><a class="code" href="a00036.html#a93edea74490388e72a3880f6910b37e5">  166</a></span>&#160;        <span class="keywordtype">void</span> <a class="code" href="a00036.html#a93edea74490388e72a3880f6910b37e5">write</a>(std::ostream&amp; os, <span class="keyword">const</span> std::basic_string&lt;Char&gt;&amp; s) {</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;                os &lt;&lt; <span class="charliteral">&#39;&quot;&#39;</span> &lt;&lt; s &lt;&lt; <span class="charliteral">&#39;&quot;&#39;</span>;</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;        }</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;};</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;</div>
<div class="line"><a name="l00171"></a><span class="lineno"><a class="code" href="a00104.html">  171</a></span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> Seq&gt; <span class="keyword">class </span><a class="code" href="a00104.html">SequenceParser</a>: <span class="keyword">public</span> <a class="code" href="a00080.html">ParserBase</a> {</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;        <span class="keyword">typedef</span> <span class="keyword">typename</span> Seq::value_type sequence_value_type;</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;        <a class="code" href="a00017.html">DefaultParser&lt;sequence_value_type&gt;</a> elementParser_;</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00175"></a><span class="lineno"><a class="code" href="a00104.html#af569cb7589508b41995f731f11522331">  175</a></span>&#160;        <span class="keyword">typedef</span> Seq <a class="code" href="a00104.html#af569cb7589508b41995f731f11522331">value_type</a>;</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;</div>
<div class="line"><a name="l00177"></a><span class="lineno"><a class="code" href="a00104.html#ae81e10a1a48e3d908399349119f16898">  177</a></span>&#160;        <span class="keywordtype">void</span> <a class="code" href="a00104.html#ae81e10a1a48e3d908399349119f16898">read</a>(std::istream&amp; is, Seq&amp; seq) {</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;                seq.clear();</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;                <span class="keywordtype">char</span> c = <a class="code" href="a00080.html#a571af184506a2660c522f945abd98c78">expect</a>(is, <span class="stringliteral">&quot;(&quot;</span>, <span class="stringliteral">&quot;a vector starts with a left bracket&quot;</span>);</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;                std::back_insert_iterator&lt;Seq&gt; ii(seq);</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;                sequence_value_type d;</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;                <span class="keywordflow">while</span> (is.good()) {</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;                        elementParser_.<a class="code" href="a00017.html#a4cb6bad35556b1b2675f3fa6ca55b32c">read</a>(is, d);</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;                        *ii++ = d;</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;                        c = <a class="code" href="a00080.html#a571af184506a2660c522f945abd98c78">expect</a>(is, <span class="stringliteral">&quot;,)&quot;</span>, <span class="stringliteral">&quot;vector elements are separated by coma&quot;</span>);</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;                        <span class="keywordflow">if</span> (c == <span class="charliteral">&#39;)&#39;</span>)</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;                                <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;                }</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;                <span class="keywordflow">throw</span> <a class="code" href="a00080.html#ac3f98339e32c26644702f9fc6df3742f">formatError</a>(is, <span class="stringliteral">&quot;a vector ends with a right bracket&quot;</span>);</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;        }</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;</div>
<div class="line"><a name="l00193"></a><span class="lineno"><a class="code" href="a00104.html#a21f7d6459f6256d883604e3e8ac0acd5">  193</a></span>&#160;        <span class="keywordtype">void</span> <a class="code" href="a00104.html#a21f7d6459f6256d883604e3e8ac0acd5">write</a>(std::ostream&amp; os, <span class="keyword">const</span> Seq&amp; seq) {</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;                os &lt;&lt; <span class="charliteral">&#39;(&#39;</span>;</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;                <span class="keyword">auto</span> it = seq.begin();</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;                <span class="keywordflow">if</span> (it != seq.end()) {</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;                        elementParser_.<a class="code" href="a00017.html#a13090622271c367d62701676d121f737">write</a>(os, *it);</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;                        <span class="keywordflow">for</span> (++it; it != seq.end(); ++it) {</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;                                os &lt;&lt; <span class="charliteral">&#39;,&#39;</span>;</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;                                elementParser_.<a class="code" href="a00017.html#a13090622271c367d62701676d121f737">write</a>(os, *it);</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;                        }</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;                        os &lt;&lt; <span class="charliteral">&#39;)&#39;</span>;</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;                }</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;        }</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;};</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;</div>
<div class="line"><a name="l00207"></a><span class="lineno"><a class="code" href="a00042.html">  207</a></span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="keyword">struct </span><a class="code" href="a00017.html">DefaultParser</a>&lt;std::vector&lt;T&gt;&gt; : <span class="keyword">public</span> <a class="code" href="a00104.html">SequenceParser</a>&lt;</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;                std::vector&lt;T&gt;&gt; {</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;};</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;</div>
<div class="line"><a name="l00211"></a><span class="lineno"><a class="code" href="a00037.html">  211</a></span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="keyword">struct </span><a class="code" href="a00017.html">DefaultParser</a>&lt;std::list&lt;T&gt;&gt; : <span class="keyword">public</span> <a class="code" href="a00104.html">SequenceParser</a>&lt;</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;                std::list&lt;T&gt;&gt; {</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;};</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;</div>
<div class="line"><a name="l00215"></a><span class="lineno"><a class="code" href="a00035.html">  215</a></span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keywordtype">size_t</span> n&gt; <span class="keyword">class </span><a class="code" href="a00017.html">DefaultParser</a>&lt;std::array&lt;T, n&gt; &gt; : <span class="keyword">public</span> <a class="code" href="a00080.html">ParserBase</a> {</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;        <a class="code" href="a00017.html">DefaultParser&lt;T&gt;</a> elementParser_;</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00218"></a><span class="lineno"><a class="code" href="a00035.html#a98cd93504e868646e11829c43a22d8c5">  218</a></span>&#160;        <span class="keyword">typedef</span> std::array&lt;T, n&gt; <a class="code" href="a00035.html#a98cd93504e868646e11829c43a22d8c5">value_type</a>;</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;</div>
<div class="line"><a name="l00220"></a><span class="lineno"><a class="code" href="a00035.html#a42b94d57f483cf1bebe414f5f3f36719">  220</a></span>&#160;        <span class="keywordtype">void</span> <a class="code" href="a00035.html#a42b94d57f483cf1bebe414f5f3f36719">read</a>(std::istream&amp; is, std::array&lt;T, n&gt;&amp; t) {</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;                <span class="keywordtype">char</span> c = <a class="code" href="a00080.html#a571af184506a2660c522f945abd98c78">expect</a>(is, <span class="stringliteral">&quot;(&quot;</span>, <span class="stringliteral">&quot;an array starts with a left bracket&quot;</span>);</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;                <span class="keyword">typename</span> std::array&lt;T, n&gt;::iterator it = t.begin();</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;                <span class="keywordflow">while</span> (is.good()) {</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;                        elementParser_.read(is, *it++);</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;                        <span class="keywordflow">if</span> (it == t.end()) {</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;                                c = <a class="code" href="a00080.html#a571af184506a2660c522f945abd98c78">expect</a>(is, <span class="stringliteral">&quot;,)&quot;</span>, <span class="stringliteral">&quot;array ends with a right bracket&quot;</span>);</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;                                <span class="keywordflow">if</span> (c == <span class="charliteral">&#39;,&#39;</span>)</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;                                        <span class="keywordflow">throw</span> <a class="code" href="a00080.html#ac3f98339e32c26644702f9fc6df3742f">formatError</a>(is,</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;                                                        <span class="stringliteral">&quot;too many elements in a fixed size array&quot;</span>);</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;                                <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;                        }</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;                        c = <a class="code" href="a00080.html#a571af184506a2660c522f945abd98c78">expect</a>(is, <span class="stringliteral">&quot;,)&quot;</span>, <span class="stringliteral">&quot;array elements are separated by coma&quot;</span>);</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;                        <span class="keywordflow">if</span> (c == <span class="charliteral">&#39;)&#39;</span>)</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;                                <span class="keywordflow">throw</span> <a class="code" href="a00080.html#ac3f98339e32c26644702f9fc6df3742f">formatError</a>(is, <span class="stringliteral">&quot;too few elements in a fixed size array&quot;</span>);</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;                }</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;                <span class="keywordflow">throw</span> <a class="code" href="a00080.html#ac3f98339e32c26644702f9fc6df3742f">formatError</a>(is, <span class="stringliteral">&quot;an array ends with a right bracket&quot;</span>);</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;        }</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;</div>
<div class="line"><a name="l00241"></a><span class="lineno"><a class="code" href="a00035.html#a782f070db9b07862e1e8d21371fdc878">  241</a></span>&#160;        <span class="keywordtype">void</span> <a class="code" href="a00035.html#a782f070db9b07862e1e8d21371fdc878">write</a>(std::ostream&amp; os, <span class="keyword">const</span> std::array&lt;T, n&gt;&amp; t) {</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;                os &lt;&lt; <span class="charliteral">&#39;(&#39;</span>;</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;                <span class="keyword">auto</span> it = t.begin();</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;                <span class="keywordflow">if</span> (it != t.end()) {</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;                        elementParser_.write(os, *it);</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;                        <span class="keywordflow">for</span> (++it; it != t.end(); ++it) {</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;                                os &lt;&lt; <span class="charliteral">&#39;,&#39;</span>;</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;                                elementParser_.write(os, *it);</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;                        }</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;                        os &lt;&lt; <span class="charliteral">&#39;)&#39;</span>;</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;                }</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;        }</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;};</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;</div>
<div class="line"><a name="l00255"></a><span class="lineno"><a class="code" href="a00038.html">  255</a></span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> T1, <span class="keyword">typename</span> T2&gt; <span class="keyword">class </span><a class="code" href="a00017.html">DefaultParser</a>&lt;std::pair&lt;T1, T2&gt;&gt; : <span class="keyword">public</span> <a class="code" href="a00080.html">ParserBase</a> {</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;        <a class="code" href="a00017.html">DefaultParser&lt;T1&gt;</a> T1parser;</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;        <a class="code" href="a00017.html">DefaultParser&lt;T2&gt;</a> T2parser;</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00259"></a><span class="lineno"><a class="code" href="a00038.html#a65f07e415d408806c69675f2a56b5dda">  259</a></span>&#160;        <span class="keyword">typedef</span> std::pair&lt;T1, T2&gt; <a class="code" href="a00038.html#a65f07e415d408806c69675f2a56b5dda">value_type</a>;</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;</div>
<div class="line"><a name="l00261"></a><span class="lineno"><a class="code" href="a00038.html#abc0b7a734f62b210c6ae6f741de93dcc">  261</a></span>&#160;        <span class="keywordtype">void</span> <a class="code" href="a00038.html#abc0b7a734f62b210c6ae6f741de93dcc">read</a>(std::istream&amp; is, std::pair&lt;T1, T2&gt;&amp; p) {</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;                <a class="code" href="a00080.html#a571af184506a2660c522f945abd98c78">expect</a>(is, <span class="stringliteral">&quot;(&quot;</span>, <span class="stringliteral">&quot;a pair starts with a left bracket&quot;</span>);</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;                T1parser.read(is, p.first);</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;                <a class="code" href="a00080.html#a571af184506a2660c522f945abd98c78">expect</a>(is, <span class="stringliteral">&quot;,&quot;</span>, <span class="stringliteral">&quot;pair elements are separated with coma&quot;</span>);</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;                T2parser.read(is, p.second);</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;                <a class="code" href="a00080.html#a571af184506a2660c522f945abd98c78">expect</a>(is, <span class="stringliteral">&quot;)&quot;</span>, <span class="stringliteral">&quot;a pair ends with a right bracket&quot;</span>);</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;        }</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;</div>
<div class="line"><a name="l00269"></a><span class="lineno"><a class="code" href="a00038.html#a09b09d40f1199b996d2a39e415ca5d18">  269</a></span>&#160;        <span class="keywordtype">void</span> <a class="code" href="a00038.html#a09b09d40f1199b996d2a39e415ca5d18">write</a>(std::ostream&amp; os, <span class="keyword">const</span> std::pair&lt;T1, T2&gt;&amp; p) {</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;                os &lt;&lt; <span class="charliteral">&#39;(&#39;</span>;</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;                T1parser.write(os, p.first);</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;                os &lt;&lt; <span class="charliteral">&#39;,&#39;</span>;</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;                T2parser.write(os, p.second);</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;                os &lt;&lt; <span class="charliteral">&#39;)&#39;</span>;</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;        }</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;};</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;<span class="preprocessor">#ifdef NO_VARIADIC_TEMPLATES</span></div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;<span class="preprocessor"></span><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T1&gt; <span class="keyword">class </span>DefaultParser&lt;std::tuple&lt;T1&gt;&gt; : <span class="keyword">public</span> ParserBase {</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;        DefaultParser&lt;T1&gt; T1parser;</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;        <span class="keyword">typedef</span> std::tuple&lt;T1&gt; <a class="code" href="a00017.html#af5578e77e56404e35e529063acc25d1a">value_type</a>;</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;        <span class="keywordtype">void</span> <a class="code" href="a00017.html#a4cb6bad35556b1b2675f3fa6ca55b32c">read</a>(std::istream&amp; is, std::tuple&lt;T1&gt;&amp; t) {</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;                <a class="code" href="a00080.html#a571af184506a2660c522f945abd98c78">expect</a>(is, <span class="stringliteral">&quot;(&quot;</span>, <span class="stringliteral">&quot;a tuple starts with a left bracket&quot;</span>);</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;                T1parser.read(is, std::get&lt;0&gt;(t));</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;                <a class="code" href="a00080.html#a571af184506a2660c522f945abd98c78">expect</a>(is, <span class="stringliteral">&quot;)&quot;</span>, <span class="stringliteral">&quot;a tuple ends with a right bracket&quot;</span>);</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;        }</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;        <span class="keywordtype">void</span> <a class="code" href="a00017.html#a13090622271c367d62701676d121f737">write</a>(std::ostream&amp; os, <span class="keyword">const</span> std::tuple&lt;T1&gt;&amp; t) {</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;                os &lt;&lt; <span class="charliteral">&#39;(&#39;</span>;</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;                T1parser.write(os, std::get&lt;0&gt;(t));</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;                os &lt;&lt; <span class="charliteral">&#39;)&#39;</span>;</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;        }</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;};</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> T1, <span class="keyword">typename</span> T2&gt; <span class="keyword">class </span>DefaultParser&lt;std::tuple&lt;T1,T2&gt;&gt; : <span class="keyword">public</span> ParserBase {</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;        DefaultParser&lt;T1&gt; T1parser;</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;        DefaultParser&lt;T2&gt; T2parser;</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;        <span class="keyword">typedef</span> std::tuple&lt;T1,T2&gt; <a class="code" href="a00017.html#af5578e77e56404e35e529063acc25d1a">value_type</a>;</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;        <span class="keywordtype">void</span> <a class="code" href="a00017.html#a4cb6bad35556b1b2675f3fa6ca55b32c">read</a>(std::istream&amp; is, std::tuple&lt;T1,T2&gt;&amp; t) {</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;                <a class="code" href="a00080.html#a571af184506a2660c522f945abd98c78">expect</a>(is, <span class="stringliteral">&quot;(&quot;</span>, <span class="stringliteral">&quot;a tuple starts with a left bracket&quot;</span>);</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;                T1parser.read(is, std::get&lt;0&gt;(t));</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;                <a class="code" href="a00080.html#a571af184506a2660c522f945abd98c78">expect</a>(is, <span class="stringliteral">&quot;,&quot;</span>, <span class="stringliteral">&quot;tuple elements are separated with coma&quot;</span>);</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;                T2parser.read(is, std::get&lt;1&gt;(t));</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;                <a class="code" href="a00080.html#a571af184506a2660c522f945abd98c78">expect</a>(is, <span class="stringliteral">&quot;)&quot;</span>, <span class="stringliteral">&quot;a tuple ends with a right bracket&quot;</span>);</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;        }</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;        <span class="keywordtype">void</span> <a class="code" href="a00017.html#a13090622271c367d62701676d121f737">write</a>(std::ostream&amp; os, <span class="keyword">const</span> std::tuple&lt;T1, T2&gt;&amp; t) {</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;                os &lt;&lt; <span class="charliteral">&#39;(&#39;</span>;</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;                T1parser.write(os, std::get&lt;0&gt;(t));</div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;                os &lt;&lt; <span class="charliteral">&#39;,&#39;</span>;</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;                T2parser.write(os, std::get&lt;1&gt;(t));</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;                os &lt;&lt; <span class="charliteral">&#39;)&#39;</span>;</div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;        }</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;};</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> T1, <span class="keyword">typename</span> T2, <span class="keyword">typename</span> T3&gt; <span class="keyword">class </span>DefaultParser&lt;std::tuple&lt;T1,T2,T3&gt;&gt; : <span class="keyword">public</span> ParserBase {</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;        DefaultParser&lt;T1&gt; T1parser;</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;        DefaultParser&lt;T2&gt; T2parser;</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;        DefaultParser&lt;T3&gt; T3parser;</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;        <span class="keyword">typedef</span> std::tuple&lt;T1,T2,T3&gt; <a class="code" href="a00017.html#af5578e77e56404e35e529063acc25d1a">value_type</a>;</div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;</div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;        <span class="keywordtype">void</span> <a class="code" href="a00017.html#a4cb6bad35556b1b2675f3fa6ca55b32c">read</a>(std::istream&amp; is, std::tuple&lt;T1,T2,T3&gt;&amp; t) {</div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;                <a class="code" href="a00080.html#a571af184506a2660c522f945abd98c78">expect</a>(is, <span class="stringliteral">&quot;(&quot;</span>, <span class="stringliteral">&quot;a tuple starts with a left bracket&quot;</span>);</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;                T1parser.read(is, std::get&lt;0&gt;(t));</div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;                <a class="code" href="a00080.html#a571af184506a2660c522f945abd98c78">expect</a>(is, <span class="stringliteral">&quot;,&quot;</span>, <span class="stringliteral">&quot;tuple elements are separated with coma&quot;</span>);</div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;                T2parser.read(is, std::get&lt;1&gt;(t));</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;                <a class="code" href="a00080.html#a571af184506a2660c522f945abd98c78">expect</a>(is, <span class="stringliteral">&quot;,&quot;</span>, <span class="stringliteral">&quot;tuple elements are separated with coma&quot;</span>);</div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;                T3parser.read(is, std::get&lt;2&gt;(t));</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;                <a class="code" href="a00080.html#a571af184506a2660c522f945abd98c78">expect</a>(is, <span class="stringliteral">&quot;)&quot;</span>, <span class="stringliteral">&quot;a tuple ends with a right bracket&quot;</span>);</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;        }</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;</div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;        <span class="keywordtype">void</span> <a class="code" href="a00017.html#a13090622271c367d62701676d121f737">write</a>(std::ostream&amp; os, <span class="keyword">const</span> std::tuple&lt;T1, T2, T3&gt;&amp; t) {</div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;                os &lt;&lt; <span class="charliteral">&#39;(&#39;</span>;</div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;                T1parser.write(os, std::get&lt;0&gt;(t));</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;                os &lt;&lt; <span class="charliteral">&#39;,&#39;</span>;</div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;                T2parser.write(os, std::get&lt;1&gt;(t));</div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;                os &lt;&lt; <span class="charliteral">&#39;,&#39;</span>;</div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;                T3parser.write(os, std::get&lt;2&gt;(t));</div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;                os &lt;&lt; <span class="charliteral">&#39;)&#39;</span>;</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;        }</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;};</div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;</div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> T1, <span class="keyword">typename</span> T2, <span class="keyword">typename</span> T3, <span class="keyword">typename</span> T4&gt; <span class="keyword">class </span>DefaultParser&lt;std::tuple&lt;T1,T2,T3,T4&gt;&gt; : <span class="keyword">public</span> ParserBase {</div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;        DefaultParser&lt;T1&gt; T1parser;</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;        DefaultParser&lt;T2&gt; T2parser;</div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;        DefaultParser&lt;T3&gt; T3parser;</div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;        DefaultParser&lt;T4&gt; T4parser;</div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;        <span class="keyword">typedef</span> std::tuple&lt;T1,T2,T3,T4&gt; <a class="code" href="a00017.html#af5578e77e56404e35e529063acc25d1a">value_type</a>;</div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;</div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;        <span class="keywordtype">void</span> <a class="code" href="a00017.html#a4cb6bad35556b1b2675f3fa6ca55b32c">read</a>(std::istream&amp; is, std::tuple&lt;T1,T2,T3,T4&gt;&amp; t) {</div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;                <a class="code" href="a00080.html#a571af184506a2660c522f945abd98c78">expect</a>(is, <span class="stringliteral">&quot;(&quot;</span>, <span class="stringliteral">&quot;a tuple starts with a left bracket&quot;</span>);</div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;                T1parser.read(is, std::get&lt;0&gt;(t));</div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;                <a class="code" href="a00080.html#a571af184506a2660c522f945abd98c78">expect</a>(is, <span class="stringliteral">&quot;,&quot;</span>, <span class="stringliteral">&quot;tuple elements are separated with coma&quot;</span>);</div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;                T2parser.read(is, std::get&lt;1&gt;(t));</div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;                <a class="code" href="a00080.html#a571af184506a2660c522f945abd98c78">expect</a>(is, <span class="stringliteral">&quot;,&quot;</span>, <span class="stringliteral">&quot;tuple elements are separated with coma&quot;</span>);</div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;                T3parser.read(is, std::get&lt;2&gt;(t));</div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;                <a class="code" href="a00080.html#a571af184506a2660c522f945abd98c78">expect</a>(is, <span class="stringliteral">&quot;,&quot;</span>, <span class="stringliteral">&quot;tuple elements are separated with coma&quot;</span>);</div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;                T4parser.read(is, std::get&lt;3&gt;(t));</div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;                <a class="code" href="a00080.html#a571af184506a2660c522f945abd98c78">expect</a>(is, <span class="stringliteral">&quot;)&quot;</span>, <span class="stringliteral">&quot;a tuple ends with a right bracket&quot;</span>);</div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;        }</div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;</div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;        <span class="keywordtype">void</span> <a class="code" href="a00017.html#a13090622271c367d62701676d121f737">write</a>(std::ostream&amp; os, <span class="keyword">const</span> std::tuple&lt;T1, T2, T3, T4&gt;&amp; t) {</div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;                os &lt;&lt; <span class="charliteral">&#39;(&#39;</span>;</div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;                T1parser.write(os, std::get&lt;0&gt;(t));</div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;                os &lt;&lt; <span class="charliteral">&#39;,&#39;</span>;</div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;                T2parser.write(os, std::get&lt;1&gt;(t));</div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;                os &lt;&lt; <span class="charliteral">&#39;,&#39;</span>;</div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;                T3parser.write(os, std::get&lt;2&gt;(t));</div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;                os &lt;&lt; <span class="charliteral">&#39;,&#39;</span>;</div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;                T4parser.write(os, std::get&lt;3&gt;(t));</div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;                os &lt;&lt; <span class="charliteral">&#39;)&#39;</span>;</div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;        }</div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;};</div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;<span class="preprocessor">#else</span></div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00382"></a><span class="lineno"><a class="code" href="a00039.html">  382</a></span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> ... Args&gt; <span class="keyword">class </span><a class="code" href="a00017.html">DefaultParser</a>&lt;std::tuple&lt;Args...&gt;&gt; : <span class="keyword">public</span> <a class="code" href="a00080.html">ParserBase</a> {</div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;        <span class="keyword">typedef</span> std::tuple&lt;Args...&gt; tuple_type;</div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;</div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;        <span class="keyword">template</span>&lt;<span class="keywordtype">int</span> i, <span class="keywordtype">int</span> c&gt;</div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;        <span class="keyword">struct </span>ComponentParser: <span class="keyword">public</span> <a class="code" href="a00080.html">ParserBase</a> {</div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;                <span class="keyword">typedef</span> <span class="keyword">typename</span> std::tuple_element&lt;i, tuple_type&gt;::type element_type;</div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;                <a class="code" href="a00017.html">DefaultParser&lt;element_type&gt;</a> headParser_;</div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;                ComponentParser&lt;i + 1, c - 1&gt; tailParser_;</div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;</div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;                <span class="keywordtype">void</span> <a class="code" href="a00017.html#a4cb6bad35556b1b2675f3fa6ca55b32c">read</a>(std::istream&amp; is, tuple_type&amp; t) {</div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;                        headParser_.read(is, std::get &lt; i &gt; (t));</div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;                        <a class="code" href="a00080.html#a571af184506a2660c522f945abd98c78">expect</a>(is, <span class="stringliteral">&quot;,&quot;</span>, <span class="stringliteral">&quot;tuple elements are separated with coma&quot;</span>);</div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;                        tailParser_.read(is, t);</div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;                }</div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;</div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;                <span class="keywordtype">void</span> <a class="code" href="a00017.html#a13090622271c367d62701676d121f737">write</a>(std::ostream&amp; os, <span class="keyword">const</span> tuple_type&amp; t) {</div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;                        headParser_.write(os, std::get &lt; i &gt; (t));</div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;                        os &lt;&lt; <span class="stringliteral">&quot;, &quot;</span>;</div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;                        tailParser_.write(os, t);</div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;                }</div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;        };</div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;</div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;        ComponentParser&lt;0, std::tuple_size&lt;tuple_type&gt;::value&gt; tupleParser_;</div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00406"></a><span class="lineno"><a class="code" href="a00039.html#a8fd844aa1224204e0dd3c4b36e7ae429">  406</a></span>&#160;        <span class="keyword">typedef</span> std::tuple&lt;Args...&gt; <a class="code" href="a00039.html#a8fd844aa1224204e0dd3c4b36e7ae429">value_type</a>;</div>
<div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;</div>
<div class="line"><a name="l00408"></a><span class="lineno"><a class="code" href="a00039.html#a3befdb88d9a3adfe21274c44c4487a70">  408</a></span>&#160;        <span class="keywordtype">void</span> <a class="code" href="a00039.html#a3befdb88d9a3adfe21274c44c4487a70">read</a>(std::istream&amp; is, tuple_type&amp; t) {</div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;                <a class="code" href="a00080.html#a571af184506a2660c522f945abd98c78">expect</a>(is, <span class="stringliteral">&quot;(&quot;</span>, <span class="stringliteral">&quot;a tuple starts with a left bracket&quot;</span>);</div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;                tupleParser_.read(is, t);</div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;                <a class="code" href="a00080.html#a571af184506a2660c522f945abd98c78">expect</a>(is, <span class="stringliteral">&quot;)&quot;</span>, <span class="stringliteral">&quot;a tuple ends with a right bracket&quot;</span>);</div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;        }</div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;</div>
<div class="line"><a name="l00414"></a><span class="lineno"><a class="code" href="a00039.html#a08fa04b7a7354162151e8d411532048b">  414</a></span>&#160;        <span class="keywordtype">void</span> <a class="code" href="a00039.html#a08fa04b7a7354162151e8d411532048b">write</a>(std::ostream&amp; os, <span class="keyword">const</span> tuple_type&amp; t) {</div>
<div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;                os &lt;&lt; <span class="charliteral">&#39;(&#39;</span>;</div>
<div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;                tupleParser_.write(os, t);</div>
<div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;                os &lt;&lt; <span class="charliteral">&#39;)&#39;</span>;</div>
<div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;        }</div>
<div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;};</div>
<div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;</div>
<div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> ... Args&gt;</div>
<div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;<span class="keyword">template</span>&lt;<span class="keywordtype">int</span> i&gt;</div>
<div class="line"><a name="l00423"></a><span class="lineno"><a class="code" href="a00040.html">  423</a></span>&#160;<span class="keyword">struct </span><a class="code" href="a00017.html">DefaultParser</a>&lt;std::tuple&lt;Args...&gt;&gt;::ComponentParser&lt;i, 0&gt; {</div>
<div class="line"><a name="l00424"></a><span class="lineno"><a class="code" href="a00040.html#a7d0aeb5bdd7ebbe8b7a71f38f7cc1b36">  424</a></span>&#160;        <a class="code" href="a00040.html#a7d0aeb5bdd7ebbe8b7a71f38f7cc1b36">ComponentParser</a>(std::istream&amp; is) {</div>
<div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;        }</div>
<div class="line"><a name="l00426"></a><span class="lineno"><a class="code" href="a00040.html#ad829420f3bca874152088ebc1f0650c2">  426</a></span>&#160;        <span class="keywordtype">void</span> <a class="code" href="a00040.html#ad829420f3bca874152088ebc1f0650c2">read</a>(std::istream&amp;, tuple_type&amp;) {</div>
<div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;        }</div>
<div class="line"><a name="l00428"></a><span class="lineno"><a class="code" href="a00040.html#af9221a384ff9930215b80a759baf62ea">  428</a></span>&#160;        <span class="keywordtype">void</span> <a class="code" href="a00040.html#af9221a384ff9930215b80a759baf62ea">write</a>(std::ostream&amp;, <span class="keyword">const</span> tuple_type&amp;) {</div>
<div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;        }</div>
<div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;};</div>
<div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;</div>
<div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> ... Args&gt;</div>
<div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;<span class="keyword">template</span>&lt;<span class="keywordtype">int</span> i&gt;</div>
<div class="line"><a name="l00434"></a><span class="lineno"><a class="code" href="a00041.html">  434</a></span>&#160;<span class="keyword">class </span><a class="code" href="a00017.html">DefaultParser</a>&lt;std::tuple&lt;Args...&gt;&gt;::ComponentParser&lt;i, 1&gt; {</div>
<div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;        <span class="keyword">typedef</span> <span class="keyword">typename</span> std::tuple_element&lt;i, tuple_type&gt;::type element_type;</div>
<div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;        <a class="code" href="a00017.html">DefaultParser&lt;element_type&gt;</a> headParser_;</div>
<div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00438"></a><span class="lineno"><a class="code" href="a00041.html#adbde0d61dc3813b5050c5d2fdb23cc5c">  438</a></span>&#160;        <span class="keywordtype">void</span> <a class="code" href="a00041.html#adbde0d61dc3813b5050c5d2fdb23cc5c">read</a>(std::istream&amp; is, tuple_type&amp; t) {</div>
<div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;                headParser_.read(is, std::get &lt; i &gt; (t));</div>
<div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;        }</div>
<div class="line"><a name="l00441"></a><span class="lineno"><a class="code" href="a00041.html#a300d9a86062a8d02f6fb70a90d5e043c">  441</a></span>&#160;        <span class="keywordtype">void</span> <a class="code" href="a00041.html#a300d9a86062a8d02f6fb70a90d5e043c">write</a>(std::ostream&amp; os, <span class="keyword">const</span> tuple_type&amp; t) {</div>
<div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;                headParser_.write(os, std::get &lt; i &gt; (t));</div>
<div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;        }</div>
<div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;};</div>
<div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;</div>
<div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00448"></a><span class="lineno"><a class="code" href="a00134.html#ae0a8be25134badc6a1e9e6be54030c40">  448</a></span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> Data&gt; <a class="code" href="a00017.html">DefaultParser&lt;Data&gt;</a> <a class="code" href="a00134.html#ae0a8be25134badc6a1e9e6be54030c40">make_default_parser</a>() {</div>
<div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="a00017.html">DefaultParser&lt;Data&gt;</a>();</div>
<div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;}</div>
<div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;</div>
<div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;};</div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.3.1
</small></address>
</body>
</html>
