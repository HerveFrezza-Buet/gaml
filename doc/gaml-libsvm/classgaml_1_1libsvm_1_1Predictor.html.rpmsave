<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.3.1"/>
<title>gaml-libsvm: gaml::libsvm::Predictor&lt; Input, Output &gt; Class Template Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">gaml-libsvm
   &#160;<span id="projectnumber">1.04</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.3.1 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="namespaces.html"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.html"><span>Classes</span></a></li>
      <li><a href="files.html"><span>Files</span></a></li>
      <li><a href="examples.html"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.html"><span>Class&#160;List</span></a></li>
      <li><a href="classes.html"><span>Class&#160;Index</span></a></li>
      <li><a href="hierarchy.html"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.html"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Friends</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespacegaml.html">gaml</a></li><li class="navelem"><a class="el" href="namespacegaml_1_1libsvm.html">libsvm</a></li><li class="navelem"><a class="el" href="classgaml_1_1libsvm_1_1Predictor.html">Predictor</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-attribs">Public Attributes</a> &#124;
<a href="#friends">Friends</a> &#124;
<a href="classgaml_1_1libsvm_1_1Predictor-members.html">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">gaml::libsvm::Predictor&lt; Input, Output &gt; Class Template Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;<a class="el" href="gaml-libsvm_8hpp_source.html">gaml-libsvm.hpp</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:ac62978d1a866e17d2d35a4e4d4ac1bc9"><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="classgaml_1_1libsvm_1_1Predictor.html">Predictor</a>&lt; Input, Output &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgaml_1_1libsvm_1_1Predictor.html#ac62978d1a866e17d2d35a4e4d4ac1bc9">self_type</a></td></tr>
<tr class="separator:ac62978d1a866e17d2d35a4e4d4ac1bc9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a84308e1dcb70d8d3f546d6a15deebe4d"><td class="memItemLeft" align="right" valign="top">typedef Input&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgaml_1_1libsvm_1_1Predictor.html#a84308e1dcb70d8d3f546d6a15deebe4d">input_type</a></td></tr>
<tr class="separator:a84308e1dcb70d8d3f546d6a15deebe4d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0513709f8df3ecaa3d995d2e68fdfc45"><td class="memItemLeft" align="right" valign="top">typedef Output&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgaml_1_1libsvm_1_1Predictor.html#a0513709f8df3ecaa3d995d2e68fdfc45">output_type</a></td></tr>
<tr class="separator:a0513709f8df3ecaa3d995d2e68fdfc45"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:ab3c967b26a6b06703cddf2216259788c"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgaml_1_1libsvm_1_1Predictor.html#ab3c967b26a6b06703cddf2216259788c">Predictor</a> (void)</td></tr>
<tr class="separator:ab3c967b26a6b06703cddf2216259788c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac50f142679f87869edce2c3b4c53f910"><td class="memTemplParams" colspan="2">template&lt;typename NbNodeOf , typename NodesOf , typename FromDouble &gt; </td></tr>
<tr class="memitem:ac50f142679f87869edce2c3b4c53f910"><td class="memTemplItemLeft" align="right" valign="top">&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classgaml_1_1libsvm_1_1Predictor.html#ac50f142679f87869edce2c3b4c53f910">Predictor</a> (const NbNodeOf &amp;nb_nodes_of_func, const NodesOf &amp;nodes_of_func, const FromDouble &amp;from_double_func)</td></tr>
<tr class="separator:ac50f142679f87869edce2c3b4c53f910"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab0dd4f35142d390e571b2b1b59cacc33"><td class="memTemplParams" colspan="2">template&lt;typename NbNodeOf , typename NodesOf &gt; </td></tr>
<tr class="memitem:ab0dd4f35142d390e571b2b1b59cacc33"><td class="memTemplItemLeft" align="right" valign="top">&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classgaml_1_1libsvm_1_1Predictor.html#ab0dd4f35142d390e571b2b1b59cacc33">Predictor</a> (const NbNodeOf &amp;nb_nodes_of_func, const NodesOf &amp;nodes_of_func)</td></tr>
<tr class="separator:ab0dd4f35142d390e571b2b1b59cacc33"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a31c3bca1353405b25ab312923d67a561"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgaml_1_1libsvm_1_1Predictor.html#a31c3bca1353405b25ab312923d67a561">~Predictor</a> (void)</td></tr>
<tr class="separator:a31c3bca1353405b25ab312923d67a561"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5d7e9790114f9919ee94dadbb422b974"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgaml_1_1libsvm_1_1Predictor.html#a5d7e9790114f9919ee94dadbb422b974">Predictor</a> (const <a class="el" href="classgaml_1_1libsvm_1_1Predictor.html#ac62978d1a866e17d2d35a4e4d4ac1bc9">self_type</a> &amp;copy)</td></tr>
<tr class="separator:a5d7e9790114f9919ee94dadbb422b974"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5f184aea0b37ea289056e0d388147078"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classgaml_1_1libsvm_1_1Predictor.html#ac62978d1a866e17d2d35a4e4d4ac1bc9">self_type</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgaml_1_1libsvm_1_1Predictor.html#a5f184aea0b37ea289056e0d388147078">operator=</a> (const <a class="el" href="classgaml_1_1libsvm_1_1Predictor.html#ac62978d1a866e17d2d35a4e4d4ac1bc9">self_type</a> &amp;copy)</td></tr>
<tr class="separator:a5f184aea0b37ea289056e0d388147078"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a002338745ab268995c1c69d4b80c9bb2"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgaml_1_1libsvm_1_1Predictor.html#a002338745ab268995c1c69d4b80c9bb2">operator!</a> (void) const </td></tr>
<tr class="separator:a002338745ab268995c1c69d4b80c9bb2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9bf54461495f412933c5891f8a5d056f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classgaml_1_1libsvm_1_1Predictor.html#a0513709f8df3ecaa3d995d2e68fdfc45">output_type</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgaml_1_1libsvm_1_1Predictor.html#a9bf54461495f412933c5891f8a5d056f">operator()</a> (const <a class="el" href="classgaml_1_1libsvm_1_1Predictor.html#a84308e1dcb70d8d3f546d6a15deebe4d">input_type</a> &amp;x) const </td></tr>
<tr class="separator:a9bf54461495f412933c5891f8a5d056f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad0d0089453caa689175d6d60fb660bfc"><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgaml_1_1libsvm_1_1Predictor.html#ad0d0089453caa689175d6d60fb660bfc">predict</a> (const struct svm_node *x) const </td></tr>
<tr class="separator:ad0d0089453caa689175d6d60fb660bfc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a94bd0af924955f13fb62c19f9fc0bcb7"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgaml_1_1libsvm_1_1Predictor.html#a94bd0af924955f13fb62c19f9fc0bcb7">get_svm_type</a> (void) const </td></tr>
<tr class="separator:a94bd0af924955f13fb62c19f9fc0bcb7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a05b53d2eb5d2b922c9c393f26ac649ff"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgaml_1_1libsvm_1_1Predictor.html#a05b53d2eb5d2b922c9c393f26ac649ff">get_nr_class</a> (void) const </td></tr>
<tr class="separator:a05b53d2eb5d2b922c9c393f26ac649ff"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4c44530791cb4a98a532d73b06e0089d"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgaml_1_1libsvm_1_1Predictor.html#a4c44530791cb4a98a532d73b06e0089d">get_labels</a> (int *labels) const </td></tr>
<tr class="separator:a4c44530791cb4a98a532d73b06e0089d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5f60a27cdba44c724582c42be44b96f8"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgaml_1_1libsvm_1_1Predictor.html#a5f60a27cdba44c724582c42be44b96f8">get_sv_indices</a> (int *sv_indices) const </td></tr>
<tr class="separator:a5f60a27cdba44c724582c42be44b96f8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa17b6f853fff2fd809e7e6139d14a125"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgaml_1_1libsvm_1_1Predictor.html#aa17b6f853fff2fd809e7e6139d14a125">get_nr_sv</a> (void) const </td></tr>
<tr class="separator:aa17b6f853fff2fd809e7e6139d14a125"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6f493778a465a35d8ab95ec922d88df2"><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgaml_1_1libsvm_1_1Predictor.html#a6f493778a465a35d8ab95ec922d88df2">get_svr_probability</a> (void) const </td></tr>
<tr class="separator:a6f493778a465a35d8ab95ec922d88df2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a034d34153c60943a7ff7288e4a6dbaad"><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgaml_1_1libsvm_1_1Predictor.html#a034d34153c60943a7ff7288e4a6dbaad">predict_values</a> (const struct svm_node *x, double *dec_values) const </td></tr>
<tr class="separator:a034d34153c60943a7ff7288e4a6dbaad"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a53a3cb643e3a41cfe68d588dfa59dc32"><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgaml_1_1libsvm_1_1Predictor.html#a53a3cb643e3a41cfe68d588dfa59dc32">predict_probability</a> (const struct svm_node *x, double *prab_estimates) const </td></tr>
<tr class="separator:a53a3cb643e3a41cfe68d588dfa59dc32"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad37905af65ffa752a88ff0dd70f148b7"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgaml_1_1libsvm_1_1Predictor.html#ad37905af65ffa752a88ff0dd70f148b7">check_probability_model</a> (void) const </td></tr>
<tr class="separator:ad37905af65ffa752a88ff0dd70f148b7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aef23bcee1f366b949fd55410787e6369"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgaml_1_1libsvm_1_1Predictor.html#aef23bcee1f366b949fd55410787e6369">save_model</a> (const std::string &amp;model_file_name) const </td></tr>
<tr class="separator:aef23bcee1f366b949fd55410787e6369"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aca32570fdb343c1a99d46813bbfe1bcf"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgaml_1_1libsvm_1_1Predictor.html#aca32570fdb343c1a99d46813bbfe1bcf">load_model</a> (const std::string &amp;model_file_name)</td></tr>
<tr class="separator:aca32570fdb343c1a99d46813bbfe1bcf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afbb861692d4368bb02c013958f0efa16"><td class="memItemLeft" align="right" valign="top">struct svm_model &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgaml_1_1libsvm_1_1Predictor.html#afbb861692d4368bb02c013958f0efa16">get_model</a> (void) const </td></tr>
<tr class="separator:afbb861692d4368bb02c013958f0efa16"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"></a>
Public Attributes</h2></td></tr>
<tr class="memitem:aa50782a2de52d80c05b30daa32845c56"><td class="memItemLeft" align="right" valign="top">std::function&lt; int(const Input &amp;)&gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgaml_1_1libsvm_1_1Predictor.html#aa50782a2de52d80c05b30daa32845c56">nb_nodes_of</a></td></tr>
<tr class="separator:aa50782a2de52d80c05b30daa32845c56"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad815759f9831c8b8c8aeb5cb09d852e4"><td class="memItemLeft" align="right" valign="top">std::function&lt; void(const <br class="typebreak"/>
Input &amp;, struct svm_node *)&gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgaml_1_1libsvm_1_1Predictor.html#ad815759f9831c8b8c8aeb5cb09d852e4">nodes_of</a></td></tr>
<tr class="separator:ad815759f9831c8b8c8aeb5cb09d852e4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae3b71e45960318be6d6d45095ca9b53c"><td class="memItemLeft" align="right" valign="top">std::function&lt; Output(double)&gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgaml_1_1libsvm_1_1Predictor.html#ae3b71e45960318be6d6d45095ca9b53c">from_double</a></td></tr>
<tr class="separator:ae3b71e45960318be6d6d45095ca9b53c"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="friends"></a>
Friends</h2></td></tr>
<tr class="memitem:a90e6d29d12ed6f9a838901832a114fa2"><td class="memItemLeft" align="right" valign="top">class&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classgaml_1_1libsvm_1_1Predictor.html#a90e6d29d12ed6f9a838901832a114fa2">gaml::libsvm::Learner&lt; Input, Output &gt;</a></td></tr>
<tr class="separator:a90e6d29d12ed6f9a838901832a114fa2"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><h3>template&lt;typename Input, typename Output&gt;<br/>
class gaml::libsvm::Predictor&lt; Input, Output &gt;</h3>

<p>This is the predictor function. It handles internally a svm model. The svm model is set by some svm_train, and then handeled as a smart-pointer when the predictor is copied. </p>
<dl><dt><b>Examples: </b></dt><dd><a class="el" href="example-001-basics_8cpp-example.html#_a4">example-001-basics.cpp</a>, <a class="el" href="example-003-3D_8cpp-example.html#_a4">example-003-3D.cpp</a>, and <a class="el" href="example-004-grid-search_8cpp-example.html#_a1">example-004-grid-search.cpp</a>.</dd>
</dl></div><h2 class="groupheader">Member Typedef Documentation</h2>
<a class="anchor" id="a84308e1dcb70d8d3f546d6a15deebe4d"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Input, typename Output&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">typedef Input <a class="el" href="classgaml_1_1libsvm_1_1Predictor.html">gaml::libsvm::Predictor</a>&lt; Input, Output &gt;::<a class="el" href="classgaml_1_1libsvm_1_1Predictor.html#a84308e1dcb70d8d3f546d6a15deebe4d">input_type</a></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a class="anchor" id="a0513709f8df3ecaa3d995d2e68fdfc45"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Input, typename Output&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">typedef Output <a class="el" href="classgaml_1_1libsvm_1_1Predictor.html">gaml::libsvm::Predictor</a>&lt; Input, Output &gt;::<a class="el" href="classgaml_1_1libsvm_1_1Predictor.html#a0513709f8df3ecaa3d995d2e68fdfc45">output_type</a></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a class="anchor" id="ac62978d1a866e17d2d35a4e4d4ac1bc9"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Input, typename Output&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="classgaml_1_1libsvm_1_1Predictor.html">Predictor</a>&lt;Input,Output&gt; <a class="el" href="classgaml_1_1libsvm_1_1Predictor.html">gaml::libsvm::Predictor</a>&lt; Input, Output &gt;::<a class="el" href="classgaml_1_1libsvm_1_1Predictor.html#ac62978d1a866e17d2d35a4e4d4ac1bc9">self_type</a></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="ab3c967b26a6b06703cddf2216259788c"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Input, typename Output&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classgaml_1_1libsvm_1_1Predictor.html">gaml::libsvm::Predictor</a>&lt; Input, Output &gt;::<a class="el" href="classgaml_1_1libsvm_1_1Predictor.html">Predictor</a> </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a class="anchor" id="ac50f142679f87869edce2c3b4c53f910"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Input, typename Output&gt; </div>
<div class="memtemplate">
template&lt;typename NbNodeOf , typename NodesOf , typename FromDouble &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classgaml_1_1libsvm_1_1Predictor.html">gaml::libsvm::Predictor</a>&lt; Input, Output &gt;::<a class="el" href="classgaml_1_1libsvm_1_1Predictor.html">Predictor</a> </td>
          <td>(</td>
          <td class="paramtype">const NbNodeOf &amp;&#160;</td>
          <td class="paramname"><em>nb_nodes_of_func</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const NodesOf &amp;&#160;</td>
          <td class="paramname"><em>nodes_of_func</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const FromDouble &amp;&#160;</td>
          <td class="paramname"><em>from_double_func</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a class="anchor" id="ab0dd4f35142d390e571b2b1b59cacc33"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Input, typename Output&gt; </div>
<div class="memtemplate">
template&lt;typename NbNodeOf , typename NodesOf &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classgaml_1_1libsvm_1_1Predictor.html">gaml::libsvm::Predictor</a>&lt; Input, Output &gt;::<a class="el" href="classgaml_1_1libsvm_1_1Predictor.html">Predictor</a> </td>
          <td>(</td>
          <td class="paramtype">const NbNodeOf &amp;&#160;</td>
          <td class="paramname"><em>nb_nodes_of_func</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const NodesOf &amp;&#160;</td>
          <td class="paramname"><em>nodes_of_func</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a class="anchor" id="a31c3bca1353405b25ab312923d67a561"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Input, typename Output&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classgaml_1_1libsvm_1_1Predictor.html">gaml::libsvm::Predictor</a>&lt; Input, Output &gt;::~<a class="el" href="classgaml_1_1libsvm_1_1Predictor.html">Predictor</a> </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a class="anchor" id="a5d7e9790114f9919ee94dadbb422b974"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Input, typename Output&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classgaml_1_1libsvm_1_1Predictor.html">gaml::libsvm::Predictor</a>&lt; Input, Output &gt;::<a class="el" href="classgaml_1_1libsvm_1_1Predictor.html">Predictor</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classgaml_1_1libsvm_1_1Predictor.html#ac62978d1a866e17d2d35a4e4d4ac1bc9">self_type</a> &amp;&#160;</td>
          <td class="paramname"><em>copy</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a class="anchor" id="ad37905af65ffa752a88ff0dd70f148b7"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Input, typename Output&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="classgaml_1_1libsvm_1_1Predictor.html">gaml::libsvm::Predictor</a>&lt; Input, Output &gt;::check_probability_model </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>This encapsulates svm_get_nr_class of libsvm. </p>

</div>
</div>
<a class="anchor" id="a4c44530791cb4a98a532d73b06e0089d"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Input, typename Output&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="classgaml_1_1libsvm_1_1Predictor.html">gaml::libsvm::Predictor</a>&lt; Input, Output &gt;::get_labels </td>
          <td>(</td>
          <td class="paramtype">int *&#160;</td>
          <td class="paramname"><em>labels</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>This encapsulates svm_get_labels of libsvm. </p>

</div>
</div>
<a class="anchor" id="afbb861692d4368bb02c013958f0efa16"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Input, typename Output&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">struct svm_model&amp; <a class="el" href="classgaml_1_1libsvm_1_1Predictor.html">gaml::libsvm::Predictor</a>&lt; Input, Output &gt;::get_model </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">read</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a class="anchor" id="a05b53d2eb5d2b922c9c393f26ac649ff"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Input, typename Output&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="classgaml_1_1libsvm_1_1Predictor.html">gaml::libsvm::Predictor</a>&lt; Input, Output &gt;::get_nr_class </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>This encapsulates svm_get_nr_class of libsvm. </p>

</div>
</div>
<a class="anchor" id="aa17b6f853fff2fd809e7e6139d14a125"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Input, typename Output&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="classgaml_1_1libsvm_1_1Predictor.html">gaml::libsvm::Predictor</a>&lt; Input, Output &gt;::get_nr_sv </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>This encapsulates svm_get_nr_sv of libsvm. </p>

</div>
</div>
<a class="anchor" id="a5f60a27cdba44c724582c42be44b96f8"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Input, typename Output&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classgaml_1_1libsvm_1_1Predictor.html">gaml::libsvm::Predictor</a>&lt; Input, Output &gt;::get_sv_indices </td>
          <td>(</td>
          <td class="paramtype">int *&#160;</td>
          <td class="paramname"><em>sv_indices</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>This encapsulates svm_get_sv_indices of libsvm. </p>

</div>
</div>
<a class="anchor" id="a94bd0af924955f13fb62c19f9fc0bcb7"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Input, typename Output&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="classgaml_1_1libsvm_1_1Predictor.html">gaml::libsvm::Predictor</a>&lt; Input, Output &gt;::get_svm_type </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>This encapsulates svm_get_svm_type of libsvm. </p>

</div>
</div>
<a class="anchor" id="a6f493778a465a35d8ab95ec922d88df2"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Input, typename Output&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">double <a class="el" href="classgaml_1_1libsvm_1_1Predictor.html">gaml::libsvm::Predictor</a>&lt; Input, Output &gt;::get_svr_probability </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>This encapsulates svm_get_svr_probability of libsvm. </p>

</div>
</div>
<a class="anchor" id="aca32570fdb343c1a99d46813bbfe1bcf"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Input, typename Output&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classgaml_1_1libsvm_1_1Predictor.html">gaml::libsvm::Predictor</a>&lt; Input, Output &gt;::load_model </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>model_file_name</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>This encapsulates svm_save_model of libsvm. Be sure that function pointers nodes_of and nb_nodes_of are set in order to use the loaded predictor. </p>

</div>
</div>
<a class="anchor" id="a002338745ab268995c1c69d4b80c9bb2"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Input, typename Output&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classgaml_1_1libsvm_1_1Predictor.html">gaml::libsvm::Predictor</a>&lt; Input, Output &gt;::operator! </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a class="anchor" id="a9bf54461495f412933c5891f8a5d056f"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Input, typename Output&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classgaml_1_1libsvm_1_1Predictor.html#a0513709f8df3ecaa3d995d2e68fdfc45">output_type</a> <a class="el" href="classgaml_1_1libsvm_1_1Predictor.html">gaml::libsvm::Predictor</a>&lt; Input, Output &gt;::operator() </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classgaml_1_1libsvm_1_1Predictor.html#a84308e1dcb70d8d3f546d6a15deebe4d">input_type</a> &amp;&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>This call is not thread-safe. </p>

</div>
</div>
<a class="anchor" id="a5f184aea0b37ea289056e0d388147078"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Input, typename Output&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classgaml_1_1libsvm_1_1Predictor.html#ac62978d1a866e17d2d35a4e4d4ac1bc9">self_type</a>&amp; <a class="el" href="classgaml_1_1libsvm_1_1Predictor.html">gaml::libsvm::Predictor</a>&lt; Input, Output &gt;::operator= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classgaml_1_1libsvm_1_1Predictor.html#ac62978d1a866e17d2d35a4e4d4ac1bc9">self_type</a> &amp;&#160;</td>
          <td class="paramname"><em>copy</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a class="anchor" id="ad0d0089453caa689175d6d60fb660bfc"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Input, typename Output&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">double <a class="el" href="classgaml_1_1libsvm_1_1Predictor.html">gaml::libsvm::Predictor</a>&lt; Input, Output &gt;::predict </td>
          <td>(</td>
          <td class="paramtype">const struct svm_node *&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>This encapsulates svm_predict of libsvm. </p>

</div>
</div>
<a class="anchor" id="a53a3cb643e3a41cfe68d588dfa59dc32"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Input, typename Output&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">double <a class="el" href="classgaml_1_1libsvm_1_1Predictor.html">gaml::libsvm::Predictor</a>&lt; Input, Output &gt;::predict_probability </td>
          <td>(</td>
          <td class="paramtype">const struct svm_node *&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>prab_estimates</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>This encapsulates svm_predict_probability of libsvm. </p>

</div>
</div>
<a class="anchor" id="a034d34153c60943a7ff7288e4a6dbaad"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Input, typename Output&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">double <a class="el" href="classgaml_1_1libsvm_1_1Predictor.html">gaml::libsvm::Predictor</a>&lt; Input, Output &gt;::predict_values </td>
          <td>(</td>
          <td class="paramtype">const struct svm_node *&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>dec_values</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>This encapsulates svm_predict_values of libsvm. </p>

</div>
</div>
<a class="anchor" id="aef23bcee1f366b949fd55410787e6369"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Input, typename Output&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="classgaml_1_1libsvm_1_1Predictor.html">gaml::libsvm::Predictor</a>&lt; Input, Output &gt;::save_model </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>model_file_name</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>This encapsulates svm_save_model of libsvm. </p>

</div>
</div>
<h2 class="groupheader">Friends And Related Function Documentation</h2>
<a class="anchor" id="a90e6d29d12ed6f9a838901832a114fa2"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Input, typename Output&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">friend class <a class="el" href="classgaml_1_1libsvm_1_1Learner.html">gaml::libsvm::Learner</a>&lt; Input, Output &gt;</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">friend</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<h2 class="groupheader">Member Data Documentation</h2>
<a class="anchor" id="ae3b71e45960318be6d6d45095ca9b53c"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Input, typename Output&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">std::function&lt;Output (double)&gt; <a class="el" href="classgaml_1_1libsvm_1_1Predictor.html">gaml::libsvm::Predictor</a>&lt; Input, Output &gt;::from_double</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>This function is called internally. It converts a double to the real output type. </p>

</div>
</div>
<a class="anchor" id="aa50782a2de52d80c05b30daa32845c56"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Input, typename Output&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">std::function&lt;int (const Input&amp;)&gt; <a class="el" href="classgaml_1_1libsvm_1_1Predictor.html">gaml::libsvm::Predictor</a>&lt; Input, Output &gt;::nb_nodes_of</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>This function is called internally. </p>
<dl class="section return"><dt>Returns</dt><dd>The number of svm_node(s) required for storing x </dd></dl>

</div>
</div>
<a class="anchor" id="ad815759f9831c8b8c8aeb5cb09d852e4"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Input, typename Output&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">std::function&lt;void (const Input&amp;,struct svm_node*)&gt; <a class="el" href="classgaml_1_1libsvm_1_1Predictor.html">gaml::libsvm::Predictor</a>&lt; Input, Output &gt;::nodes_of</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>This function is called internally. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">nodes</td><td>an array of nodes having (at least) the size returned by nb_nodes_of. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li>/root/rpm_ims/nouveau/Sources/gaml-libsvm/sources/src/<a class="el" href="gaml-libsvm_8hpp_source.html">gaml-libsvm.hpp</a></li>
</ul>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Mon Jan 5 2015 10:58:41 for gaml-libsvm by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.3.1
</small></address>
</body>
</html>
